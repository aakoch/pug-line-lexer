{
  "lex": {
    "rules": [
      [
        [
          "INITIAL"
        ],
        ",\\s*",
        "return 'COMMA'"
      ],
      [
        [
          "INITIAL"
        ],
        "\\.\\.\\.\\w+",
        "debug('spread')\n                                          return 'SPREAD'"
      ],
      [
        [
          "INITIAL"
        ],
        "{space}",
        "return 'SPACE'"
      ],
      [
        [
          "INITIAL"
        ],
        "\\s*[^= ,]+",
        "this.pushState('AFTER_NAME')\n                                          return 'NAME'"
      ],
      [
        [
          "AFTER_NAME"
        ],
        "\\s*=\\s*",
        "this.popState()\n  this.pushState('AFTER_EQ')\n                                          return 'EQ'"
      ],
      [
        [
          "AFTER_EQ"
        ],
        "\\[[^\\]]+\\]",
        "this.popState()\n                                          return 'VAL'"
      ],
      [
        [
          "AFTER_EQ"
        ],
        "\\{[^\\}]+\\}",
        "this.popState()\n                                          return 'VAL'"
      ],
      [
        [
          "AFTER_EQ"
        ],
        "\"[^\"]+\"",
        "this.popState()\n                                          return 'VAL'"
      ],
      [
        [
          "AFTER_EQ"
        ],
        "'([^']|\\\\')+'\\s*$",
        "this.popState()\n  this.pushState('VARS')\n                                          return 'VAR'"
      ],
      [
        [
          "AFTER_EQ"
        ],
        "'([^']|\\\\')+'",
        "this.popState()\n  this.pushState('VARS')\n                                          return 'VAR'"
      ],
      [
        [
          "AFTER_EQ"
        ],
        "\\w+\\(\\)",
        "this.popState()\n                                          return 'VAL'"
      ],
      [
        [
          "AFTER_EQ"
        ],
        "[^=]+=(?!>)",
        "debug(\"<AFTER_EQ>[^=]+'='\")\n\n  debug('1 yytext=', yytext)\n  const lastSepIndex = findLastSeparatorIndex(yytext)\n  debug('lastSepIndex=', lastSepIndex)\n  debug('yytext.length=', yytext.length)\n  const nextToken = yytext.substring(lastSepIndex)\n  debug('nextToken=', nextToken)\n  this.unput(nextToken)\n  yytext = yytext.substring(0, lastSepIndex)\n  yytext = yytext.removeFromEnd(' ')\n  yytext = yytext.removeFromEnd(',')\n  debug('2 yytext=' + yytext)\n  \n  // debug('this.matches=', this.matches)\n\n  // if (yytext.includes('=')) {\n  //   debug('\"=\" was found')\n  //   // oh, great\n  //   // TODO:\n  // }\n  // else {\n  //   debug('\"=\" NOT found')\n  // }\n    this.popState()\n    this.popState()\n                                          return 'VAL'"
      ],
      [
        [
          "VARS"
        ],
        "\\s*\\+\\s*\\w+",
        "return ['VAR', 'PLUS']"
      ],
      [
        [
          "VARS"
        ],
        ",\\s*",
        "this.popState()\n                                          return 'COMMA'"
      ],
      [
        [
          "VARS"
        ],
        "{space}",
        "this.popState()\n                                          return 'SPACE'"
      ],
      [
        [
          "AFTER_EQ"
        ],
        ".+",
        "// id=id\n  this.popState()\n                                          return 'VAL'"
      ],
      [
        [
          "AFTER_NAME"
        ],
        ",{space}*",
        "debug(\"<AFTER_NAME>','\")\n  this.popState()\n                                            return 'COMMA'"
      ],
      [
        [
          "AFTER_NAME"
        ],
        "{space}",
        "debug(\"<AFTER_NAME>{space}\")\n  this.popState()\n                                            return 'SPACE'"
      ]
    ],
    "macros": {
      "space": "[ \\u00a0\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u200b\\u2028\\u2029\\u3000]"
    },
    "startConditions": {
      "AFTER_NAME": 1,
      "AFTER_EQ": 1,
      "VARS": 1
    },
    "codeSections": [],
    "importDecls": [],
    "unknownDecls": []
  },
  "options": {
    "ebnf": true,
    "token-stack": true
  },
  "moduleInclude": " \nvar assert = require(\"assert\");\nvar util = require(\"util\");\nvar utils = require(\"@aakoch/utils\");\nvar _ = require(\"lodash\");\nvar debugFunc = require('debug')\nconst dyp = require('dyp');\nconst parseAttrs = require('../dist/attrs.cjs')\nconst parseInline = require('../dist/inline.cjs')\nconsole.log('test')\n// let AttrResolver\n// import(\"file:../../foo-dog-attrs\").then(obj => {\n//   AttrResolver = obj\n//   console.log('AttrResolver=', AttrResolver)\n// })\n\nconst TEXT_TAGS_ALLOW_SUB_TAGS = true\n\nconst debug = debugFunc('pug-line-lexer:attrs')\n\nlet tagAlreadyFound = false\nlet obj, name, value\nvar lparenOpen = false\nconst keysToMergeText = ['therest']\nconst quoteStack = []\nconst parens = []\n\nfunction findLastSeparatorIndex(str) {\n  let index = str.length - 2\n  let letterFoundIndex = -1\n  while(letterFoundIndex == -1 && index > -1) {\n    const c = str.charAt(index)\n    if (/\\w/.test(c)) {\n      letterFoundIndex = index\n    }\n    index--\n  }\n  const substr = str.substring(0, letterFoundIndex)\n  return Math.max(substr.lastIndexOf(' '), substr.lastIndexOf(','))\n}\n\nfunction parseNumber(str) {\n  try {\n    if (str.includes('.')) {\n      return parseFloat(str)\n    }\n    else {\n      return parseInt(str)\n    }\n  } catch (e) {\n    console.error('Unparseable string \"' + str + '\"')\n    return NaN\n  }\n}\n\nparser.main = function () {\n  \n  tagAlreadyFound = false\n  lparenOpen = false\n\n\n\n  function test(input, expected, strict = true ) {\n    tagAlreadyFound = false\n    lparenOpen = false\n    debug(`\\nTesting '${input}'...`)\n    var actual = parser.parse(input)\n    debug(input + ' ==> ', util.inspect(actual))\n    \n    let compareFunc\n    if (strict)\n      compareFunc = assert.deepEqual\n    else \n      compareFunc = dyp\n\n    compareFunc.call({}, actual, expected)\n  }\n\ntest('abc,', [{name: 'abc'}])\ntest('foo, bar, baz', [{name: 'foo'}, {name: 'bar'}, {name: 'baz'}])\ntest(\"value='foo' selected\", [{name: 'value', val: \"'foo'\"}, {name: 'selected'}])\ntest(\"selected value='bar'\", [ { name: 'selected' }, { name: 'value', val: \"'bar'\" } ])\n\ntest(\"name='viewport' content='width=device-width'\", [{name: 'name', val: \"'viewport'\"}, {name: 'content', val: \"'width=device-width'\"}])\ntest(\"content='I came across a problem in Internet Explorer (it wasn\\\\'t a problem with Firefox) when I...'\", [{ name: 'content', val: \"'I came across a problem in Internet Explorer (it wasn\\\\'t a problem with Firefox) when I...'\" }])\ntest(\"property='og:description' content='I came across a problem in Internet Explorer (it wasn\\\\'t a problem with Firefox) when I...'\", [{ name: 'property', val: \"'og:description'\" }, { name: 'content', val: \"'I came across a problem in Internet Explorer (it wasn\\\\'t a problem with Firefox) when I...'\" }])\ntest(`foo=null bar=bar`, [{ name: 'foo', val: 'null' }, { name: 'bar', val: 'bar' }])\ntest(`data-epoc=new Date(0)`, [{ name: 'data-epoc', val: 'new Date(0)' }])\ntest(`class= (tags || []).map((tag) => tag.replaceAll(\" \", \"_\")).join(\" \")`, [{ name: 'class', val: '(tags || []).map((tag) => tag.replaceAll(\" \", \"_\")).join(\" \")'}])\ntest('id=id', [{ name: 'id', val: 'id'}])\n\ntest(`class=['foo', 'bar', 'baz']`, [{ name: 'class', val: \"['foo', 'bar', 'baz']\" }])\n\n// commenting this all out for now while I test pug-attr {\ntest(`class='bar'`, [{ name: 'class', val: \"'bar'\" }])\n// test(`class={foo: true, bar: false, baz: true}`, [{ name: 'class', val: \"[ 'foo', 'baz' ]\" }])\n// test(`v-for=\"item in items\" :name=\"item.id\" :value=\"item.name\"`, [{\n//   name: \"v-for\",\n//   val: \"item in items\"\n// }, {\n//   name: \":name\",\n//   val: \"item.id\"\n// }, {\n//   name: \":value\",\n//   val: \"item.name\"\n// }])\n\n// test(`class= (tags || []).map((tag) => tag.replaceAll(\" \", \"_\")).join(\" \")`, [{\n//   assignment: true,\n//   val: `(tags || []).map((tag) => tag.replaceAll(\" \", \"_\")).join(\" \")`,\n//   name: 'class'\n// }])\n\n// // url is a variable in a mixin\n// test(`href=url`, [\n//     { name: 'href', assignment: true, val: 'url' }\n//   ])\n\n// }\n\ntest(`data-escaped={message: \"Let's rock!\"}`, [{ name: 'data-escaped', val: '{message: \"Let\\'s rock!\"}' }])\ntest(`data-items=[1,2,3]`, [{ name: 'data-items', val: '[1,2,3]' }])\ntest(`href  =  '/user/' + id, class  =  'button'`, [{name: 'href', val: \"'/user/' + id\"}, {name: 'class', val: \"'button'\"}])\n\n// I'm not supporting this right now\n// test(`href='/user/' + id, class='button'`, [{\n//   name: 'href',\n//   assignment: true,\n//   val: '\"/user/\" + id'\n// },\n// {name: 'class', val: 'button'}])\n\n// test(`class = ['class1', 'class2']`, [{ name: 'class', val: 'class1 class2'}])\n\ntest(`href='/user/' + id, class='button'`, [\n  {\n    name: 'href',\n    val: \"'/user/' + id\"\n  },\n  {\n    name: 'class',\n    val: \"'button'\"\n  }\n])\ntest(`key='answer', value=answer()`, [\n  {\n    name: 'key',\n    val: \"'answer'\"\n  },\n  {\n    name: 'value',\n    val: 'answer()'\n  }\n])\ntest(`class = ['class1', 'class2']`, [\n  {\n    name: 'class',\n    val: \"['class1', 'class2']\"\n  }\n])\ntest(`href='/user/' + id class='button'`, [ {\n    name: 'href',\n    val: \"'/user/' + id\"\n  },  {\n    name: 'class',\n    val: \"'button'\"\n  }])\ntest(`href  =  '/user/' + id class  =  'button'`, [ {\n    name: 'href',\n    val: \"'/user/' + id\"\n  },  {\n    name: 'class',\n    val: \"'button'\"\n  }])\ntest(`key='answer' value=answer()`, [\n  {\n    name: 'key',\n    val: \"'answer'\"\n  },\n  {\n    name: 'value',\n    val: 'answer()'\n  }\n])\ntest(`class = ['class1', 'class2']`, [\n  {\n    name: 'class',\n    val: \"['class1', 'class2']\"\n  }\n])\ntest(`class = ['class1', 'class2']`, [\n  {\n    name: 'class',\n    val: \"['class1', 'class2']\"\n  }\n])\n\n// test(`id=id)&attributes({foo: 'bar'}`, {})\n// - var bar = null\n// test(`foo=null bar=bar)&attributes({baz: 'baz'}`. [])\n\ntest(`...object`, [{name: '...object', val: '...object'}])\ntest(`...object after=\"after\"`, [{name: '...object', val: '...object'}, {name: 'after', val: '\"after\"'}])\ntest(`before=\"before\" ...object`, [{name: 'before', val: '\"before\"'}, {name: '...object', val: '...object'}])\ntest(`before=\"before\" ...object after=\"after\"`, [{name: 'before', val: '\"before\"'}, {name: '...object', val: '...object'}, {name: 'after', val: '\"after\"'}])\n\n};\n\n",
  "ebnf": {
    "start": [
      "EOF",
      "attrs EOF"
    ],
    "attrs": [
      [
        "attrs (SPACE | COMMA) attr",
        "\n    $attrs.push($attr)\n    $$ = $attrs\n  "
      ],
      [
        "attrs (SPACE | COMMA)",
        "\n    $$ = $attrs\n  "
      ],
      [
        "attr",
        "\n    $$ = [$attr]\n  "
      ]
    ],
    "attr": [
      [
        "NAME EQ val",
        "\n    debug('attr: NAME EQ val: NAME=', $NAME, ', val=', $val)\n    $$ = { name: $NAME.trim(), val: $val }\n  "
      ],
      [
        "SPREAD",
        "\n    $$ = { name: $SPREAD, val: $SPREAD }\n  "
      ],
      [
        "NAME",
        "\n    debug('attr: NAME: $NAME=', $NAME)\n    // $$ = $1.map( function(id2) {\n    //   return { name: id2 }\n    // })\n    $$ = { name: $NAME }\n  "
      ]
    ],
    "val": [
      "VAL",
      "VAR",
      [
        "val PLUS VAR",
        "\n    $$ = $val + $VAR\n  "
      ]
    ]
  },
  "bnf": {
    "start": [
      "EOF",
      "attrs EOF"
    ],
    "attrs": [
      [
        "attrs attrs_group attr",
        "\n    $attrs.push($attr)\n    $$ = $attrs\n  "
      ],
      [
        "attrs attrs_group2",
        "\n    $$ = $attrs\n  "
      ],
      [
        "attr",
        "\n    $$ = [$attr]\n  "
      ]
    ],
    "attr": [
      [
        "NAME EQ val",
        "\n    debug('attr: NAME EQ val: NAME=', $NAME, ', val=', $val)\n    $$ = { name: $NAME.trim(), val: $val }\n  "
      ],
      [
        "SPREAD",
        "\n    $$ = { name: $SPREAD, val: $SPREAD }\n  "
      ],
      [
        "NAME",
        "\n    debug('attr: NAME: $NAME=', $NAME)\n    // $$ = $1.map( function(id2) {\n    //   return { name: id2 }\n    // })\n    $$ = { name: $NAME }\n  "
      ]
    ],
    "val": [
      "VAL",
      "VAR",
      [
        "val PLUS VAR",
        "\n    $$ = $val + $VAR\n  "
      ]
    ],
    "attrs_group": [
      [
        "SPACE",
        "$$ = $1;"
      ],
      [
        "COMMA",
        "$$ = $1;"
      ]
    ],
    "attrs_group2": [
      [
        "SPACE",
        "$$ = $1;"
      ],
      [
        "COMMA",
        "$$ = $1;"
      ]
    ]
  }
}