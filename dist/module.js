import $c1Lgv$assert from "assert";
import $c1Lgv$util from "util";
import "@foo-dog/utils";
import $c1Lgv$lodash from "lodash";
import $c1Lgv$debug from "debug";
import {AttrResolver as $c1Lgv$AttrResolver} from "@foo-dog/attrs";




















/* parser generated by jison 0.6.1-216 */ /*
 * Returns a Parser object of the following structure:
 *
 *  Parser: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a derivative/copy of this one,
 *               not a direct reference!
 *  }
 *
 *  Parser.prototype: {
 *    yy: {},
 *    EOF: 1,
 *    TERROR: 2,
 *
 *    trace: function(errorMessage, ...),
 *
 *    JisonParserError: function(msg, hash),
 *
 *    quoteName: function(name),
 *               Helper function which can be overridden by user code later on: put suitable
 *               quotes around literal IDs in a description string.
 *
 *    originalQuoteName: function(name),
 *               The basic quoteName handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `quoteName()` to reference this function
 *               at the end of the `parse()`.
 *
 *    describeSymbol: function(symbol),
 *               Return a more-or-less human-readable description of the given symbol, when
 *               available, or the symbol itself, serving as its own 'description' for lack
 *               of something better to serve up.
 *
 *               Return NULL when the symbol is unknown to the parser.
 *
 *    symbols_: {associative list: name ==> number},
 *    terminals_: {associative list: number ==> name},
 *    nonterminals: {associative list: rule-name ==> {associative list: number ==> rule-alt}},
 *    terminal_descriptions_: (if there are any) {associative list: number ==> description},
 *    productions_: [...],
 *
 *    performAction: function parser__performAction(yytext, yyleng, yylineno, yyloc, yystate, yysp, yyvstack, yylstack, yystack, yysstack),
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `yyval` internal object, which has members (`$` and `_$`)
 *                             to store/reference the rule value `$$` and location info `@$`.
 *
 *                 One important thing to note about `this` a.k.a. `yyval`: every *reduce* action gets
 *                 to see the same object via the `this` reference, i.e. if you wish to carry custom
 *                 data from one reduce action through to the next within a single parse run, then you
 *                 may get nasty and use `yyval` a.k.a. `this` for storing you own semi-permanent data.
 *
 *                 `this.yy` is a direct reference to the `yy` shared state object.
 *
 *                 `%parse-param`-specified additional `parse()` arguments have been added to this `yy`
 *                 object at `parse()` start and are therefore available to the action code via the
 *                 same named `yy.xxxx` attributes (where `xxxx` represents a identifier name from
 *                 the %parse-param` list.
 *
 *               - `yytext`  : reference to the lexer value which belongs to the last lexer token used
 *                             to match this rule. This is *not* the look-ahead token, but the last token
 *                             that's actually part of this rule.
 *
 *                 Formulated another way, `yytext` is the value of the token immediately preceeding
 *                 the current look-ahead token.
 *                 Caveats apply for rules which don't require look-ahead, such as epsilon rules.
 *
 *               - `yyleng`  : ditto as `yytext`, only now for the lexer.yyleng value.
 *
 *               - `yylineno`: ditto as `yytext`, only now for the lexer.yylineno value.
 *
 *               - `yyloc`   : ditto as `yytext`, only now for the lexer.yylloc lexer token location info.
 *
 *                               WARNING: since jison 0.4.18-186 this entry may be NULL/UNDEFINED instead
 *                               of an empty object when no suitable location info can be provided.
 *
 *               - `yystate` : the current parser state number, used internally for dispatching and
 *                               executing the action code chunk matching the rule currently being reduced.
 *
 *               - `yysp`    : the current state stack position (a.k.a. 'stack pointer')
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *                 Also note that you can access this and other stack index values using the new double-hash
 *                 syntax, i.e. `##$ === ##0 === yysp`, while `##1` is the stack index for all things
 *                 related to the first rule term, just like you have `$1`, `@1` and `#1`.
 *                 This is made available to write very advanced grammar action rules, e.g. when you want
 *                 to investigate the parse state stack in your action code, which would, for example,
 *                 be relevant when you wish to implement error diagnostics and reporting schemes similar
 *                 to the work described here:
 *
 *                 + Pottier, F., 2016. Reachability and error diagnosis in LR(1) automata.
 *                   In Journées Francophones des Languages Applicatifs.
 *
 *                 + Jeffery, C.L., 2003. Generating LR syntax error messages from examples.
 *                   ACM Transactions on Programming Languages and Systems (TOPLAS), 25(5), pp.631–640.
 *
 *               - `yyrulelength`: the current rule's term count, i.e. the number of entries occupied on the stack.
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *               - `yyvstack`: reference to the parser value stack. Also accessed via the `$1` etc.
 *                             constructs.
 *
 *               - `yylstack`: reference to the parser token location stack. Also accessed via
 *                             the `@1` etc. constructs.
 *
 *                             WARNING: since jison 0.4.18-186 this array MAY contain slots which are
 *                             UNDEFINED rather than an empty (location) object, when the lexer/parser
 *                             action code did not provide a suitable location info object when such a
 *                             slot was filled!
 *
 *               - `yystack` : reference to the parser token id stack. Also accessed via the
 *                             `#1` etc. constructs.
 *
 *                 Note: this is a bit of a **white lie** as we can statically decode any `#n` reference to
 *                 its numeric token id value, hence that code wouldn't need the `yystack` but *you* might
 *                 want access this array for your own purposes, such as error analysis as mentioned above!
 *
 *                 Note that this stack stores the current stack of *tokens*, that is the sequence of
 *                 already parsed=reduced *nonterminals* (tokens representing rules) and *terminals*
 *                 (lexer tokens *shifted* onto the stack until the rule they belong to is found and
 *                 *reduced*.
 *
 *               - `yysstack`: reference to the parser state stack. This one carries the internal parser
 *                             *states* such as the one in `yystate`, which are used to represent
 *                             the parser state machine in the *parse table*. *Very* *internal* stuff,
 *                             what can I say? If you access this one, you're clearly doing wicked things
 *
 *               - `...`     : the extra arguments you specified in the `%parse-param` statement in your
 *                             grammar definition file.
 *
 *    table: [...],
 *               State transition table
 *               ----------------------
 *
 *               index levels are:
 *               - `state`  --> hash table
 *               - `symbol` --> action (number or array)
 *
 *                 If the `action` is an array, these are the elements' meaning:
 *                 - index [0]: 1 = shift, 2 = reduce, 3 = accept
 *                 - index [1]: GOTO `state`
 *
 *                 If the `action` is a number, it is the GOTO `state`
 *
 *    defaultActions: {...},
 *
 *    parseError: function(str, hash, ExceptionClass),
 *    yyError: function(str, ...),
 *    yyRecovering: function(),
 *    yyErrOk: function(),
 *    yyClearIn: function(),
 *
 *    constructParseErrorInfo: function(error_message, exception_object, expected_token_set, is_recoverable),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this parser kernel in many places; example usage:
 *
 *                   var infoObj = parser.constructParseErrorInfo('fail!', null,
 *                                     parser.collect_expected_token_set(state), true);
 *                   var retVal = parser.parseError(infoObj.errStr, infoObj, parser.JisonParserError);
 *
 *    originalParseError: function(str, hash, ExceptionClass),
 *               The basic `parseError` handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `parseError()` to reference this function
 *               at the end of the `parse()`.
 *
 *    options: { ... parser %options ... },
 *
 *    parse: function(input[, args...]),
 *               Parse the given `input` and return the parsed value (or `true` when none was provided by
 *               the root action, in which case the parser is acting as a *matcher*).
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of this grammar:
 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
 *
 *               WARNING:
 *               Parser's additional `args...` parameters (via `%parse-param`) MAY conflict with
 *               any attributes already added to `yy` by the jison run-time;
 *               when such a collision is detected an exception is thrown to prevent the generated run-time
 *               from silently accepting this confusing and potentially hazardous situation!
 *
 *               The lexer MAY add its own set of additional parameters (via the `%parse-param` line in
 *               the lexer section of the grammar spec): these will be inserted in the `yy` shared state
 *               object and any collision with those will be reported by the lexer via a thrown exception.
 *
 *    cleanupAfterParse: function(resultValue, invoke_post_methods, do_not_nuke_errorinfos),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API is invoked at the end of the `parse()` call, unless an exception was thrown
 *               and `%options no-try-catch` has been defined for this grammar: in that case this helper MAY
 *               be invoked by calling user code to ensure the `post_parse` callbacks are invoked and
 *               the internal parser gets properly garbage collected under these particular circumstances.
 *
 *    yyMergeLocationInfo: function(first_index, last_index, first_yylloc, last_yylloc, dont_look_back),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API can be invoked to calculate a spanning `yylloc` location info object.
 *
 *               Note: %epsilon rules MAY specify no `first_index` and `first_yylloc`, in which case
 *               this function will attempt to obtain a suitable location marker by inspecting the location stack
 *               backwards.
 *
 *               For more info see the documentation comment further below, immediately above this function's
 *               implementation.
 *
 *    lexer: {
 *        yy: {...},           A reference to the so-called "shared state" `yy` once
 *                             received via a call to the `.setInput(input, yy)` lexer API.
 *        EOF: 1,
 *        ERROR: 2,
 *        JisonLexerError: function(msg, hash),
 *        parseError: function(str, hash, ExceptionClass),
 *        setInput: function(input, [yy]),
 *        input: function(),
 *        unput: function(str),
 *        more: function(),
 *        reject: function(),
 *        less: function(n),
 *        pastInput: function(n),
 *        upcomingInput: function(n),
 *        showPosition: function(),
 *        test_match: function(regex_match_array, rule_index, ...),
 *        next: function(...),
 *        lex: function(...),
 *        begin: function(condition),
 *        pushState: function(condition),
 *        popState: function(),
 *        topState: function(),
 *        _currentRules: function(),
 *        stateStackSize: function(),
 *        cleanupAfterLex: function()
 *
 *        options: { ... lexer %options ... },
 *
 *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START, ...),
 *        rules: [...],
 *        conditions: {associative list: name ==> set},
 *    }
 *  }
 *
 *
 *  token location info (@$, _$, etc.): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer and
 * parser errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *  }
 *
 * parser (grammar) errors will also provide these additional members:
 *
 *  {
 *    expected:    (array describing the set of expected tokens;
 *                  may be UNDEFINED when we cannot easily produce such a set)
 *    state:       (integer (or array when the table includes grammar collisions);
 *                  represents the current internal state of the parser kernel.
 *                  can, for example, be used to pass to the `collect_expected_token_set()`
 *                  API to obtain the expected token set)
 *    action:      (integer; represents the current internal action which will be executed)
 *    new_state:   (integer; represents the next/planned internal state, once the current
 *                  action has executed)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    value_stack: (array: the current parser LALR/LR internal `$$` value stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    location_stack: (array: the current parser LALR/LR internal location stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *    parser:      (reference to the current parser instance)
 *  }
 *
 * while `this` will reference the current parser instance.
 *
 * When `parseError` is invoked by the lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    lexer:       (reference to the current lexer instance which reported the error)
 *  }
 *
 * When `parseError` is invoked by the parser due to a **JavaScript exception** being fired
 * from either the parser or lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    exception:   (reference to the exception thrown)
 *  }
 *
 * Please do note that in the latter situation, the `expected` field will be omitted as
 * this type of failure is assumed not to be due to *parse errors* but rather due to user
 * action code in either parser or lexer failing unexpectedly.
 *
 * ---
 *
 * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.
 * These options are available:
 *
 * ### options which are global for all parser instances
 *
 *  Parser.pre_parse: function(yy)
 *                 optional: you can specify a pre_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`.
 *  Parser.post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: you can specify a post_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`. When it does not return any value,
 *                 the parser will return the original `retval`.
 *
 * ### options which can be set up per parser instance
 *
 *  yy: {
 *      pre_parse:  function(yy)
 *                 optional: is invoked before the parse cycle starts (and before the first
 *                 invocation of `lex()`) but immediately after the invocation of
 *                 `parser.pre_parse()`).
 *      post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: is invoked when the parse terminates due to success ('accept')
 *                 or failure (even when exceptions are thrown).
 *                 `retval` contains the return value to be produced by `Parser.parse()`;
 *                 this function can override the return value by returning another.
 *                 When it does not return any value, the parser will return the original
 *                 `retval`.
 *                 This function is invoked immediately before `parser.post_parse()`.
 *
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *      quoteName: function(name),
 *                 optional: overrides the default `quoteName` function.
 *  }
 *
 *  parser.lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this `%option` has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */ // See also:
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
// but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
// with userland code which might access the derived class in a 'classic' way.
function $51f63cf6b52326c0$var$JisonParserError(msg, hash) {
    Object.defineProperty(this, 'name', {
        enumerable: false,
        writable: false,
        value: 'JisonParserError'
    });
    if (msg == null) msg = '???';
    Object.defineProperty(this, 'message', {
        enumerable: false,
        writable: true,
        value: msg
    });
    this.hash = hash;
    var stacktrace;
    if (hash && hash.exception instanceof Error) {
        var ex2 = hash.exception;
        this.message = ex2.message || msg;
        stacktrace = ex2.stack;
    }
    if (!stacktrace) {
        if (Error.hasOwnProperty('captureStackTrace')) Error.captureStackTrace(this, this.constructor);
        else stacktrace = new Error(msg).stack;
    }
    if (stacktrace) Object.defineProperty(this, 'stack', {
        enumerable: false,
        writable: false,
        value: stacktrace
    });
}
if (typeof Object.setPrototypeOf === 'function') Object.setPrototypeOf($51f63cf6b52326c0$var$JisonParserError.prototype, Error.prototype);
else $51f63cf6b52326c0$var$JisonParserError.prototype = Object.create(Error.prototype);
$51f63cf6b52326c0$var$JisonParserError.prototype.constructor = $51f63cf6b52326c0$var$JisonParserError;
$51f63cf6b52326c0$var$JisonParserError.prototype.name = 'JisonParserError';
// helper: reconstruct the productions[] table
function $51f63cf6b52326c0$var$bp(s) {
    var rv = [];
    var p = s.pop;
    var r = s.rule;
    for(var i = 0, l = p.length; i < l; i++)rv.push([
        p[i],
        r[i]
    ]);
    return rv;
}
// helper: reconstruct the defaultActions[] table
function $51f63cf6b52326c0$var$bda(s) {
    var rv = {
    };
    var d = s.idx;
    var g = s.goto;
    for(var i = 0, l = d.length; i < l; i++){
        var j = d[i];
        rv[j] = g[i];
    }
    return rv;
}
// helper: reconstruct the 'goto' table
function $51f63cf6b52326c0$var$bt(s) {
    var rv = [];
    var d = s.len;
    var y = s.symbol;
    var t = s.type;
    var a = s.state;
    var m = s.mode;
    var g = s.goto;
    for(var i = 0, l = d.length; i < l; i++){
        var n = d[i];
        var q = {
        };
        for(var j = 0; j < n; j++){
            var z = y.shift();
            switch(t.shift()){
                case 2:
                    q[z] = [
                        m.shift(),
                        g.shift()
                    ];
                    break;
                case 0:
                    q[z] = a.shift();
                    break;
                default:
                    // type === 1: accept
                    q[z] = [
                        3
                    ];
            }
        }
        rv.push(q);
    }
    return rv;
}
// helper: runlength encoding with increment step: code, length: step (default step = 0)
// `this` references an array
function $51f63cf6b52326c0$var$s(c, l, a) {
    a = a || 0;
    for(var i = 0; i < l; i++){
        this.push(c);
        c += a;
    }
}
// helper: duplicate sequence from *relative* offset and length.
// `this` references an array
function $51f63cf6b52326c0$var$c(i, l) {
    i = this.length - i;
    for(l += i; i < l; i++)this.push(this[i]);
}
// helper: unpack an array using helpers and data, all passed in an array argument 'a'.
function $51f63cf6b52326c0$var$u(a) {
    var rv = [];
    for(var i = 0, l = a.length; i < l; i++){
        var e = a[i];
        // Is this entry a helper function?
        if (typeof e === 'function') {
            i++;
            e.apply(rv, a[i]);
        } else rv.push(e);
    }
    return rv;
}
var $51f63cf6b52326c0$var$parser = {
    // Code Generator Information Report
    // ---------------------------------
    //
    // Options:
    //
    //   default action mode: ............. ["classic","merge"]
    //   test-compile action mode: ........ "parser:*,lexer:*"
    //   try..catch: ...................... true
    //   default resolve on conflict: ..... true
    //   on-demand look-ahead: ............ false
    //   error recovery token skip maximum: 3
    //   yyerror in parse actions is: ..... NOT recoverable,
    //   yyerror in lexer actions and other non-fatal lexer are:
    //   .................................. NOT recoverable,
    //   debug grammar/output: ............ false
    //   has partial LR conflict upgrade:   true
    //   rudimentary token-stack support:   true
    //   parser table compression mode: ... 2
    //   export debug tables: ............. false
    //   export *all* tables: ............. false
    //   module type: ..................... es
    //   parser engine type: .............. lalr
    //   output main() in the module: ..... true
    //   has user-specified main(): ....... false
    //   has user-specified require()/import modules for main():
    //   .................................. false
    //   number of expected conflicts: .... 0
    //
    //
    // Parser Analysis flags:
    //
    //   no significant actions (parser is a language matcher only):
    //   .................................. false
    //   uses yyleng: ..................... false
    //   uses yylineno: ................... false
    //   uses yytext: ..................... false
    //   uses yylloc: ..................... false
    //   uses ParseError API: ............. false
    //   uses YYERROR: .................... false
    //   uses YYRECOVERING: ............... false
    //   uses YYERROK: .................... false
    //   uses YYCLEARIN: .................. false
    //   tracks rule values: .............. true
    //   assigns rule values: ............. true
    //   uses location tracking: .......... false
    //   assigns location: ................ false
    //   uses yystack: .................... false
    //   uses yysstack: ................... false
    //   uses yysp: ....................... true
    //   uses yyrulelength: ............... false
    //   uses yyMergeLocationInfo API: .... false
    //   has error recovery: .............. false
    //   has error reporting: ............. false
    //
    // --------- END OF REPORT -----------
    trace: function no_op_trace() {
    },
    JisonParserError: $51f63cf6b52326c0$var$JisonParserError,
    yy: {
    },
    options: {
        type: "lalr",
        hasPartialLrUpgradeOnConflict: true,
        errorRecoveryTokenDiscardCount: 3,
        tokenStack: true,
        ebnf: true
    },
    symbols_: {
        "$accept": 0,
        "$end": 1,
        "ASSIGN_PART": 13,
        "ATTR": 12,
        "BODY": 11,
        "CLASSNAME": 14,
        "DOT": 10,
        "EOF": 1,
        "EQ": 7,
        "FILTER_START": 6,
        "INTERPOLATION": 9,
        "TAG": 3,
        "TAG_END": 5,
        "TAG_START": 4,
        "TEXT": 8,
        "error": 2,
        "line": 16,
        "line_part": 17,
        "line_part_repetition": 41,
        "line_part_repetition2": 42,
        "line_part_repetition3": 43,
        "line_part_repetition4": 44,
        "line_part_repetition5": 45,
        "line_part_repetition_plus": 18,
        "line_part_repetition_plus10": 27,
        "line_part_repetition_plus11": 28,
        "line_part_repetition_plus12": 29,
        "line_part_repetition_plus13": 30,
        "line_part_repetition_plus14": 31,
        "line_part_repetition_plus15": 32,
        "line_part_repetition_plus16": 33,
        "line_part_repetition_plus17": 34,
        "line_part_repetition_plus18": 35,
        "line_part_repetition_plus19": 36,
        "line_part_repetition_plus2": 19,
        "line_part_repetition_plus20": 37,
        "line_part_repetition_plus21": 38,
        "line_part_repetition_plus22": 39,
        "line_part_repetition_plus23": 40,
        "line_part_repetition_plus3": 20,
        "line_part_repetition_plus4": 21,
        "line_part_repetition_plus5": 22,
        "line_part_repetition_plus6": 23,
        "line_part_repetition_plus7": 24,
        "line_part_repetition_plus8": 25,
        "line_part_repetition_plus9": 26,
        "start": 15
    },
    terminals_: {
        1: "EOF",
        2: "error",
        3: "TAG",
        4: "TAG_START",
        5: "TAG_END",
        6: "FILTER_START",
        7: "EQ",
        8: "TEXT",
        9: "INTERPOLATION",
        10: "DOT",
        11: "BODY",
        12: "ATTR",
        13: "ASSIGN_PART",
        14: "CLASSNAME"
    },
    TERROR: 2,
    EOF: 1,
    // internals: defined here so the object *structure* doesn't get modified by parse() et al,
    // thus helping JIT compilers like Chrome V8.
    originalQuoteName: null,
    originalParseError: null,
    cleanupAfterParse: null,
    constructParseErrorInfo: null,
    yyMergeLocationInfo: null,
    __reentrant_call_depth: 0,
    __error_infos: [],
    __error_recovery_infos: [],
    // APIs which will be set up depending on user action code analysis:
    //yyRecovering: 0,
    //yyErrOk: 0,
    //yyClearIn: 0,
    // Helper APIs
    // -----------
    // Helper function which can be overridden by user code later on: put suitable quotes around
    // literal IDs in a description string.
    quoteName: function parser_quoteName(id_str) {
        return '"' + id_str + '"';
    },
    // Return the name of the given symbol (terminal or non-terminal) as a string, when available.
    //
    // Return NULL when the symbol is unknown to the parser.
    getSymbolName: function parser_getSymbolName(symbol) {
        if (this.terminals_[symbol]) return this.terminals_[symbol];
        // Otherwise... this might refer to a RULE token i.e. a non-terminal: see if we can dig that one up.
        //
        // An example of this may be where a rule's action code contains a call like this:
        //
        //      parser.getSymbolName(#$)
        //
        // to obtain a human-readable name of the current grammar rule.
        var s = this.symbols_;
        for(var key in s){
            if (s[key] === symbol) return key;
        }
        return null;
    },
    // Return a more-or-less human-readable description of the given symbol, when available,
    // or the symbol itself, serving as its own 'description' for lack of something better to serve up.
    //
    // Return NULL when the symbol is unknown to the parser.
    describeSymbol: function parser_describeSymbol(symbol) {
        if (symbol !== this.EOF && this.terminal_descriptions_ && this.terminal_descriptions_[symbol]) return this.terminal_descriptions_[symbol];
        else if (symbol === this.EOF) return 'end of input';
        var id = this.getSymbolName(symbol);
        if (id) return this.quoteName(id);
        return null;
    },
    // Produce a (more or less) human-readable list of expected tokens at the point of failure.
    //
    // The produced list may contain token or token set descriptions instead of the tokens
    // themselves to help turning this output into something that easier to read by humans
    // unless `do_not_describe` parameter is set, in which case a list of the raw, *numeric*,
    // expected terminals and nonterminals is produced.
    //
    // The returned list (array) will not contain any duplicate entries.
    collect_expected_token_set: function parser_collect_expected_token_set(state, do_not_describe) {
        var TERROR = this.TERROR;
        var tokenset = [];
        var check = {
        };
        // Has this (error?) state been outfitted with a custom expectations description text for human consumption?
        // If so, use that one instead of the less palatable token set.
        if (!do_not_describe && this.state_descriptions_ && this.state_descriptions_[state]) return [
            this.state_descriptions_[state]
        ];
        for(var p in this.table[state]){
            p = +p;
            if (p !== TERROR) {
                var d = do_not_describe ? p : this.describeSymbol(p);
                if (d && !check[d]) {
                    tokenset.push(d);
                    check[d] = true; // Mark this token description as already mentioned to prevent outputting duplicate entries.
                }
            }
        }
        return tokenset;
    },
    productions_: $51f63cf6b52326c0$var$bp({
        pop: $51f63cf6b52326c0$var$u([
            15,
            16,
            16,
            $51f63cf6b52326c0$var$s,
            [
                17,
                22
            ],
            18,
            18,
            19,
            19,
            20,
            20,
            21,
            21,
            22,
            22,
            23,
            23,
            24,
            24,
            25,
            25,
            26,
            26,
            27,
            27,
            28,
            28,
            29,
            29,
            30,
            30,
            31,
            31,
            32,
            32,
            33,
            33,
            34,
            34,
            35,
            35,
            36,
            36,
            37,
            37,
            38,
            38,
            39,
            39,
            40,
            40,
            41,
            41,
            42,
            42,
            43,
            43,
            44,
            44,
            45,
            45
        ]),
        rule: $51f63cf6b52326c0$var$u([
            2,
            2,
            1,
            0,
            1,
            1,
            2,
            $51f63cf6b52326c0$var$s,
            [
                3,
                3
            ],
            4,
            4,
            $51f63cf6b52326c0$var$c,
            [
                6,
                6
            ],
            4,
            5,
            5,
            6,
            2,
            6,
            4,
            1,
            2,
            1,
            2,
            $51f63cf6b52326c0$var$c,
            [
                4,
                42
            ],
            0,
            2,
            0,
            $51f63cf6b52326c0$var$c,
            [
                4,
                7
            ]
        ])
    }),
    performAction: function parser__PerformAction(yystate /* action[1] */ , yysp, yyvstack) {
        /* this == yyval */ // the JS engine itself can go and remove these statements when `yy` turns out to be unused in any action code!
        var yy = this.yy;
        var yyparser = yy.parser;
        var yylexer = yy.lexer;
        switch(yystate){
            case 0:
                /*! Production::    $accept : start $end */ // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-):
                this.$ = yyvstack[yysp - 1];
                break;
            case 1:
                /*! Production::    start : line EOF */ // default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-):
                this.$ = yyvstack[yysp - 1];
                break;
            case 2:
                /*! Production::    line : line line_part */ $51f63cf6b52326c0$var$debug('line: line line_part: $line=', yyvstack[yysp - 1], ', $line_part=', yyvstack[yysp]);
                if (Array.isArray(yyvstack[yysp - 1])) this.$ = yyvstack[yysp - 1];
                else this.$ = [
                    yyvstack[yysp - 1]
                ];
                this.$.push(yyvstack[yysp]);
                break;
            case 3:
                /*! Production::    line : line_part */ $51f63cf6b52326c0$var$debug('line: line_part: $line_part=', yyvstack[yysp]);
                if (Array.isArray(yyvstack[yysp])) this.$ = yyvstack[yysp];
                else this.$ = [
                    yyvstack[yysp]
                ];
                break;
            case 4:
                /*! Production::    line_part : %epsilon */ // default action (generated by JISON mode classic/merge :: 0,VT,VA,-,-,-,-,-,-):
                this.$ = undefined;
                break;
            case 5:
                /*! Production::    line_part : TAG */ let [tag_name, attrs, body] = yyvstack[yysp];
                $51f63cf6b52326c0$var$debug('$TAG=', yyvstack[yysp]);
                $51f63cf6b52326c0$var$debug('tag_name=', tag_name);
                $51f63cf6b52326c0$var$debug('attrs=', attrs);
                $51f63cf6b52326c0$var$debug('body=', body);
                const obj1 = {
                    type: 'tag',
                    name: tag_name,
                    attrs: attrs
                };
                if (attrs == undefined) delete obj1.attrs;
                if (body == '') delete obj1.val;
                else if (body.includes('<') && body.includes('>')) {
                    $51f63cf6b52326c0$var$debug('parsing ', body);
                    $51f63cf6b52326c0$var$recursive++;
                    let parsedBody = yy.parser.parse(body);
                    $51f63cf6b52326c0$var$recursive--;
                    $51f63cf6b52326c0$var$debug('parsedBody=', parsedBody);
                    if (parsedBody.length == 1 && parsedBody[0].type == 'text' && !parsedBody[0].hasOwnProperty('children')) obj1.val = parsedBody[0].val;
                    else obj1.children = obj1.hasOwnProperty('children') ? obj1.children.push(...parsedBody) : parsedBody;
                } else obj1.val = body;
                this.$ = obj1;
                break;
            case 6:
                /*! Production::    line_part : line_part_repetition_plus */ this.$ = {
                    type: 'text',
                    val: yyvstack[yysp].join('')
                };
                break;
            case 7:
                /*! Production::    line_part : TAG_START TAG_END */ this.$ = {
                    type: 'tag',
                    name: yyvstack[yysp - 1]
                };
                break;
            case 8:
            /*! Production::    line_part : TAG_START line_part_repetition_plus2 TAG_END */ case 9:
                /*! Production::    line_part : TAG_START line_part_repetition_plus3 TAG_END */ this.$ = {
                    type: 'tag',
                    name: yyvstack[yysp - 2],
                    val: yyvstack[yysp - 1].join('')
                };
                break;
            case 10:
                /*! Production::    line_part : TAG_START line_part_repetition_plus4 TAG_END */ this.$ = {
                    type: 'tag',
                    name: yyvstack[yysp - 2],
                    attrs: $510a014853e7284e$export$2e2bcd8739ae039.parse(yyvstack[yysp - 1].join(''))
                };
                break;
            case 11:
            /*! Production::    line_part : TAG_START line_part_repetition_plus5 line_part_repetition_plus6 TAG_END */ case 12:
                /*! Production::    line_part : TAG_START line_part_repetition_plus7 line_part_repetition_plus8 TAG_END */ this.$ = {
                    type: 'tag',
                    name: yyvstack[yysp - 3],
                    val: yyvstack[yysp - 1].join(''),
                    attrs: $510a014853e7284e$export$2e2bcd8739ae039.parse(yyvstack[yysp - 2].join(''))
                };
                break;
            case 13:
                /*! Production::    line_part : FILTER_START TAG_END */ this.$ = {
                    type: 'filter',
                    name: yyvstack[yysp - 1]
                };
                break;
            case 14:
            /*! Production::    line_part : FILTER_START line_part_repetition_plus9 TAG_END */ case 15:
                /*! Production::    line_part : FILTER_START line_part_repetition_plus10 TAG_END */ this.$ = {
                    type: 'filter',
                    name: yyvstack[yysp - 2],
                    val: yyvstack[yysp - 1].join('')
                };
                break;
            case 16:
                /*! Production::    line_part : FILTER_START line_part_repetition_plus11 TAG_END */ this.$ = {
                    type: 'filter',
                    name: yyvstack[yysp - 2],
                    attrs: $510a014853e7284e$export$2e2bcd8739ae039.parse(yyvstack[yysp - 1].join(''))
                };
                break;
            case 17:
            /*! Production::    line_part : FILTER_START line_part_repetition_plus12 line_part_repetition_plus13 TAG_END */ case 18:
                /*! Production::    line_part : FILTER_START line_part_repetition_plus14 line_part_repetition_plus15 TAG_END */ this.$ = {
                    type: 'filter',
                    name: yyvstack[yysp - 3],
                    val: yyvstack[yysp - 1].join(''),
                    attrs: $510a014853e7284e$export$2e2bcd8739ae039.parse(yyvstack[yysp - 2].join(''))
                };
                break;
            case 19:
                /*! Production::    line_part : TAG_START EQ line_part_repetition_plus16 TAG_END */ this.$ = {
                    type: 'tag',
                    name: yyvstack[yysp - 3],
                    assignment: yyvstack[yysp - 1].join('')
                };
                break;
            case 20:
                /*! Production::    line_part : TAG_START EQ line_part_repetition_plus17 line_part_repetition_plus18 TAG_END */ this.$ = {
                    type: 'tag',
                    name: yyvstack[yysp - 4],
                    assignment: yyvstack[yysp - 2].join(''),
                    attrs: $510a014853e7284e$export$2e2bcd8739ae039.parse(yyvstack[yysp].join(''))
                };
                break;
            case 21:
                /*! Production::    line_part : TAG_START EQ line_part_repetition_plus19 line_part_repetition_plus20 TAG_END */ this.$ = {
                    type: 'tag',
                    name: yyvstack[yysp - 4],
                    assignment: yyvstack[yysp - 2].join(''),
                    val: yyvstack[yysp].join('')
                };
                break;
            case 22:
                /*! Production::    line_part : TAG_START EQ line_part_repetition_plus21 line_part_repetition_plus22 line_part_repetition_plus23 TAG_END */ this.$ = {
                    type: 'tag',
                    name: yyvstack[yysp - 5],
                    assignment: yyvstack[yysp - 3].join(''),
                    val: yyvstack[yysp].join(''),
                    attrs: $510a014853e7284e$export$2e2bcd8739ae039.parse(yyvstack[yysp - 1].join(''))
                };
                break;
            case 23:
                /*! Production::    line_part : TEXT INTERPOLATION */ this.$ = [
                    {
                        type: 'text',
                        val: yyvstack[yysp - 1]
                    },
                    // { type: 'interp', val: $INTERPOLATION.slice(2, -1) }
                    {
                        type: 'interp',
                        val: yyvstack[yysp]
                    }
                ];
                break;
            case 24:
                /*! Production::    line_part : TAG_START DOT line_part_repetition line_part_repetition2 line_part_repetition3 TAG_END */ this.$ = {
                    type: 'tag',
                    name: yyvstack[yysp - 5]
                };
                if (yyvstack[yysp - 3]) this.$.classes = yyvstack[yysp - 3];
                if (yyvstack[yysp - 2]) this.$.attrs = $510a014853e7284e$export$2e2bcd8739ae039.parse(yyvstack[yysp - 2].join(''));
                if (yyvstack[yysp - 1]) this.$.val = yyvstack[yysp - 1].join('');
                break;
            case 25:
                /*! Production::    line_part : TAG_START line_part_repetition4 line_part_repetition5 TAG_END */ $51f63cf6b52326c0$var$debug('TAG_START ATTR* BODY* TAG_END');
                this.$ = {
                    type: 'tag',
                    name: yyvstack[yysp - 3]
                };
                if (yyvstack[yysp - 2]) this.$.attrs = $510a014853e7284e$export$2e2bcd8739ae039.parse(yyvstack[yysp - 2].join(''));
                if (yyvstack[yysp - 1]) this.$.val = yyvstack[yysp - 1].join('');
                break;
            case 26:
            /*! Production::    line_part_repetition_plus : TEXT */ case 28:
            /*! Production::    line_part_repetition_plus2 : BODY */ case 30:
            /*! Production::    line_part_repetition_plus3 : BODY */ case 32:
            /*! Production::    line_part_repetition_plus4 : ATTR */ case 34:
            /*! Production::    line_part_repetition_plus5 : ATTR */ case 36:
            /*! Production::    line_part_repetition_plus6 : BODY */ case 38:
            /*! Production::    line_part_repetition_plus7 : ATTR */ case 40:
            /*! Production::    line_part_repetition_plus8 : BODY */ case 42:
            /*! Production::    line_part_repetition_plus9 : BODY */ case 44:
            /*! Production::    line_part_repetition_plus10 : BODY */ case 46:
            /*! Production::    line_part_repetition_plus11 : ATTR */ case 48:
            /*! Production::    line_part_repetition_plus12 : ATTR */ case 50:
            /*! Production::    line_part_repetition_plus13 : BODY */ case 52:
            /*! Production::    line_part_repetition_plus14 : ATTR */ case 54:
            /*! Production::    line_part_repetition_plus15 : BODY */ case 56:
            /*! Production::    line_part_repetition_plus16 : ASSIGN_PART */ case 58:
            /*! Production::    line_part_repetition_plus17 : ASSIGN_PART */ case 60:
            /*! Production::    line_part_repetition_plus18 : ATTR */ case 62:
            /*! Production::    line_part_repetition_plus19 : ASSIGN_PART */ case 64:
            /*! Production::    line_part_repetition_plus20 : BODY */ case 66:
            /*! Production::    line_part_repetition_plus21 : ASSIGN_PART */ case 68:
            /*! Production::    line_part_repetition_plus22 : ATTR */ case 70:
                /*! Production::    line_part_repetition_plus23 : BODY */ this.$ = [
                    yyvstack[yysp]
                ];
                break;
            case 27:
            /*! Production::    line_part_repetition_plus : line_part_repetition_plus TEXT */ case 29:
            /*! Production::    line_part_repetition_plus2 : line_part_repetition_plus2 BODY */ case 31:
            /*! Production::    line_part_repetition_plus3 : line_part_repetition_plus3 BODY */ case 33:
            /*! Production::    line_part_repetition_plus4 : line_part_repetition_plus4 ATTR */ case 35:
            /*! Production::    line_part_repetition_plus5 : line_part_repetition_plus5 ATTR */ case 37:
            /*! Production::    line_part_repetition_plus6 : line_part_repetition_plus6 BODY */ case 39:
            /*! Production::    line_part_repetition_plus7 : line_part_repetition_plus7 ATTR */ case 41:
            /*! Production::    line_part_repetition_plus8 : line_part_repetition_plus8 BODY */ case 43:
            /*! Production::    line_part_repetition_plus9 : line_part_repetition_plus9 BODY */ case 45:
            /*! Production::    line_part_repetition_plus10 : line_part_repetition_plus10 BODY */ case 47:
            /*! Production::    line_part_repetition_plus11 : line_part_repetition_plus11 ATTR */ case 49:
            /*! Production::    line_part_repetition_plus12 : line_part_repetition_plus12 ATTR */ case 51:
            /*! Production::    line_part_repetition_plus13 : line_part_repetition_plus13 BODY */ case 53:
            /*! Production::    line_part_repetition_plus14 : line_part_repetition_plus14 ATTR */ case 55:
            /*! Production::    line_part_repetition_plus15 : line_part_repetition_plus15 BODY */ case 57:
            /*! Production::    line_part_repetition_plus16 : line_part_repetition_plus16 ASSIGN_PART */ case 59:
            /*! Production::    line_part_repetition_plus17 : line_part_repetition_plus17 ASSIGN_PART */ case 61:
            /*! Production::    line_part_repetition_plus18 : line_part_repetition_plus18 ATTR */ case 63:
            /*! Production::    line_part_repetition_plus19 : line_part_repetition_plus19 ASSIGN_PART */ case 65:
            /*! Production::    line_part_repetition_plus20 : line_part_repetition_plus20 BODY */ case 67:
            /*! Production::    line_part_repetition_plus21 : line_part_repetition_plus21 ASSIGN_PART */ case 69:
            /*! Production::    line_part_repetition_plus22 : line_part_repetition_plus22 ATTR */ case 71:
            /*! Production::    line_part_repetition_plus23 : line_part_repetition_plus23 BODY */ case 73:
            /*! Production::    line_part_repetition : line_part_repetition CLASSNAME */ case 75:
            /*! Production::    line_part_repetition2 : line_part_repetition2 ATTR */ case 77:
            /*! Production::    line_part_repetition3 : line_part_repetition3 BODY */ case 79:
            /*! Production::    line_part_repetition4 : line_part_repetition4 ATTR */ case 81:
                /*! Production::    line_part_repetition5 : line_part_repetition5 BODY */ yyvstack[yysp - 1].push(yyvstack[yysp]);
                this.$ = yyvstack[yysp - 1];
                break;
            case 72:
            /*! Production::    line_part_repetition : %epsilon */ case 74:
            /*! Production::    line_part_repetition2 : %epsilon */ case 76:
            /*! Production::    line_part_repetition3 : %epsilon */ case 78:
            /*! Production::    line_part_repetition4 : %epsilon */ case 80:
                /*! Production::    line_part_repetition5 : %epsilon */ this.$ = [];
                break;
        }
    },
    table: $51f63cf6b52326c0$var$bt({
        len: $51f63cf6b52326c0$var$u([
            9,
            1,
            7,
            0,
            0,
            5,
            11,
            8,
            6,
            $51f63cf6b52326c0$var$s,
            [
                0,
                4
            ],
            $51f63cf6b52326c0$var$s,
            [
                2,
                3
            ],
            3,
            3,
            5,
            1,
            4,
            0,
            3,
            $51f63cf6b52326c0$var$c,
            [
                11,
                6
            ],
            $51f63cf6b52326c0$var$c,
            [
                8,
                3
            ],
            $51f63cf6b52326c0$var$s,
            [
                0,
                6
            ],
            2,
            $51f63cf6b52326c0$var$c,
            [
                3,
                6
            ],
            $51f63cf6b52326c0$var$s,
            [
                3,
                3
            ],
            4,
            5,
            $51f63cf6b52326c0$var$c,
            [
                9,
                3
            ],
            $51f63cf6b52326c0$var$c,
            [
                20,
                11
            ],
            $51f63cf6b52326c0$var$c,
            [
                12,
                12
            ],
            $51f63cf6b52326c0$var$c,
            [
                46,
                3
            ],
            4,
            $51f63cf6b52326c0$var$s,
            [
                0,
                11
            ],
            $51f63cf6b52326c0$var$c,
            [
                33,
                9
            ]
        ]),
        symbol: $51f63cf6b52326c0$var$u([
            1,
            3,
            4,
            6,
            8,
            $51f63cf6b52326c0$var$s,
            [
                15,
                4,
                1
            ],
            1,
            $51f63cf6b52326c0$var$c,
            [
                10,
                5
            ],
            $51f63cf6b52326c0$var$c,
            [
                8,
                3
            ],
            $51f63cf6b52326c0$var$c,
            [
                7,
                4
            ],
            5,
            7,
            10,
            11,
            12,
            $51f63cf6b52326c0$var$s,
            [
                19,
                4,
                1
            ],
            24,
            44,
            5,
            11,
            12,
            $51f63cf6b52326c0$var$s,
            [
                26,
                4,
                1
            ],
            31,
            $51f63cf6b52326c0$var$c,
            [
                24,
                5
            ],
            9,
            5,
            11,
            5,
            11,
            5,
            12,
            11,
            12,
            23,
            11,
            12,
            25,
            13,
            33,
            34,
            36,
            38,
            41,
            $51f63cf6b52326c0$var$c,
            [
                32,
                3
            ],
            45,
            $51f63cf6b52326c0$var$c,
            [
                4,
                3
            ],
            $51f63cf6b52326c0$var$c,
            [
                25,
                8
            ],
            30,
            11,
            12,
            32,
            $51f63cf6b52326c0$var$c,
            [
                15,
                8
            ],
            13,
            12,
            13,
            35,
            11,
            13,
            37,
            12,
            13,
            39,
            $51f63cf6b52326c0$var$c,
            [
                18,
                3
            ],
            13,
            $51f63cf6b52326c0$var$c,
            [
                4,
                3
            ],
            14,
            42,
            $51f63cf6b52326c0$var$c,
            [
                24,
                5
            ],
            $51f63cf6b52326c0$var$c,
            [
                41,
                3
            ],
            5,
            11,
            11,
            12,
            40,
            $51f63cf6b52326c0$var$c,
            [
                18,
                3
            ],
            43,
            $51f63cf6b52326c0$var$c,
            [
                15,
                4
            ]
        ]),
        type: $51f63cf6b52326c0$var$u([
            $51f63cf6b52326c0$var$s,
            [
                2,
                5
            ],
            $51f63cf6b52326c0$var$s,
            [
                0,
                4
            ],
            1,
            $51f63cf6b52326c0$var$c,
            [
                10,
                7
            ],
            $51f63cf6b52326c0$var$s,
            [
                2,
                10
            ],
            $51f63cf6b52326c0$var$s,
            [
                0,
                6
            ],
            $51f63cf6b52326c0$var$c,
            [
                9,
                8
            ],
            $51f63cf6b52326c0$var$s,
            [
                2,
                14
            ],
            $51f63cf6b52326c0$var$c,
            [
                15,
                3
            ],
            0,
            $51f63cf6b52326c0$var$c,
            [
                24,
                9
            ],
            $51f63cf6b52326c0$var$c,
            [
                28,
                12
            ],
            $51f63cf6b52326c0$var$c,
            [
                25,
                5
            ],
            $51f63cf6b52326c0$var$c,
            [
                15,
                16
            ],
            $51f63cf6b52326c0$var$c,
            [
                18,
                9
            ],
            $51f63cf6b52326c0$var$c,
            [
                70,
                13
            ],
            $51f63cf6b52326c0$var$c,
            [
                59,
                9
            ]
        ]),
        state: $51f63cf6b52326c0$var$u([
            1,
            2,
            3,
            5,
            10,
            5,
            $51f63cf6b52326c0$var$s,
            [
                13,
                5,
                1
            ],
            20,
            $51f63cf6b52326c0$var$s,
            [
                24,
                5,
                1
            ],
            38,
            41,
            $51f63cf6b52326c0$var$s,
            [
                44,
                4,
                1
            ],
            49,
            50,
            58,
            61,
            $51f63cf6b52326c0$var$s,
            [
                70,
                4,
                3
            ],
            91,
            94
        ]),
        mode: $51f63cf6b52326c0$var$u([
            2,
            $51f63cf6b52326c0$var$s,
            [
                1,
                9
            ],
            $51f63cf6b52326c0$var$s,
            [
                2,
                4
            ],
            $51f63cf6b52326c0$var$c,
            [
                13,
                13
            ],
            $51f63cf6b52326c0$var$c,
            [
                14,
                10
            ],
            $51f63cf6b52326c0$var$c,
            [
                17,
                5
            ],
            $51f63cf6b52326c0$var$c,
            [
                20,
                4
            ],
            $51f63cf6b52326c0$var$c,
            [
                16,
                12
            ],
            $51f63cf6b52326c0$var$c,
            [
                31,
                15
            ],
            $51f63cf6b52326c0$var$c,
            [
                50,
                17
            ],
            $51f63cf6b52326c0$var$c,
            [
                51,
                4
            ],
            $51f63cf6b52326c0$var$s,
            [
                1,
                4
            ]
        ]),
        goto: $51f63cf6b52326c0$var$u([
            4,
            4,
            $51f63cf6b52326c0$var$s,
            [
                6,
                4,
                1
            ],
            $51f63cf6b52326c0$var$c,
            [
                5,
                4
            ],
            $51f63cf6b52326c0$var$s,
            [
                6,
                4
            ],
            11,
            12,
            18,
            19,
            21,
            22,
            23,
            29,
            30,
            $51f63cf6b52326c0$var$s,
            [
                26,
                5
            ],
            $51f63cf6b52326c0$var$s,
            [
                31,
                7,
                1
            ],
            40,
            39,
            43,
            42,
            48,
            80,
            80,
            51,
            32,
            34,
            32,
            $51f63cf6b52326c0$var$s,
            [
                52,
                6,
                1
            ],
            60,
            59,
            63,
            62,
            46,
            48,
            46,
            $51f63cf6b52326c0$var$s,
            [
                64,
                6,
                1
            ],
            72,
            71,
            75,
            74,
            78,
            77,
            56,
            62,
            58,
            56,
            $51f63cf6b52326c0$var$s,
            [
                74,
                3
            ],
            $51f63cf6b52326c0$var$s,
            [
                80,
                11,
                1
            ],
            93,
            92,
            76,
            76,
            $51f63cf6b52326c0$var$s,
            [
                95,
                5,
                1
            ]
        ])
    }),
    defaultActions: $51f63cf6b52326c0$var$bda({
        idx: $51f63cf6b52326c0$var$u([
            3,
            4,
            $51f63cf6b52326c0$var$s,
            [
                9,
                4,
                1
            ],
            19,
            21,
            23,
            29,
            $51f63cf6b52326c0$var$s,
            [
                31,
                7,
                1
            ],
            39,
            40,
            42,
            43,
            $51f63cf6b52326c0$var$s,
            [
                51,
                7,
                1
            ],
            59,
            60,
            $51f63cf6b52326c0$var$s,
            [
                62,
                8,
                1
            ],
            71,
            72,
            74,
            75,
            77,
            78,
            $51f63cf6b52326c0$var$s,
            [
                80,
                11,
                1
            ],
            92,
            93,
            $51f63cf6b52326c0$var$s,
            [
                95,
                5,
                1
            ]
        ]),
        goto: $51f63cf6b52326c0$var$u([
            3,
            5,
            1,
            2,
            27,
            7,
            72,
            28,
            13,
            42,
            23,
            8,
            29,
            9,
            31,
            10,
            33,
            35,
            36,
            39,
            40,
            79,
            14,
            43,
            15,
            45,
            16,
            47,
            49,
            50,
            53,
            54,
            11,
            37,
            12,
            41,
            19,
            57,
            59,
            60,
            63,
            64,
            67,
            68,
            73,
            25,
            81,
            17,
            51,
            18,
            55,
            20,
            61,
            21,
            65,
            69,
            70,
            75,
            22,
            71,
            24,
            77
        ])
    }),
    parseError: function parseError(str, hash, ExceptionClass) {
        if (hash.recoverable) {
            if (typeof this.trace === 'function') this.trace(str);
            hash.destroy(); // destroy... well, *almost*!
        } else {
            if (typeof this.trace === 'function') this.trace(str);
            if (!ExceptionClass) ExceptionClass = this.JisonParserError;
            throw new ExceptionClass(str, hash);
        }
    },
    parse: function parse(input) {
        var self = this;
        var stack = new Array(128); // token stack: stores token which leads to state at the same index (column storage)
        var sstack = new Array(128); // state stack: stores states (column storage)
        var tstack = []; // token stack (only used when `%options token_stack` support has been enabled)
        var vstack = new Array(128); // semantic value stack
        var table = this.table;
        var sp = 0; // 'stack pointer': index into the stacks
        var symbol1 = 0;
        var TERROR = this.TERROR;
        var EOF = this.EOF;
        var ERROR_RECOVERY_TOKEN_DISCARD_COUNT = this.options.errorRecoveryTokenDiscardCount | 0 || 3;
        var NO_ACTION = [
            0,
            100 /* === table.length :: ensures that anyone using this new state will fail dramatically! */ 
        ];
        var lexer;
        if (this.__lexer__) lexer = this.__lexer__;
        else lexer = this.__lexer__ = Object.create(this.lexer);
        var sharedState_yy = {
            parseError: undefined,
            quoteName: undefined,
            lexer: undefined,
            parser: undefined,
            pre_parse: undefined,
            post_parse: undefined,
            pre_lex: undefined,
            post_lex: undefined // WARNING: must be written this way for the code expanders to work correctly in both ES5 and ES6 modes!
        };
        var ASSERT;
        if (typeof $c1Lgv$assert !== 'function') ASSERT = function JisonAssert(cond, msg) {
            if (!cond) throw new Error('assertion failed: ' + (msg || '***'));
        };
        else ASSERT = $c1Lgv$assert;
        this.yyGetSharedState = function yyGetSharedState() {
            return sharedState_yy;
        };
        function shallow_copy_noclobber(dst, src) {
            for(var k in src)if (typeof dst[k] === 'undefined' && Object.prototype.hasOwnProperty.call(src, k)) dst[k] = src[k];
        }
        // copy state
        shallow_copy_noclobber(sharedState_yy, this.yy);
        sharedState_yy.lexer = lexer;
        sharedState_yy.parser = this;
        // Does the shared state override the default `parseError` that already comes with this instance?
        if (typeof sharedState_yy.parseError === 'function') this.parseError = function parseErrorAlt(str, hash, ExceptionClass) {
            if (!ExceptionClass) ExceptionClass = this.JisonParserError;
            return sharedState_yy.parseError.call(this, str, hash, ExceptionClass);
        };
        else this.parseError = this.originalParseError;
        // Does the shared state override the default `quoteName` that already comes with this instance?
        if (typeof sharedState_yy.quoteName === 'function') this.quoteName = function quoteNameAlt(id_str) {
            return sharedState_yy.quoteName.call(this, id_str);
        };
        else this.quoteName = this.originalQuoteName;
        // set up the cleanup function; make it an API so that external code can re-use this one in case of
        // calamities or when the `%options no-try-catch` option has been specified for the grammar, in which
        // case this parse() API method doesn't come with a `finally { ... }` block any more!
        //
        // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
        //       or else your `sharedState`, etc. references will be *wrong*!
        this.cleanupAfterParse = function parser_cleanupAfterParse(resultValue, invoke_post_methods, do_not_nuke_errorinfos) {
            var rv;
            if (invoke_post_methods) {
                var hash;
                if (sharedState_yy.post_parse || this.post_parse) // create an error hash info instance: we re-use this API in a **non-error situation**
                // as this one delivers all parser internals ready for access by userland code.
                hash = this.constructParseErrorInfo(null, null, null, false);
                if (sharedState_yy.post_parse) {
                    rv = sharedState_yy.post_parse.call(this, sharedState_yy, resultValue, hash);
                    if (typeof rv !== 'undefined') resultValue = rv;
                }
                if (this.post_parse) {
                    rv = this.post_parse.call(this, sharedState_yy, resultValue, hash);
                    if (typeof rv !== 'undefined') resultValue = rv;
                }
                // cleanup:
                if (hash && hash.destroy) hash.destroy();
            }
            if (this.__reentrant_call_depth > 1) return resultValue; // do not (yet) kill the sharedState when this is a reentrant run.
            // clean up the lingering lexer structures as well:
            if (lexer.cleanupAfterLex) lexer.cleanupAfterLex(do_not_nuke_errorinfos);
            // prevent lingering circular references from causing memory leaks:
            if (sharedState_yy) {
                sharedState_yy.lexer = undefined;
                sharedState_yy.parser = undefined;
                if (lexer.yy === sharedState_yy) lexer.yy = undefined;
            }
            sharedState_yy = undefined;
            this.parseError = this.originalParseError;
            this.quoteName = this.originalQuoteName;
            // nuke the vstack[] array at least as that one will still reference obsoleted user values.
            // To be safe, we nuke the other internal stack columns as well...
            stack.length = 0; // fastest way to nuke an array without overly bothering the GC
            sstack.length = 0;
            vstack.length = 0;
            sp = 0;
            // nuke the error hash info instances created during this run.
            // Userland code must COPY any data/references
            // in the error hash instance(s) it is more permanently interested in.
            if (!do_not_nuke_errorinfos) {
                for(var i = this.__error_infos.length - 1; i >= 0; i--){
                    var el = this.__error_infos[i];
                    if (el && typeof el.destroy === 'function') el.destroy();
                }
                this.__error_infos.length = 0;
            }
            return resultValue;
        };
        // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
        //       or else your `lexer`, `sharedState`, etc. references will be *wrong*!
        this.constructParseErrorInfo = function parser_constructParseErrorInfo(msg, ex, expected, recoverable) {
            var pei = {
                errStr: msg,
                exception: ex,
                text: lexer.match,
                value: lexer.yytext,
                token: this.describeSymbol(symbol1) || symbol1,
                token_id: symbol1,
                line: lexer.yylineno,
                expected: expected,
                recoverable: recoverable,
                state: state,
                action: action,
                new_state: newState,
                symbol_stack: stack,
                state_stack: sstack,
                value_stack: vstack,
                stack_pointer: sp,
                yy: sharedState_yy,
                lexer: lexer,
                parser: this,
                // and make sure the error info doesn't stay due to potential
                // ref cycle via userland code manipulations.
                // These would otherwise all be memory leak opportunities!
                //
                // Note that only array and object references are nuked as those
                // constitute the set of elements which can produce a cyclic ref.
                // The rest of the members is kept intact as they are harmless.
                destroy: function destructParseErrorInfo() {
                    // remove cyclic references added to error info:
                    // info.yy = null;
                    // info.lexer = null;
                    // info.value = null;
                    // info.value_stack = null;
                    // ...
                    var rec = !!this.recoverable;
                    for(var key in this)if (this.hasOwnProperty(key) && typeof key === 'object') this[key] = undefined;
                    this.recoverable = rec;
                }
            };
            // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
            this.__error_infos.push(pei);
            return pei;
        };
        function getNonTerminalFromCode(symbol) {
            var tokenName = self.getSymbolName(symbol);
            if (!tokenName) tokenName = symbol;
            return tokenName;
        }
        // lex function that supports token stacks
        function lex() {
            var token;
            token = tstack.pop() || lexer.lex() || EOF;
            // if token isn't its numeric value, convert
            if (typeof token !== 'number') {
                if (token instanceof Array) {
                    tstack = token;
                    token = tstack.pop();
                }
                // if token isn't its numeric value, convert
                if (typeof token !== 'number') token = self.symbols_[token] || token;
            }
            return token || EOF;
        }
        var state, action, r, t;
        var yyval = {
            $: true,
            _$: undefined,
            yy: sharedState_yy
        };
        var p;
        var yyrulelen;
        var this_production;
        var newState;
        var retval = false;
        try {
            this.__reentrant_call_depth++;
            lexer.setInput(input, sharedState_yy);
            // NOTE: we *assume* no lexer pre/post handlers are set up *after* 
            // this initial `setInput()` call: hence we can now check and decide
            // whether we'll go with the standard, slower, lex() API or the
            // `fast_lex()` one:
            if (typeof lexer.canIUse === 'function') {
                var lexerInfo = lexer.canIUse();
                if (lexerInfo.fastLex && typeof fastLex === 'function') lex = fastLex;
            }
            vstack[sp] = null;
            sstack[sp] = 0;
            stack[sp] = 0;
            ++sp;
            if (this.pre_parse) this.pre_parse.call(this, sharedState_yy);
            if (sharedState_yy.pre_parse) sharedState_yy.pre_parse.call(this, sharedState_yy);
            newState = sstack[sp - 1];
            for(;;){
                // retrieve state number from top of stack
                state = newState; // sstack[sp - 1];
                // use default actions if available
                if (this.defaultActions[state]) {
                    action = 2;
                    newState = this.defaultActions[state];
                } else {
                    // The single `==` condition below covers both these `===` comparisons in a single
                    // operation:
                    //
                    //     if (symbol === null || typeof symbol === 'undefined') ...
                    if (!symbol1) symbol1 = lex();
                    // read action for current state and first input
                    t = table[state] && table[state][symbol1] || NO_ACTION;
                    newState = t[1];
                    action = t[0];
                    // handle parse error
                    if (!action) {
                        var errStr;
                        var errSymbolDescr = this.describeSymbol(symbol1) || symbol1;
                        var expected1 = this.collect_expected_token_set(state);
                        // Report error
                        if (typeof lexer.yylineno === 'number') errStr = 'Parse error on line ' + (lexer.yylineno + 1) + ': ';
                        else errStr = 'Parse error: ';
                        if (typeof lexer.showPosition === 'function') errStr += '\n' + lexer.showPosition(69, 10) + '\n';
                        if (expected1.length) errStr += 'Expecting ' + expected1.join(', ') + ', got unexpected ' + errSymbolDescr;
                        else errStr += 'Unexpected ' + errSymbolDescr;
                        // we cannot recover from the error!
                        p = this.constructParseErrorInfo(errStr, null, expected1, false);
                        r = this.parseError(p.errStr, p, this.JisonParserError);
                        if (typeof r !== 'undefined') retval = r;
                        break;
                    }
                }
                switch(action){
                    // catch misc. parse failures:
                    default:
                        // this shouldn't happen, unless resolve defaults are off
                        if (action instanceof Array) {
                            p = this.constructParseErrorInfo('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol1, null, null, false);
                            r = this.parseError(p.errStr, p, this.JisonParserError);
                            if (typeof r !== 'undefined') retval = r;
                            break;
                        }
                        // Another case of better safe than sorry: in case state transitions come out of another error recovery process
                        // or a buggy LUT (LookUp Table):
                        p = this.constructParseErrorInfo('Parsing halted. No viable error recovery approach available due to internal system failure.', null, null, false);
                        r = this.parseError(p.errStr, p, this.JisonParserError);
                        if (typeof r !== 'undefined') retval = r;
                        break;
                    // shift:
                    case 1:
                        stack[sp] = symbol1;
                        vstack[sp] = lexer.yytext;
                        sstack[sp] = newState; // push state
                        ++sp;
                        symbol1 = 0;
                        continue;
                    // reduce:
                    case 2:
                        this_production = this.productions_[newState - 1]; // `this.productions_[]` is zero-based indexed while states start from 1 upwards...
                        yyrulelen = this_production[1];
                        r = this.performAction.call(yyval, newState, sp - 1, vstack);
                        if (typeof r !== 'undefined') {
                            retval = r;
                            break;
                        }
                        // pop off stack
                        sp -= yyrulelen;
                        // don't overwrite the `symbol` variable: use a local var to speed things up:
                        var ntsymbol = this_production[0]; // push nonterminal (reduce)
                        stack[sp] = ntsymbol;
                        vstack[sp] = yyval.$;
                        // goto new state = table[STATE][NONTERMINAL]
                        newState = table[sstack[sp - 1]][ntsymbol];
                        sstack[sp] = newState;
                        ++sp;
                        continue;
                    // accept:
                    case 3:
                        if (sp !== -2) {
                            retval = true;
                            // Return the `$accept` rule's `$$` result, if available.
                            //
                            // Also note that JISON always adds this top-most `$accept` rule (with implicit,
                            // default, action):
                            //
                            //     $accept: <startSymbol> $end
                            //                  %{ $$ = $1; @$ = @1; %}
                            //
                            // which, combined with the parse kernel's `$accept` state behaviour coded below,
                            // will produce the `$$` value output of the <startSymbol> rule as the parse result,
                            // IFF that result is *not* `undefined`. (See also the parser kernel code.)
                            //
                            // In code:
                            //
                            //                  %{
                            //                      @$ = @1;            // if location tracking support is included
                            //                      if (typeof $1 !== 'undefined')
                            //                          return $1;
                            //                      else
                            //                          return true;           // the default parse result if the rule actions don't produce anything
                            //                  %}
                            sp--;
                            if (typeof vstack[sp] !== 'undefined') retval = vstack[sp];
                        }
                        break;
                }
                break;
            }
        } catch (ex) {
            // report exceptions through the parseError callback too, but keep the exception intact
            // if it is a known parser or lexer error which has been thrown by parseError() already:
            if (ex instanceof this.JisonParserError) throw ex;
            else if (lexer && typeof lexer.JisonLexerError === 'function' && ex instanceof lexer.JisonLexerError) throw ex;
            p = this.constructParseErrorInfo('Parsing aborted due to exception.', ex, null, false);
            retval = false;
            r = this.parseError(p.errStr, p, this.JisonParserError);
            if (typeof r !== 'undefined') retval = r;
        } finally{
            retval = this.cleanupAfterParse(retval, true, true);
            this.__reentrant_call_depth--;
        } // /finally
        return retval;
    }
};
$51f63cf6b52326c0$var$parser.originalParseError = $51f63cf6b52326c0$var$parser.parseError;
$51f63cf6b52326c0$var$parser.originalQuoteName = $51f63cf6b52326c0$var$parser.quoteName;
/* lexer generated by jison-lex 0.6.1-216 */ /*
 * Returns a Lexer object of the following structure:
 *
 *  Lexer: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a direct reference!
 *
 *               This "shared context" object was passed to the lexer by way of 
 *               the `lexer.setInput(str, yy)` API before you may use it.
 *
 *               This "shared context" object is passed to the lexer action code in `performAction()`
 *               so userland code in the lexer actions may communicate with the outside world 
 *               and/or other lexer rules' actions in more or less complex ways.
 *
 *  }
 *
 *  Lexer.prototype: {
 *    EOF: 1,
 *    ERROR: 2,
 *
 *    yy:        The overall "shared context" object reference.
 *
 *    JisonLexerError: function(msg, hash),
 *
 *    performAction: function lexer__performAction(yy, yyrulenumber, YY_START),
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `lexer` instance. 
 *                               `yy_` is an alias for `this` lexer instance reference used internally.
 *
 *               - `yy`      : a reference to the `yy` "shared state" object which was passed to the lexer
 *                             by way of the `lexer.setInput(str, yy)` API before.
 *
 *                             Note:
 *                             The extra arguments you specified in the `%parse-param` statement in your
 *                             **parser** grammar definition file are passed to the lexer via this object
 *                             reference as member variables.
 *
 *               - `yyrulenumber`   : index of the matched lexer rule (regex), used internally.
 *
 *               - `YY_START`: the current lexer "start condition" state.
 *
 *    parseError: function(str, hash, ExceptionClass),
 *
 *    constructLexErrorInfo: function(error_message, is_recoverable),
 *               Helper function.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this lexer kernel in many places; example usage:
 *
 *                   var infoObj = lexer.constructParseErrorInfo('fail!', true);
 *                   var retVal = lexer.parseError(infoObj.errStr, infoObj, lexer.JisonLexerError);
 *
 *    options: { ... lexer %options ... },
 *
 *    lex: function(),
 *               Produce one token of lexed input, which was passed in earlier via the `lexer.setInput()` API.
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of the **lexer** grammar:
 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
 *
 *               WARNING:
 *               Lexer's additional `args...` parameters (via lexer's `%parse-param`) MAY conflict with
 *               any attributes already added to `yy` by the **parser** or the jison run-time; 
 *               when such a collision is detected an exception is thrown to prevent the generated run-time 
 *               from silently accepting this confusing and potentially hazardous situation! 
 *
 *    cleanupAfterLex: function(do_not_nuke_errorinfos),
 *               Helper function.
 *
 *               This helper API is invoked when the **parse process** has completed: it is the responsibility
 *               of the **parser** (or the calling userland code) to invoke this method once cleanup is desired. 
 *
 *               This helper may be invoked by user code to ensure the internal lexer gets properly garbage collected.
 *
 *    setInput: function(input, [yy]),
 *
 *
 *    input: function(),
 *
 *
 *    unput: function(str),
 *
 *
 *    more: function(),
 *
 *
 *    reject: function(),
 *
 *
 *    less: function(n),
 *
 *
 *    pastInput: function(n),
 *
 *
 *    upcomingInput: function(n),
 *
 *
 *    showPosition: function(),
 *
 *
 *    test_match: function(regex_match_array, rule_index),
 *
 *
 *    next: function(),
 *
 *
 *    begin: function(condition),
 *
 *
 *    pushState: function(condition),
 *
 *
 *    popState: function(),
 *
 *
 *    topState: function(),
 *
 *
 *    _currentRules: function(),
 *
 *
 *    stateStackSize: function(),
 *
 *
 *    performAction: function(yy, yy_, yyrulenumber, YY_START),
 *
 *
 *    rules: [...],
 *
 *
 *    conditions: {associative list: name ==> set},
 *  }
 *
 *
 *  token location info (`yylloc`): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *  }
 *
 * while `this` will reference the current lexer instance.
 *
 * When `parseError` is invoked by the lexer, the default implementation will
 * attempt to invoke `yy.parser.parseError()`; when this callback is not provided
 * it will try to invoke `yy.parseError()` instead. When that callback is also not
 * provided, a `JisonLexerError` exception will be thrown containing the error
 * message and `hash`, as constructed by the `constructLexErrorInfo()` API.
 *
 * Note that the lexer's `JisonLexerError` error class is passed via the
 * `ExceptionClass` argument, which is invoked to construct the exception
 * instance to be thrown, so technically `parseError` will throw the object
 * produced by the `new ExceptionClass(str, hash)` JavaScript expression.
 *
 * ---
 *
 * You can specify lexer options by setting / modifying the `.options` object of your Lexer instance.
 * These options are available:
 *
 * (Options are permanent.)
 *  
 *  yy: {
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *  }
 *
 *  lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 * WARNING: the next set of options are not meant to be changed. They echo the abilities of
 * the lexer as per when it was compiled!
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this %option has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */ var $51f63cf6b52326c0$var$lexer = function() {
    /**
   * See also:
   * http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
   * but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
   * with userland code which might access the derived class in a 'classic' way.
   *
   * @public
   * @constructor
   * @nocollapse
   */ function JisonLexerError(msg, hash) {
        Object.defineProperty(this, 'name', {
            enumerable: false,
            writable: false,
            value: 'JisonLexerError'
        });
        if (msg == null) msg = '???';
        Object.defineProperty(this, 'message', {
            enumerable: false,
            writable: true,
            value: msg
        });
        this.hash = hash;
        var stacktrace;
        if (hash && hash.exception instanceof Error) {
            var ex2 = hash.exception;
            this.message = ex2.message || msg;
            stacktrace = ex2.stack;
        }
        if (!stacktrace) {
            if (Error.hasOwnProperty('captureStackTrace')) // V8
            Error.captureStackTrace(this, this.constructor);
            else stacktrace = new Error(msg).stack;
        }
        if (stacktrace) Object.defineProperty(this, 'stack', {
            enumerable: false,
            writable: false,
            value: stacktrace
        });
    }
    if (typeof Object.setPrototypeOf === 'function') Object.setPrototypeOf(JisonLexerError.prototype, Error.prototype);
    else JisonLexerError.prototype = Object.create(Error.prototype);
    JisonLexerError.prototype.constructor = JisonLexerError;
    JisonLexerError.prototype.name = 'JisonLexerError';
    var lexer = {
        // Code Generator Information Report
        // ---------------------------------
        //
        // Options:
        //
        //   backtracking: .................... false
        //   location.ranges: ................. false
        //   location line+column tracking: ... true
        //
        //
        // Forwarded Parser Analysis flags:
        //
        //   uses yyleng: ..................... false
        //   uses yylineno: ................... false
        //   uses yytext: ..................... false
        //   uses yylloc: ..................... false
        //   uses lexer values: ............... true / true
        //   location tracking: ............... false
        //   location assignment: ............. false
        //
        //
        // Lexer Analysis flags:
        //
        //   uses yyleng: ..................... ???
        //   uses yylineno: ................... ???
        //   uses yytext: ..................... ???
        //   uses yylloc: ..................... ???
        //   uses ParseError API: ............. ???
        //   uses yyerror: .................... ???
        //   uses location tracking & editing:  ???
        //   uses more() API: ................. ???
        //   uses unput() API: ................ ???
        //   uses reject() API: ............... ???
        //   uses less() API: ................. ???
        //   uses display APIs pastInput(), upcomingInput(), showPosition():
        //        ............................. ???
        //   uses describeYYLLOC() API: ....... ???
        //
        // --------- END OF REPORT -----------
        EOF: 1,
        ERROR: 2,
        // JisonLexerError: JisonLexerError,        /// <-- injected by the code generator
        // options: {},                             /// <-- injected by the code generator
        // yy: ...,                                 /// <-- injected by setInput()
        /// INTERNAL USE ONLY: internal rule set cache for the current lexer state
        __currentRuleSet__: null,
        /// INTERNAL USE ONLY: the set of lexErrorInfo objects created since the last cleanup
        __error_infos: [],
        /// INTERNAL USE ONLY: mark whether the lexer instance has been 'unfolded' completely and is now ready for use
        __decompressed: false,
        /// INTERNAL USE ONLY
        done: false,
        /// INTERNAL USE ONLY
        _backtrack: false,
        /// INTERNAL USE ONLY
        _input: '',
        /// INTERNAL USE ONLY
        _more: false,
        /// INTERNAL USE ONLY
        _signaled_error_token: false,
        /// INTERNAL USE ONLY; managed via `pushState()`, `popState()`, `topState()` and `stateStackSize()`
        conditionStack: [],
        /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction. `match` is identical to `yytext` except that this one still contains the matched input string after `lexer.performAction()` has been invoked, where userland code MAY have changed/replaced the `yytext` value entirely!
        match: '',
        /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks entire input which has been matched so far
        matched: '',
        /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks RE match result for last (successful) match attempt
        matches: false,
        /// ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction; this value is transferred to the parser as the 'token value' when the parser consumes the lexer token produced through a call to the `lex()` API.
        yytext: '',
        /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks the 'cursor position' in the input string, i.e. the number of characters matched so far
        offset: 0,
        /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: length of matched input for the token under construction (`yytext`)
        yyleng: 0,
        /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: 'line number' at which the token under construction is located
        yylineno: 0,
        /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks location info (lines + columns) for the token under construction
        yylloc: null,
        /**
     * INTERNAL USE: construct a suitable error info hash object instance for `parseError`.
     * 
     * @public
     * @this {RegExpLexer}
     */ constructLexErrorInfo: function lexer_constructLexErrorInfo(msg, recoverable, show_input_position) {
            msg = '' + msg;
            // heuristic to determine if the error message already contains a (partial) source code dump
            // as produced by either `showPosition()` or `prettyPrintRange()`:
            if (show_input_position == undefined) show_input_position = !(msg.indexOf('\n') > 0 && msg.indexOf('^') > 0);
            if (this.yylloc && show_input_position) {
                if (typeof this.prettyPrintRange === 'function') {
                    var pretty_src = this.prettyPrintRange(this.yylloc);
                    if (!/\n\s*$/.test(msg)) msg += '\n';
                    msg += '\n  Erroneous area:\n' + this.prettyPrintRange(this.yylloc);
                } else if (typeof this.showPosition === 'function') {
                    var pos_str = this.showPosition();
                    if (pos_str) {
                        if (msg.length && msg[msg.length - 1] !== '\n' && pos_str[0] !== '\n') msg += '\n' + pos_str;
                        else msg += pos_str;
                    }
                }
            }
            /** @constructor */ var pei = {
                errStr: msg,
                recoverable: !!recoverable,
                // This one MAY be empty; userland code should use the `upcomingInput` API to obtain more text which follows the 'lexer cursor position'...
                text: this.match,
                token: null,
                line: this.yylineno,
                loc: this.yylloc,
                yy: this.yy,
                lexer: this,
                /**
         * and make sure the error info doesn't stay due to potential
         * ref cycle via userland code manipulations.
         * These would otherwise all be memory leak opportunities!
         * 
         * Note that only array and object references are nuked as those
         * constitute the set of elements which can produce a cyclic ref.
         * The rest of the members is kept intact as they are harmless.
         * 
         * @public
         * @this {LexErrorInfo}
         */ destroy: function destructLexErrorInfo() {
                    // remove cyclic references added to error info:
                    // info.yy = null;
                    // info.lexer = null;
                    // ...
                    var rec = !!this.recoverable;
                    for(var key in this)if (this.hasOwnProperty(key) && typeof key === 'object') this[key] = undefined;
                    this.recoverable = rec;
                }
            };
            // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
            this.__error_infos.push(pei);
            return pei;
        },
        /**
     * handler which is invoked when a lexer error occurs.
     * 
     * @public
     * @this {RegExpLexer}
     */ parseError: function lexer_parseError(str, hash, ExceptionClass) {
            if (!ExceptionClass) ExceptionClass = this.JisonLexerError;
            if (this.yy) {
                if (this.yy.parser && typeof this.yy.parser.parseError === 'function') return this.yy.parser.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;
                else if (typeof this.yy.parseError === 'function') return this.yy.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;
            }
            throw new ExceptionClass(str, hash);
        },
        /**
     * method which implements `yyerror(str, ...args)` functionality for use inside lexer actions.
     * 
     * @public
     * @this {RegExpLexer}
     */ yyerror: function yyError(str /*, ...args */ ) {
            var lineno_msg = '';
            if (this.yylloc) lineno_msg = ' on line ' + (this.yylineno + 1);
            var p = this.constructLexErrorInfo('Lexical error' + lineno_msg + ': ' + str, this.options.lexerErrorsAreRecoverable);
            // Add any extra args to the hash under the name `extra_error_attributes`:
            var args = Array.prototype.slice.call(arguments, 1);
            if (args.length) p.extra_error_attributes = args;
            return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
        },
        /**
     * final cleanup function for when we have completed lexing the input;
     * make it an API so that external code can use this one once userland
     * code has decided it's time to destroy any lingering lexer error
     * hash object instances and the like: this function helps to clean
     * up these constructs, which *may* carry cyclic references which would
     * otherwise prevent the instances from being properly and timely
     * garbage-collected, i.e. this function helps prevent memory leaks!
     * 
     * @public
     * @this {RegExpLexer}
     */ cleanupAfterLex: function lexer_cleanupAfterLex(do_not_nuke_errorinfos) {
            // prevent lingering circular references from causing memory leaks:
            this.setInput('', {
            });
            // nuke the error hash info instances created during this run.
            // Userland code must COPY any data/references
            // in the error hash instance(s) it is more permanently interested in.
            if (!do_not_nuke_errorinfos) {
                for(var i = this.__error_infos.length - 1; i >= 0; i--){
                    var el = this.__error_infos[i];
                    if (el && typeof el.destroy === 'function') el.destroy();
                }
                this.__error_infos.length = 0;
            }
            return this;
        },
        /**
     * clear the lexer token context; intended for internal use only
     * 
     * @public
     * @this {RegExpLexer}
     */ clear: function lexer_clear() {
            this.yytext = '';
            this.yyleng = 0;
            this.match = '';
            // - DO NOT reset `this.matched`
            this.matches = false;
            this._more = false;
            this._backtrack = false;
            var col = this.yylloc ? this.yylloc.last_column : 0;
            this.yylloc = {
                first_line: this.yylineno + 1,
                first_column: col,
                last_line: this.yylineno + 1,
                last_column: col,
                range: [
                    this.offset,
                    this.offset
                ]
            };
        },
        /**
     * resets the lexer, sets new input
     * 
     * @public
     * @this {RegExpLexer}
     */ setInput: function lexer_setInput(input, yy) {
            this.yy = yy || this.yy || {
            };
            // also check if we've fully initialized the lexer instance,
            // including expansion work to be done to go from a loaded
            // lexer to a usable lexer:
            if (!this.__decompressed) {
                // step 1: decompress the regex list:
                var rules = this.rules;
                for(var i = 0, len = rules.length; i < len; i++){
                    var rule_re = rules[i];
                    // compression: is the RE an xref to another RE slot in the rules[] table?
                    if (typeof rule_re === 'number') rules[i] = rules[rule_re];
                }
                // step 2: unfold the conditions[] set to make these ready for use:
                var conditions = this.conditions;
                for(var k in conditions){
                    var spec = conditions[k];
                    var rule_ids = spec.rules;
                    var len = rule_ids.length;
                    var rule_regexes = new Array(len + 1); // slot 0 is unused; we use a 1-based index approach here to keep the hottest code in `lexer_next()` fast and simple!
                    var rule_new_ids = new Array(len + 1);
                    for(var i = 0; i < len; i++){
                        var idx = rule_ids[i];
                        var rule_re = rules[idx];
                        rule_regexes[i + 1] = rule_re;
                        rule_new_ids[i + 1] = idx;
                    }
                    spec.rules = rule_new_ids;
                    spec.__rule_regexes = rule_regexes;
                    spec.__rule_count = len;
                }
                this.__decompressed = true;
            }
            this._input = input || '';
            this.clear();
            this._signaled_error_token = false;
            this.done = false;
            this.yylineno = 0;
            this.matched = '';
            this.conditionStack = [
                'INITIAL'
            ];
            this.__currentRuleSet__ = null;
            this.yylloc = {
                first_line: 1,
                first_column: 0,
                last_line: 1,
                last_column: 0,
                range: [
                    0,
                    0
                ]
            };
            this.offset = 0;
            return this;
        },
        /**
     * edit the remaining input via user-specified callback.
     * This can be used to forward-adjust the input-to-parse, 
     * e.g. inserting macro expansions and alike in the
     * input which has yet to be lexed.
     * The behaviour of this API contrasts the `unput()` et al
     * APIs as those act on the *consumed* input, while this
     * one allows one to manipulate the future, without impacting
     * the current `yyloc` cursor location or any history. 
     * 
     * Use this API to help implement C-preprocessor-like
     * `#include` statements, etc.
     * 
     * The provided callback must be synchronous and is
     * expected to return the edited input (string).
     *
     * The `cpsArg` argument value is passed to the callback
     * as-is.
     *
     * `callback` interface: 
     * `function callback(input, cpsArg)`
     * 
     * - `input` will carry the remaining-input-to-lex string
     *   from the lexer.
     * - `cpsArg` is `cpsArg` passed into this API.
     * 
     * The `this` reference for the callback will be set to
     * reference this lexer instance so that userland code
     * in the callback can easily and quickly access any lexer
     * API. 
     *
     * When the callback returns a non-string-type falsey value,
     * we assume the callback did not edit the input and we
     * will using the input as-is.
     *
     * When the callback returns a non-string-type value, it
     * is converted to a string for lexing via the `"" + retval`
     * operation. (See also why: http://2ality.com/2012/03/converting-to-string.html 
     * -- that way any returned object's `toValue()` and `toString()`
     * methods will be invoked in a proper/desirable order.)
     * 
     * @public
     * @this {RegExpLexer}
     */ editRemainingInput: function lexer_editRemainingInput(callback, cpsArg) {
            var rv = callback.call(this, this._input, cpsArg);
            if (typeof rv !== 'string') {
                if (rv) this._input = '' + rv;
            } else this._input = rv;
            return this;
        },
        /**
     * consumes and returns one char from the input
     * 
     * @public
     * @this {RegExpLexer}
     */ input: function lexer_input() {
            if (!this._input) //this.done = true;    -- don't set `done` as we want the lex()/next() API to be able to produce one custom EOF token match after this anyhow. (lexer can match special <<EOF>> tokens and perform user action code for a <<EOF>> match, but only does so *once*)
            return null;
            var ch = this._input[0];
            this.yytext += ch;
            this.yyleng++;
            this.offset++;
            this.match += ch;
            this.matched += ch;
            // Count the linenumber up when we hit the LF (or a stand-alone CR).
            // On CRLF, the linenumber is incremented when you fetch the CR or the CRLF combo
            // and we advance immediately past the LF as well, returning both together as if
            // it was all a single 'character' only.
            var slice_len = 1;
            var lines = false;
            if (ch === '\n') lines = true;
            else if (ch === '\r') {
                lines = true;
                var ch2 = this._input[1];
                if (ch2 === '\n') {
                    slice_len++;
                    ch += ch2;
                    this.yytext += ch2;
                    this.yyleng++;
                    this.offset++;
                    this.match += ch2;
                    this.matched += ch2;
                    this.yylloc.range[1]++;
                }
            }
            if (lines) {
                this.yylineno++;
                this.yylloc.last_line++;
                this.yylloc.last_column = 0;
            } else this.yylloc.last_column++;
            this.yylloc.range[1]++;
            this._input = this._input.slice(slice_len);
            return ch;
        },
        /**
     * unshifts one char (or an entire string) into the input
     * 
     * @public
     * @this {RegExpLexer}
     */ unput: function lexer_unput(ch) {
            var len = ch.length;
            var lines = ch.split(/(?:\r\n?|\n)/g);
            this._input = ch + this._input;
            this.yytext = this.yytext.substr(0, this.yytext.length - len);
            this.yyleng = this.yytext.length;
            this.offset -= len;
            this.match = this.match.substr(0, this.match.length - len);
            this.matched = this.matched.substr(0, this.matched.length - len);
            if (lines.length > 1) {
                this.yylineno -= lines.length - 1;
                this.yylloc.last_line = this.yylineno + 1;
                // Get last entirely matched line into the `pre_lines[]` array's
                // last index slot; we don't mind when other previously 
                // matched lines end up in the array too. 
                var pre = this.match;
                var pre_lines = pre.split(/(?:\r\n?|\n)/g);
                if (pre_lines.length === 1) {
                    pre = this.matched;
                    pre_lines = pre.split(/(?:\r\n?|\n)/g);
                }
                this.yylloc.last_column = pre_lines[pre_lines.length - 1].length;
            } else this.yylloc.last_column -= len;
            this.yylloc.range[1] = this.yylloc.range[0] + this.yyleng;
            this.done = false;
            return this;
        },
        /**
     * cache matched text and append it on next action
     * 
     * @public
     * @this {RegExpLexer}
     */ more: function lexer_more() {
            this._more = true;
            return this;
        },
        /**
     * signal the lexer that this rule fails to match the input, so the
     * next matching rule (regex) should be tested instead.
     * 
     * @public
     * @this {RegExpLexer}
     */ reject: function lexer_reject() {
            if (this.options.backtrack_lexer) this._backtrack = true;
            else {
                // when the `parseError()` call returns, we MUST ensure that the error is registered.
                // We accomplish this by signaling an 'error' token to be produced for the current
                // `.lex()` run.
                var lineno_msg = '';
                if (this.yylloc) lineno_msg = ' on line ' + (this.yylineno + 1);
                var p = this.constructLexErrorInfo('Lexical error' + lineno_msg + ': You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).', false);
                this._signaled_error_token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
            }
            return this;
        },
        /**
     * retain first n characters of the match
     * 
     * @public
     * @this {RegExpLexer}
     */ less: function lexer_less(n) {
            return this.unput(this.match.slice(n));
        },
        /**
     * return (part of the) already matched input, i.e. for error
     * messages.
     * 
     * Limit the returned string length to `maxSize` (default: 20).
     * 
     * Limit the returned string to the `maxLines` number of lines of
     * input (default: 1).
     * 
     * Negative limit values equal *unlimited*.
     * 
     * @public
     * @this {RegExpLexer}
     */ pastInput: function lexer_pastInput(maxSize, maxLines) {
            var past = this.matched.substring(0, this.matched.length - this.match.length);
            if (maxSize < 0) maxSize = past.length;
            else if (!maxSize) maxSize = 20;
            if (maxLines < 0) maxLines = past.length; // can't ever have more input lines than this!;
            else if (!maxLines) maxLines = 1;
            // `substr` anticipation: treat \r\n as a single character and take a little
            // more than necessary so that we can still properly check against maxSize
            // after we've transformed and limited the newLines in here:
            past = past.substr(-maxSize * 2 - 2);
            // now that we have a significantly reduced string to process, transform the newlines
            // and chop them, then limit them:
            var a = past.replace(/\r\n|\r/g, '\n').split('\n');
            a = a.slice(-maxLines);
            past = a.join('\n');
            // When, after limiting to maxLines, we still have too much to return,
            // do add an ellipsis prefix...
            if (past.length > maxSize) past = '...' + past.substr(-maxSize);
            return past;
        },
        /**
     * return (part of the) upcoming input, i.e. for error messages.
     * 
     * Limit the returned string length to `maxSize` (default: 20).
     * 
     * Limit the returned string to the `maxLines` number of lines of input (default: 1).
     * 
     * Negative limit values equal *unlimited*.
     *
     * > ### NOTE ###
     * >
     * > *"upcoming input"* is defined as the whole of the both
     * > the *currently lexed* input, together with any remaining input
     * > following that. *"currently lexed"* input is the input 
     * > already recognized by the lexer but not yet returned with
     * > the lexer token. This happens when you are invoking this API
     * > from inside any lexer rule action code block. 
     * >
     * 
     * @public
     * @this {RegExpLexer}
     */ upcomingInput: function lexer_upcomingInput(maxSize, maxLines) {
            var next = this.match;
            if (maxSize < 0) maxSize = next.length + this._input.length;
            else if (!maxSize) maxSize = 20;
            if (maxLines < 0) maxLines = maxSize; // can't ever have more input lines than this!;
            else if (!maxLines) maxLines = 1;
            // `substring` anticipation: treat \r\n as a single character and take a little
            // more than necessary so that we can still properly check against maxSize
            // after we've transformed and limited the newLines in here:
            if (next.length < maxSize * 2 + 2) next += this._input.substring(0, maxSize * 2 + 2); // substring is faster on Chrome/V8
            // now that we have a significantly reduced string to process, transform the newlines
            // and chop them, then limit them:
            var a = next.replace(/\r\n|\r/g, '\n').split('\n');
            a = a.slice(0, maxLines);
            next = a.join('\n');
            // When, after limiting to maxLines, we still have too much to return,
            // do add an ellipsis postfix...
            if (next.length > maxSize) next = next.substring(0, maxSize) + '...';
            return next;
        },
        /**
     * return a string which displays the character position where the
     * lexing error occurred, i.e. for error messages
     * 
     * @public
     * @this {RegExpLexer}
     */ showPosition: function lexer_showPosition(maxPrefix, maxPostfix) {
            var pre = this.pastInput(maxPrefix).replace(/\s/g, ' ');
            var c = new Array(pre.length + 1).join('-');
            return pre + this.upcomingInput(maxPostfix).replace(/\s/g, ' ') + '\n' + c + '^';
        },
        /**
     * return an YYLLOC info object derived off the given context (actual, preceding, following, current).
     * Use this method when the given `actual` location is not guaranteed to exist (i.e. when
     * it MAY be NULL) and you MUST have a valid location info object anyway:
     * then we take the given context of the `preceding` and `following` locations, IFF those are available,
     * and reconstruct the `actual` location info from those.
     * If this fails, the heuristic is to take the `current` location, IFF available.
     * If this fails as well, we assume the sought location is at/around the current lexer position
     * and then produce that one as a response. DO NOTE that these heuristic/derived location info
     * values MAY be inaccurate!
     *
     * NOTE: `deriveLocationInfo()` ALWAYS produces a location info object *copy* of `actual`, not just
     * a *reference* hence all input location objects can be assumed to be 'constant' (function has no side-effects).
     * 
     * @public
     * @this {RegExpLexer}
     */ deriveLocationInfo: function lexer_deriveYYLLOC(actual, preceding, following, current) {
            var loc = {
                first_line: 1,
                first_column: 0,
                last_line: 1,
                last_column: 0,
                range: [
                    0,
                    0
                ]
            };
            if (actual) {
                loc.first_line = actual.first_line | 0;
                loc.last_line = actual.last_line | 0;
                loc.first_column = actual.first_column | 0;
                loc.last_column = actual.last_column | 0;
                if (actual.range) {
                    loc.range[0] = actual.range[0] | 0;
                    loc.range[1] = actual.range[1] | 0;
                }
            }
            if (loc.first_line <= 0 || loc.last_line < loc.first_line) {
                // plan B: heuristic using preceding and following:
                if (loc.first_line <= 0 && preceding) {
                    loc.first_line = preceding.last_line | 0;
                    loc.first_column = preceding.last_column | 0;
                    if (preceding.range) loc.range[0] = actual.range[1] | 0;
                }
                if ((loc.last_line <= 0 || loc.last_line < loc.first_line) && following) {
                    loc.last_line = following.first_line | 0;
                    loc.last_column = following.first_column | 0;
                    if (following.range) loc.range[1] = actual.range[0] | 0;
                }
                // plan C?: see if the 'current' location is useful/sane too:
                if (loc.first_line <= 0 && current && (loc.last_line <= 0 || current.last_line <= loc.last_line)) {
                    loc.first_line = current.first_line | 0;
                    loc.first_column = current.first_column | 0;
                    if (current.range) loc.range[0] = current.range[0] | 0;
                }
                if (loc.last_line <= 0 && current && (loc.first_line <= 0 || current.first_line >= loc.first_line)) {
                    loc.last_line = current.last_line | 0;
                    loc.last_column = current.last_column | 0;
                    if (current.range) loc.range[1] = current.range[1] | 0;
                }
            }
            // sanitize: fix last_line BEFORE we fix first_line as we use the 'raw' value of the latter
            // or plan D heuristics to produce a 'sensible' last_line value:
            if (loc.last_line <= 0) {
                if (loc.first_line <= 0) {
                    loc.first_line = this.yylloc.first_line;
                    loc.last_line = this.yylloc.last_line;
                    loc.first_column = this.yylloc.first_column;
                    loc.last_column = this.yylloc.last_column;
                    loc.range[0] = this.yylloc.range[0];
                    loc.range[1] = this.yylloc.range[1];
                } else {
                    loc.last_line = this.yylloc.last_line;
                    loc.last_column = this.yylloc.last_column;
                    loc.range[1] = this.yylloc.range[1];
                }
            }
            if (loc.first_line <= 0) {
                loc.first_line = loc.last_line;
                loc.first_column = 0; // loc.last_column;
                loc.range[1] = loc.range[0];
            }
            if (loc.first_column < 0) loc.first_column = 0;
            if (loc.last_column < 0) loc.last_column = loc.first_column > 0 ? loc.first_column : 80;
            return loc;
        },
        /**
     * return a string which displays the lines & columns of input which are referenced 
     * by the given location info range, plus a few lines of context.
     * 
     * This function pretty-prints the indicated section of the input, with line numbers 
     * and everything!
     * 
     * This function is very useful to provide highly readable error reports, while
     * the location range may be specified in various flexible ways:
     * 
     * - `loc` is the location info object which references the area which should be
     *   displayed and 'marked up': these lines & columns of text are marked up by `^`
     *   characters below each character in the entire input range.
     * 
     * - `context_loc` is the *optional* location info object which instructs this
     *   pretty-printer how much *leading* context should be displayed alongside
     *   the area referenced by `loc`. This can help provide context for the displayed
     *   error, etc.
     * 
     *   When this location info is not provided, a default context of 3 lines is
     *   used.
     * 
     * - `context_loc2` is another *optional* location info object, which serves
     *   a similar purpose to `context_loc`: it specifies the amount of *trailing*
     *   context lines to display in the pretty-print output.
     * 
     *   When this location info is not provided, a default context of 1 line only is
     *   used.
     * 
     * Special Notes:
     * 
     * - when the `loc`-indicated range is very large (about 5 lines or more), then
     *   only the first and last few lines of this block are printed while a
     *   `...continued...` message will be printed between them.
     * 
     *   This serves the purpose of not printing a huge amount of text when the `loc`
     *   range happens to be huge: this way a manageable & readable output results
     *   for arbitrary large ranges.
     * 
     * - this function can display lines of input which whave not yet been lexed.
     *   `prettyPrintRange()` can access the entire input!
     * 
     * @public
     * @this {RegExpLexer}
     */ prettyPrintRange: function lexer_prettyPrintRange(loc, context_loc, context_loc2) {
            loc = this.deriveLocationInfo(loc, context_loc, context_loc2);
            const CONTEXT = 3;
            const CONTEXT_TAIL = 1;
            const MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT = 2;
            var input = this.matched + this._input;
            var lines = input.split('\n');
            var l0 = Math.max(1, context_loc ? context_loc.first_line : loc.first_line - CONTEXT);
            var l1 = Math.max(1, context_loc2 ? context_loc2.last_line : loc.last_line + CONTEXT_TAIL);
            var lineno_display_width = 1 + Math.log10(l1 | 1) | 0;
            var ws_prefix = new Array(lineno_display_width).join(' ');
            var nonempty_line_indexes = [
                [],
                [],
                []
            ];
            var rv1 = lines.slice(l0 - 1, l1 + 1).map(function injectLineNumber(line, index) {
                var lno = index + l0;
                var lno_pfx = (ws_prefix + lno).substr(-lineno_display_width);
                var rv = lno_pfx + ': ' + line;
                var errpfx = new Array(lineno_display_width + 1).join('^');
                var offset = 3;
                var len = 0;
                if (lno === loc.first_line) {
                    offset += loc.first_column;
                    len = Math.max(2, (lno === loc.last_line ? loc.last_column : line.length) - loc.first_column + 1);
                } else if (lno === loc.last_line) len = Math.max(2, loc.last_column + 1);
                else if (lno > loc.first_line && lno < loc.last_line) len = Math.max(2, line.length + 1);
                var nli;
                if (len) {
                    var lead = new Array(offset).join('.');
                    var mark = new Array(len).join('^');
                    rv += '\n' + errpfx + lead + mark;
                    nli = 1;
                } else if (lno < loc.first_line) nli = 0;
                else if (lno > loc.last_line) nli = 2;
                if (line.trim().length > 0) nonempty_line_indexes[nli].push(index);
                rv = rv.replace(/\t/g, ' ');
                return rv;
            });
            // now make sure we don't print an overly large amount of lead/error/tail area: limit it 
            // to the top and bottom line count:
            for(var i = 0; i <= 2; i++){
                var line_arr = nonempty_line_indexes[i];
                if (line_arr.length > 2 * MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT) {
                    var clip_start = line_arr[MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT - 1] + 1;
                    var clip_end = line_arr[line_arr.length - MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT] - 1;
                    var intermediate_line = new Array(lineno_display_width + 1).join(' ') + '  (...continued...)';
                    if (i === 1) intermediate_line += '\n' + new Array(lineno_display_width + 1).join('-') + '  (---------------)';
                    rv1.splice(clip_start, clip_end - clip_start + 1, intermediate_line);
                }
            }
            return rv1.join('\n');
        },
        /**
     * helper function, used to produce a human readable description as a string, given
     * the input `yylloc` location object.
     * 
     * Set `display_range_too` to TRUE to include the string character index position(s)
     * in the description if the `yylloc.range` is available.
     * 
     * @public
     * @this {RegExpLexer}
     */ describeYYLLOC: function lexer_describe_yylloc(yylloc, display_range_too) {
            var l1 = yylloc.first_line;
            var l2 = yylloc.last_line;
            var c1 = yylloc.first_column;
            var c2 = yylloc.last_column;
            var dl = l2 - l1;
            var dc = c2 - c1;
            var rv;
            if (dl === 0) {
                rv = 'line ' + l1 + ', ';
                if (dc <= 1) rv += 'column ' + c1;
                else rv += 'columns ' + c1 + ' .. ' + c2;
            } else rv = 'lines ' + l1 + '(column ' + c1 + ') .. ' + l2 + '(column ' + c2 + ')';
            if (yylloc.range && display_range_too) {
                var r1 = yylloc.range[0];
                var r2 = yylloc.range[1] - 1;
                if (r2 <= r1) rv += ' {String Offset: ' + r1 + '}';
                else rv += ' {String Offset range: ' + r1 + ' .. ' + r2 + '}';
            }
            return rv;
        },
        /**
     * test the lexed token: return FALSE when not a match, otherwise return token.
     * 
     * `match` is supposed to be an array coming out of a regex match, i.e. `match[0]`
     * contains the actually matched text string.
     * 
     * Also move the input cursor forward and update the match collectors:
     * 
     * - `yytext`
     * - `yyleng`
     * - `match`
     * - `matches`
     * - `yylloc`
     * - `offset`
     * 
     * @public
     * @this {RegExpLexer}
     */ test_match: function lexer_test_match(match, indexed_rule) {
            var token, lines, backup, match_str, match_str_len;
            if (this.options.backtrack_lexer) // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylloc.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column,
                    range: this.yylloc.range.slice(0)
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                //_signaled_error_token: this._signaled_error_token,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            match_str = match[0];
            match_str_len = match_str.length;
            // if (match_str.indexOf('\n') !== -1 || match_str.indexOf('\r') !== -1) {
            lines = match_str.split(/(?:\r\n?|\n)/g);
            if (lines.length > 1) {
                this.yylineno += lines.length - 1;
                this.yylloc.last_line = this.yylineno + 1;
                this.yylloc.last_column = lines[lines.length - 1].length;
            } else this.yylloc.last_column += match_str_len;
            // }
            this.yytext += match_str;
            this.match += match_str;
            this.matched += match_str;
            this.matches = match;
            this.yyleng = this.yytext.length;
            this.yylloc.range[1] += match_str_len;
            // previous lex rules MAY have invoked the `more()` API rather than producing a token:
            // those rules will already have moved this `offset` forward matching their match lengths,
            // hence we must only add our own match length now:
            this.offset += match_str_len;
            this._more = false;
            this._backtrack = false;
            this._input = this._input.slice(match_str_len);
            // calling this method:
            //
            //   function lexer__performAction(yy, yyrulenumber, YY_START) {...}
            token = this.performAction.call(this, this.yy, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
            // otherwise, when the action codes are all simple return token statements:
            //token = this.simpleCaseActionClusters[indexed_rule];
            if (this.done && this._input) this.done = false;
            if (token) return token;
            else if (this._backtrack) {
                // recover context
                for(var k in backup)this[k] = backup[k];
                this.__currentRuleSet__ = null;
                return false; // rule action called reject() implying the next rule should be tested instead.
            } else if (this._signaled_error_token) {
                // produce one 'error' token as `.parseError()` in `reject()`
                // did not guarantee a failure signal by throwing an exception!
                token = this._signaled_error_token;
                this._signaled_error_token = false;
                return token;
            }
            return false;
        },
        /**
     * return next match in input
     * 
     * @public
     * @this {RegExpLexer}
     */ next: function lexer_next() {
            if (this.done) {
                this.clear();
                return this.EOF;
            }
            if (!this._input) this.done = true;
            var token, match, tempMatch, index;
            if (!this._more) this.clear();
            var spec = this.__currentRuleSet__;
            if (!spec) {
                // Update the ruleset cache as we apparently encountered a state change or just started lexing.
                // The cache is set up for fast lookup -- we assume a lexer will switch states much less often than it will
                // invoke the `lex()` token-producing API and related APIs, hence caching the set for direct access helps
                // speed up those activities a tiny bit.
                spec = this.__currentRuleSet__ = this._currentRules();
                // Check whether a *sane* condition has been pushed before: this makes the lexer robust against
                // user-programmer bugs such as https://github.com/zaach/jison-lex/issues/19
                if (!spec || !spec.rules) {
                    var lineno_msg = '';
                    if (this.options.trackPosition) lineno_msg = ' on line ' + (this.yylineno + 1);
                    var p = this.constructLexErrorInfo('Internal lexer engine error' + lineno_msg + ': The lex grammar programmer pushed a non-existing condition name "' + this.topState() + '"; this is a fatal error and should be reported to the application programmer team!', false);
                    // produce one 'error' token until this situation has been resolved, most probably by parse termination!
                    return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
                }
            }
            var rule_ids = spec.rules;
            var regexes = spec.__rule_regexes;
            var len = spec.__rule_count;
            // Note: the arrays are 1-based, while `len` itself is a valid index,
            // hence the non-standard less-or-equal check in the next loop condition!
            for(var i = 1; i <= len; i++){
                tempMatch = this._input.match(regexes[i]);
                if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                    match = tempMatch;
                    index = i;
                    if (this.options.backtrack_lexer) {
                        token = this.test_match(tempMatch, rule_ids[i]);
                        if (token !== false) return token;
                        else if (this._backtrack) {
                            match = undefined;
                            continue; // rule action called reject() implying a rule MISmatch.
                        } else // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    } else if (!this.options.flex) break;
                }
            }
            if (match) {
                token = this.test_match(match, rule_ids[index]);
                if (token !== false) return token;
                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                return false;
            }
            if (!this._input) {
                this.done = true;
                this.clear();
                return this.EOF;
            } else {
                var lineno_msg = '';
                if (this.options.trackPosition) lineno_msg = ' on line ' + (this.yylineno + 1);
                var p = this.constructLexErrorInfo('Lexical error' + lineno_msg + ': Unrecognized text.', this.options.lexerErrorsAreRecoverable);
                var pendingInput = this._input;
                var activeCondition = this.topState();
                var conditionStackDepth = this.conditionStack.length;
                token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
                if (token === this.ERROR) // we can try to recover from a lexer error that `parseError()` did not 'recover' for us
                // by moving forward at least one character at a time IFF the (user-specified?) `parseError()`
                // has not consumed/modified any pending input or changed state in the error handler:
                {
                    if (!this.matches && pendingInput === this._input && // to merit a non-consuming error handling action right now.
                    activeCondition === this.topState() && conditionStackDepth === this.conditionStack.length) this.input();
                }
                return token;
            }
        },
        /**
     * return next match that has a token
     * 
     * @public
     * @this {RegExpLexer}
     */ lex: function lexer_lex() {
            var r;
            // allow the PRE/POST handlers set/modify the return token for maximum flexibility of the generated lexer:
            if (typeof this.pre_lex === 'function') r = this.pre_lex.call(this, 0);
            if (typeof this.options.pre_lex === 'function') // (also account for a userdef function which does not return any value: keep the token as is)
            r = this.options.pre_lex.call(this, r) || r;
            if (this.yy && typeof this.yy.pre_lex === 'function') // (also account for a userdef function which does not return any value: keep the token as is)
            r = this.yy.pre_lex.call(this, r) || r;
            while(!r)r = this.next();
            if (this.yy && typeof this.yy.post_lex === 'function') // (also account for a userdef function which does not return any value: keep the token as is)
            r = this.yy.post_lex.call(this, r) || r;
            if (typeof this.options.post_lex === 'function') // (also account for a userdef function which does not return any value: keep the token as is)
            r = this.options.post_lex.call(this, r) || r;
            if (typeof this.post_lex === 'function') // (also account for a userdef function which does not return any value: keep the token as is)
            r = this.post_lex.call(this, r) || r;
            return r;
        },
        /**
     * return next match that has a token. Identical to the `lex()` API but does not invoke any of the 
     * `pre_lex()` nor any of the `post_lex()` callbacks.
     * 
     * @public
     * @this {RegExpLexer}
     */ fastLex: function lexer_fastLex() {
            var r;
            while(!r)r = this.next();
            return r;
        },
        /**
     * return info about the lexer state that can help a parser or other lexer API user to use the
     * most efficient means available. This API is provided to aid run-time performance for larger
     * systems which employ this lexer.
     * 
     * @public
     * @this {RegExpLexer}
     */ canIUse: function lexer_canIUse() {
            var rv = {
                fastLex: !(typeof this.pre_lex === 'function' || typeof this.options.pre_lex === 'function' || this.yy && typeof this.yy.pre_lex === 'function' || this.yy && typeof this.yy.post_lex === 'function' || typeof this.options.post_lex === 'function' || typeof this.post_lex === 'function') && typeof this.fastLex === 'function'
            };
            return rv;
        },
        /**
     * backwards compatible alias for `pushState()`;
     * the latter is symmetrical with `popState()` and we advise to use
     * those APIs in any modern lexer code, rather than `begin()`.
     * 
     * @public
     * @this {RegExpLexer}
     */ begin: function lexer_begin(condition) {
            return this.pushState(condition);
        },
        /**
     * activates a new lexer condition state (pushes the new lexer
     * condition state onto the condition stack)
     * 
     * @public
     * @this {RegExpLexer}
     */ pushState: function lexer_pushState(condition) {
            this.conditionStack.push(condition);
            this.__currentRuleSet__ = null;
            return this;
        },
        /**
     * pop the previously active lexer condition state off the condition
     * stack
     * 
     * @public
     * @this {RegExpLexer}
     */ popState: function lexer_popState() {
            var n = this.conditionStack.length - 1;
            if (n > 0) {
                this.__currentRuleSet__ = null;
                return this.conditionStack.pop();
            } else return this.conditionStack[0];
        },
        /**
     * return the currently active lexer condition state; when an index
     * argument is provided it produces the N-th previous condition state,
     * if available
     * 
     * @public
     * @this {RegExpLexer}
     */ topState: function lexer_topState(n) {
            n = this.conditionStack.length - 1 - Math.abs(n || 0);
            if (n >= 0) return this.conditionStack[n];
            else return 'INITIAL';
        },
        /**
     * (internal) determine the lexer rule set which is active for the
     * currently active lexer condition state
     * 
     * @public
     * @this {RegExpLexer}
     */ _currentRules: function lexer__currentRules() {
            if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) return this.conditions[this.conditionStack[this.conditionStack.length - 1]];
            else return this.conditions['INITIAL'];
        },
        /**
     * return the number of states currently on the stack
     * 
     * @public
     * @this {RegExpLexer}
     */ stateStackSize: function lexer_stateStackSize() {
            return this.conditionStack.length;
        },
        options: {
            trackPosition: true,
            caseInsensitive: true
        },
        JisonLexerError: JisonLexerError,
        performAction: function lexer__performAction(yy, yyrulenumber, YY_START) {
            var yy_ = this;
            var YYSTATE = YY_START;
            switch(yyrulenumber){
                case 1:
                    /*! Conditions:: INITIAL */ /*! Rule::       \\{interp} */ $51f63cf6b52326c0$var$debug('matches', this.matches);
                    yy_.yytext = yy_.yytext.substring(2, yy_.yytext.length - 1);
                    return 'INTERPOLATION_WRONG';
                case 2:
                    /*! Conditions:: INITIAL */ /*! Rule::       {interp} */ $51f63cf6b52326c0$var$debug('matches', this.matches);
                    yy_.yytext = yy_.yytext.substring(2, yy_.yytext.length - 1);
                    return 9;
                case 3:
                    /*! Conditions:: INITIAL */ /*! Rule::       {interp_start}\w+ */ this.pushState('INTERP_START');
                    break;
                case 4:
                    /*! Conditions:: INTERP_START */ /*! Rule::       . */ if (yy_.yytext == '{') $51f63cf6b52326c0$var$interpStack.push('}');
                    else if (yy_.yytext == '}') {
                        if ($51f63cf6b52326c0$var$interpStack.length == 0) ;
                        else if ($51f63cf6b52326c0$var$interpStack.pop() == yy_.yytext) return 9;
                        else throw new Error('Mismatching curly braces');
                    }
                    break;
                case 9:
                    /*! Conditions:: INITIAL */ /*! Rule::       (?:#\[\s*){tag_name} */ '])';
                    $51f63cf6b52326c0$var$debug('(?:\'#[\'s*){tag_name}');
                    yy_.yytext = this.matches[1];
                    this.pushState('TAG_STARTED');
                    return 4;
                case 10:
                    /*! Conditions:: INITIAL */ /*! Rule::       (?:#\[\s*):{filter_name} */ '])';
                    yy_.yytext = this.matches[1];
                    this.pushState('TAG_STARTED');
                    return 6;
                case 12:
                    /*! Conditions:: TAG_STARTED */ /*! Rule::       \. */ this.pushState('CLASSNAME_STARTED');
                    return 10;
                case 13:
                    /*! Conditions:: TAG_STARTED */ /*! Rule::       = */ this.popState();
                    this.pushState('ASSIGNMENT_STARTED');
                    return 7;
                case 15:
                    /*! Conditions:: ASSIGNMENT_STARTED */ /*! Rule::       \[ */ ']';
                    this.pushState('ASSIGNMENT_STARTED_BRACKET_ADDED');
                    return 13;
                case 16:
                    /*! Conditions:: ASSIGNMENT_STARTED_BRACKET_ADDED */ /*! Rule::       \] */ this.popState();
                    return 13;
                case 18:
                    /*! Conditions:: ASSIGNMENT_STARTED */ /*! Rule::       \] */ this.popState();
                    return 5;
                case 19:
                    /*! Conditions:: TAG_STARTED BODY_STARTED */ /*! Rule::       \[ */ '])';
                    this.pushState('BRACKET_ADDED');
                    return 12;
                case 20:
                    /*! Conditions:: TAG_STARTED BODY_STARTED */ /*! Rule::       \[ */ '])';
                    this.pushState('BRACKET_ADDED');
                    return 'LBRACKET';
                case 21:
                    /*! Conditions:: BRACKET_ADDED */ /*! Rule::       \] */ this.popState();
                    return 'RBRACKET';
                case 22:
                    /*! Conditions:: ATTRS_STARTED */ /*! Rule::       \( */ '])';
                    this.pushState('PARENS_ADDED');
                    return 'LPAREN';
                case 23:
                    /*! Conditions:: PARENS_ADDED */ /*! Rule::       \) */ this.popState();
                    return 'RPAREN';
                case 25:
                    /*! Conditions:: TAG_STARTED */ /*! Rule::       \( */ ')';
                    this.popState();
                    this.pushState('ATTRS_STARTED');
                    break;
                case 26:
                    /*! Conditions:: TAG_STARTED */ /*! Rule::       {space} */ this.popState();
                    this.pushState('BODY_STARTED');
                    break;
                case 27:
                    /*! Conditions:: ATTRS_STARTED */ /*! Rule::       \w+ */ $51f63cf6b52326c0$var$debug('<ATTRS_STARTED>\\w+');
                    $51f63cf6b52326c0$var$debug('yy_.yytext', yy_.yytext);
                    return 12;
                case 30:
                    /*! Conditions:: ATTRS_STARTED */ /*! Rule::       \) ? */ this.popState();
                    this.pushState('BODY_STARTED');
                    break;
                case 33:
                    /*! Conditions:: BODY_STARTED */ /*! Rule::       \] */ this.popState();
                    return 5;
                case 35:
                    /*! Conditions:: CLASSNAME_STARTED */ /*! Rule::       {classname} */ this.popState();
                    return 14;
                default:
                    return this.simpleCaseActionClusters[yyrulenumber];
            }
        },
        simpleCaseActionClusters: {
            /*! Conditions:: INITIAL */ /*! Rule::       \\#\{ */ 0: 'BACKSLASH',
            /*! Conditions:: INITIAL */ /*! Rule::       .+\\#\{.+\} */ 5: 8,
            /*! Conditions:: INITIAL */ /*! Rule::       #\{.+\} */ 6: 9,
            /*! Conditions:: INITIAL */ /*! Rule::       .*\\# */ 7: 8,
            /*! Conditions:: INITIAL */ /*! Rule::       {interp} */ 8: 9,
            /*! Conditions:: INITIAL */ /*! Rule::       (\w|{space}|[^#])+ */ 11: 8,
            /*! Conditions:: ASSIGNMENT_STARTED */ /*! Rule::       [ '] */ 14: 13,
            /*! Conditions:: ASSIGNMENT_STARTED ASSIGNMENT_STARTED_BRACKET_ADDED */ /*! Rule::       \w+ */ 17: 13,
            /*! Conditions:: TAG_STARTED */ /*! Rule::       \] */ 24: 5,
            /*! Conditions:: ATTRS_STARTED */ /*! Rule::       {space}+ */ 28: 12,
            /*! Conditions:: ATTRS_STARTED */ /*! Rule::       [^()\]]+ */ 29: 12,
            /*! Conditions:: BODY_STARTED ATTRS_STARTED */ /*! Rule::       \w+ */ 31: 11,
            /*! Conditions:: BODY_STARTED ATTRS_STARTED */ /*! Rule::       {space}+ */ 32: 11,
            /*! Conditions:: BODY_STARTED */ /*! Rule::       .+ */ 34: 11,
            /*! Conditions:: INITIAL */ /*! Rule::       # */ 36: 8,
            /*! Conditions:: INITIAL */ /*! Rule::       $ */ 37: 1
        },
        rules: [
            /*  0: */ /^(?:\\#\{)/i,
            /*  1: */ /^(?:\\(#\{(.+)\}))/i,
            /*  2: */ /^(?:(#\{(.+)\}))/i,
            /*  3: */ /^(?:(#\{)\w+)/i,
            /*  4: */ /^(?:.)/i,
            /*  5: */ /^(?:.+\\#\{.+\})/i,
            /*  6: */ /^(?:#\{.+\})/i,
            /*  7: */ /^(?:.*\\#)/i,
            /*  8: */ /^(?:(#\{(.+)\}))/i,
            /*  9: */ /^(?:(?:#\[\s*)((a|abbr|acronym|address|applet|area|article|aside|audio|b|base|basefont|bdi|bdo|bgsound|big|blink|blockquote|body|br|button|canvas|caption|center|cite|code|col|colgroup|content|data|datalist|dd|del|details|dfn|dialog|dir|div|dl|dt|em|embed|fieldset|figcaption|figure|font|foo|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hgroup|hr|html|i|iframe|image|img|input|ins|kbd|keygen|label|legend|li|link|main|map|mark|marquee|math|menu|menuitem|meta|meter|nav|nobr|noembed|noframes|noscript|object|ol|optgroup|option|output|p|param|picture|plaintext|portal|pre|progress|q|rb|rp|rt|rtc|ruby|s|samp|section|select|shadow|slot|small|source|spacer|span|strike|strong|sub|summary|sup|svg|table|tbody|td|template|textarea|tfoot|th|thead|time|title|tr|track|tt|u|ul|var|video|wbr|xmp)\b))/i,
            /* 10: */ /^(?:(?:#\[\s*):((cdata)\b))/i,
            /* 11: */ /^(?:(\w|([   -​\u2028\u2029　])|[^#])+)/i,
            /* 12: */ /^(?:\.)/i,
            /* 13: */ /^(?:=)/i,
            /* 14: */ /^(?:[ '])/i,
            /* 15: */ /^(?:\[)/i,
            /* 16: */ /^(?:\])/i,
            /* 17: */ /^(?:\w+)/i,
            /* 18: */ /^(?:\])/i,
            /* 19: */ /^(?:\[)/i,
            /* 20: */ /^(?:\[)/i,
            /* 21: */ /^(?:\])/i,
            /* 22: */ /^(?:\()/i,
            /* 23: */ /^(?:\))/i,
            /* 24: */ /^(?:\])/i,
            /* 25: */ /^(?:\()/i,
            /* 26: */ /^(?:([   -​\u2028\u2029　]))/i,
            /* 27: */ /^(?:\w+)/i,
            /* 28: */ /^(?:([   -​\u2028\u2029　])+)/i,
            /* 29: */ /^(?:[^()\]]+)/i,
            /* 30: */ /^(?:\) ?)/i,
            /* 31: */ /^(?:\w+)/i,
            /* 32: */ /^(?:([   -​\u2028\u2029　])+)/i,
            /* 33: */ /^(?:\])/i,
            /* 34: */ /^(?:.+)/i,
            /* 35: */ /^(?:([^\W\d]+[\w\-]*))/i,
            /* 36: */ /^(?:#)/i,
            /* 37: */ /^(?:$)/i
        ],
        conditions: {
            'AFTER_TAG_START': {
                rules: [],
                inclusive: false
            },
            'AFTER_TAG_START_END': {
                rules: [],
                inclusive: false
            },
            'ASSIGNMENT_STARTED': {
                rules: [
                    14,
                    15,
                    17,
                    18
                ],
                inclusive: false
            },
            'INITIAL': {
                rules: [
                    0,
                    1,
                    2,
                    3,
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    36,
                    37
                ],
                inclusive: true
            },
            'INTERP_START': {
                rules: [
                    4
                ],
                inclusive: false
            },
            'TAG_STARTED': {
                rules: [
                    12,
                    13,
                    19,
                    20,
                    24,
                    25,
                    26
                ],
                inclusive: false
            },
            'ASSIGNMENT_STARTED_BRACKET_ADDED': {
                rules: [
                    16,
                    17
                ],
                inclusive: false
            },
            'BODY_STARTED': {
                rules: [
                    19,
                    20,
                    31,
                    32,
                    33,
                    34
                ],
                inclusive: false
            },
            'BRACKET_ADDED': {
                rules: [
                    21
                ],
                inclusive: false
            },
            'ATTRS_STARTED': {
                rules: [
                    22,
                    27,
                    28,
                    29,
                    30,
                    31,
                    32
                ],
                inclusive: false
            },
            'PARENS_ADDED': {
                rules: [
                    23
                ],
                inclusive: false
            },
            'CLASSNAME_STARTED': {
                rules: [
                    35
                ],
                inclusive: false
            }
        }
    };
    return lexer;
}();
$51f63cf6b52326c0$var$parser.lexer = $51f63cf6b52326c0$var$lexer;
const $51f63cf6b52326c0$var$TEXT_TAGS_ALLOW_SUB_TAGS = true;
const $51f63cf6b52326c0$var$debug = $c1Lgv$debug('line-lexer:inline');
let $51f63cf6b52326c0$var$tagAlreadyFound = false;
let $51f63cf6b52326c0$var$obj;
var $51f63cf6b52326c0$var$lparenOpen = false;
const $51f63cf6b52326c0$var$keysToMergeText = [
    'therest'
];
const $51f63cf6b52326c0$var$tags = [];
const $51f63cf6b52326c0$var$interpStack = [];
const $51f63cf6b52326c0$var$adam = "div";
var $51f63cf6b52326c0$var$recursive = 1;
function $51f63cf6b52326c0$var$rank(type1, type2) {
    if (type2 === 'text') return type1;
    else if (type1 === type2) return type1;
    else if (type1 == 'tag' && type2 == 'tag_with_multiline_attrs') return type2;
    else if (type1 == 'tag_with_multiline_attrs' && type2 == 'tag') return type1;
    else return type1.concat(type2);
}
function $51f63cf6b52326c0$var$merge(obj, src) {
    $51f63cf6b52326c0$var$debug('merging', obj, src);
    if (Array.isArray(src) && src.length > 0) src = src.reduce($51f63cf6b52326c0$var$merge);
    if ($c1Lgv$util.isDeepStrictEqual(src, [
        {
            therest: ''
        }
    ])) return obj;
    const ret = $c1Lgv$lodash.mergeWith(obj, src, function(objValue, srcValue, key, object, source, stack) {
        $51f63cf6b52326c0$var$debug('merging', 'inside _mergeWith', key, objValue, srcValue);
        if (objValue == undefined && srcValue == undefined) return {
        };
        if (objValue == undefined) return srcValue;
        if (srcValue == undefined) return objValue;
        if (objValue != undefined && srcValue != undefined) {
            if ($51f63cf6b52326c0$var$keysToMergeText.includes(key)) return objValue + srcValue;
            else return $51f63cf6b52326c0$var$rank(objValue, srcValue);
        }
    });
    $51f63cf6b52326c0$var$debug('merging', ' returning', ret);
    return ret;
//  return Object.assign(obj, src);
}
$51f63cf6b52326c0$var$parser.main = function() {
    $51f63cf6b52326c0$var$tagAlreadyFound = false;
    $51f63cf6b52326c0$var$lparenOpen = false;
    function test(input, expected, strict = true) {
        $51f63cf6b52326c0$var$tagAlreadyFound = false;
        $51f63cf6b52326c0$var$lparenOpen = false;
        $51f63cf6b52326c0$var$debug(`\nTesting '${input}'...`);
        var actual = $51f63cf6b52326c0$var$parser.parse(input);
        $51f63cf6b52326c0$var$debug(input + ' ==> ', $c1Lgv$util.inspect(actual, false, 8));
        let compareFunc;
        if (strict) compareFunc = $c1Lgv$assert.deepEqual;
        else compareFunc = dyp;
        // fs.writeFileSync('actual.json', JSON.stringify(actual))
        // fs.writeFileSync('expected.json', JSON.stringify(expected))
        compareFunc.call({
        }, actual, expected);
    }
    // TODO:
    test("#[a.rho(href='#', class='rho--modifier') with inline link]", [
        {
            type: 'tag',
            name: 'a',
            classes: [
                'rho'
            ],
            attrs: [
                {
                    name: 'href',
                    val: "'#'"
                },
                {
                    name: 'class',
                    val: "'rho--modifier'"
                }
            ],
            val: 'with inline link'
        }
    ]);
    test("Some text #[a.rho(href='#', class='rho--modifier')]", [
        {
            type: 'text',
            val: 'Some text '
        },
        {
            type: 'tag',
            name: 'a',
            classes: [
                'rho'
            ],
            attrs: [
                {
                    name: 'href',
                    val: "'#'"
                },
                {
                    name: 'class',
                    val: "'rho--modifier'"
                }
            ],
            val: ''
        }
    ]);
    test("Some text #[a.rho(href='#', class='rho--modifier') with inline link]", [
        {
            type: 'text',
            val: 'Some text '
        },
        {
            type: 'tag',
            name: 'a',
            classes: [
                'rho'
            ],
            attrs: [
                {
                    name: 'href',
                    val: "'#'"
                },
                {
                    name: 'class',
                    val: "'rho--modifier'"
                }
            ],
            val: 'with inline link'
        }
    ]);
    test('Written with love by #{author}', [
        {
            type: 'text',
            val: 'Written with love by '
        },
        {
            type: 'interp',
            val: 'author'
        }
    ]);
    test('This will be safe: #{theGreat}', [
        {
            type: 'text',
            val: 'This will be safe: '
        },
        {
            type: 'interp',
            val: 'theGreat'
        }
    ]);
    test('No escaping for #{\'}\'}!', [
        {
            type: 'text',
            val: 'No escaping for '
        },
        {
            type: 'interp',
            val: "'}'"
        },
        {
            type: 'text',
            val: '!'
        }
    ]);
    test('Escaping works with \\#{interpolation}', [
        {
            type: 'text',
            val: 'Escaping works with \\#{interpolation}'
        }
    ]);
    test('#[br]', [
        {
            type: 'tag',
            name: 'br'
        }
    ]);
    test('#[strong mighty]', [
        {
            type: 'tag',
            name: 'strong',
            val: 'mighty'
        }
    ]);
    test('A #[strong strongly worded phrase] that cannot be #[em ignored].', [
        {
            type: 'text',
            val: 'A '
        },
        {
            type: 'tag',
            name: 'strong',
            val: 'strongly worded phrase'
        },
        {
            type: 'text',
            val: ' that cannot be '
        },
        {
            type: 'tag',
            name: 'em',
            val: 'ignored'
        },
        {
            type: 'text',
            val: '.'
        }
    ]);
    test('This is a very long and boring paragraph that spans multiple lines. Suddenly there is a #[strong strongly worded phrase] that cannot be #[em ignored].', [
        {
            type: 'text',
            val: 'This is a very long and boring paragraph that spans multiple lines. Suddenly there is a '
        },
        {
            type: 'tag',
            name: 'strong',
            val: 'strongly worded phrase'
        },
        {
            type: 'text',
            val: ' that cannot be '
        },
        {
            type: 'tag',
            name: 'em',
            val: 'ignored'
        },
        {
            type: 'text',
            val: '.'
        }
    ]);
    // test('And here\'s an example of an interpolated tag with an attribute: #[q(lang="es") ¡Hola Mundo!]', [
    //   {
    //     type: 'text',
    //     val: "And here's an example of an interpolated tag with an attribute: "
    //   },
    //   { type: 'tag', name: 'q', attrs: [ { name: 'lang', val: '"es"' } ] },
    //   { type: 'text', val: ' ¡Hola Mundo!]' }
    // ])
    try {
        test('#[strong a}', {
        });
        fail('expected exception');
    } catch (expected) {
    }
    test('before #[:cdata inside] after', [
        {
            type: 'text',
            val: 'before '
        },
        {
            type: 'filter',
            name: 'cdata',
            val: 'inside'
        },
        {
            type: 'text',
            val: ' after'
        }
    ]);
    test('bing #[strong foo] bong', [
        {
            type: 'text',
            val: 'bing '
        },
        {
            type: 'tag',
            name: 'strong',
            val: 'foo'
        },
        {
            type: 'text',
            val: ' bong'
        }
    ]);
    test("bing #[strong foo] #[strong= '[foo]'] bong", [
        {
            type: 'text',
            val: 'bing '
        },
        {
            type: 'tag',
            name: 'strong',
            val: 'foo'
        },
        {
            type: 'text',
            val: ' '
        },
        {
            type: 'tag',
            name: 'strong',
            assignment: " '[foo]'"
        },
        {
            type: 'text',
            val: ' bong'
        }
    ]);
    // TODO:
    // test("bing #[- var foo = 'foo]'] bong", {})
    test('\\#[strong escaped]', [
        {
            type: 'text',
            val: '\\#[strong escaped]'
        }
    ]);
    test('\\#[#[strong escaped]', [
        {
            type: 'text',
            val: '\\#['
        },
        {
            type: 'tag',
            name: 'strong',
            val: 'escaped'
        }
    ]);
// TODO: 
// test("This also works #[+linkit('http://www.bing.com')] so hurrah for Pug", {})
};
function $51f63cf6b52326c0$var$Parser() {
    this.yy = {
    };
}
$51f63cf6b52326c0$var$Parser.prototype = $51f63cf6b52326c0$var$parser;
$51f63cf6b52326c0$var$parser.Parser = $51f63cf6b52326c0$var$Parser;
function $51f63cf6b52326c0$var$yyparse() {
    return $51f63cf6b52326c0$var$parser.parse.apply($51f63cf6b52326c0$var$parser, arguments);
}
var $51f63cf6b52326c0$export$2e2bcd8739ae039 = {
    parser: $51f63cf6b52326c0$var$parser,
    Parser: $51f63cf6b52326c0$var$Parser,
    parse: $51f63cf6b52326c0$var$yyparse
};



/* parser generated by jison 0.6.1-216 */ /*
 * Returns a Parser object of the following structure:
 *
 *  Parser: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a derivative/copy of this one,
 *               not a direct reference!
 *  }
 *
 *  Parser.prototype: {
 *    yy: {},
 *    EOF: 1,
 *    TERROR: 2,
 *
 *    trace: function(errorMessage, ...),
 *
 *    JisonParserError: function(msg, hash),
 *
 *    quoteName: function(name),
 *               Helper function which can be overridden by user code later on: put suitable
 *               quotes around literal IDs in a description string.
 *
 *    originalQuoteName: function(name),
 *               The basic quoteName handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `quoteName()` to reference this function
 *               at the end of the `parse()`.
 *
 *    describeSymbol: function(symbol),
 *               Return a more-or-less human-readable description of the given symbol, when
 *               available, or the symbol itself, serving as its own 'description' for lack
 *               of something better to serve up.
 *
 *               Return NULL when the symbol is unknown to the parser.
 *
 *    symbols_: {associative list: name ==> number},
 *    terminals_: {associative list: number ==> name},
 *    nonterminals: {associative list: rule-name ==> {associative list: number ==> rule-alt}},
 *    terminal_descriptions_: (if there are any) {associative list: number ==> description},
 *    productions_: [...],
 *
 *    performAction: function parser__performAction(yytext, yyleng, yylineno, yyloc, yystate, yysp, yyvstack, yylstack, yystack, yysstack),
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `yyval` internal object, which has members (`$` and `_$`)
 *                             to store/reference the rule value `$$` and location info `@$`.
 *
 *                 One important thing to note about `this` a.k.a. `yyval`: every *reduce* action gets
 *                 to see the same object via the `this` reference, i.e. if you wish to carry custom
 *                 data from one reduce action through to the next within a single parse run, then you
 *                 may get nasty and use `yyval` a.k.a. `this` for storing you own semi-permanent data.
 *
 *                 `this.yy` is a direct reference to the `yy` shared state object.
 *
 *                 `%parse-param`-specified additional `parse()` arguments have been added to this `yy`
 *                 object at `parse()` start and are therefore available to the action code via the
 *                 same named `yy.xxxx` attributes (where `xxxx` represents a identifier name from
 *                 the %parse-param` list.
 *
 *               - `yytext`  : reference to the lexer value which belongs to the last lexer token used
 *                             to match this rule. This is *not* the look-ahead token, but the last token
 *                             that's actually part of this rule.
 *
 *                 Formulated another way, `yytext` is the value of the token immediately preceeding
 *                 the current look-ahead token.
 *                 Caveats apply for rules which don't require look-ahead, such as epsilon rules.
 *
 *               - `yyleng`  : ditto as `yytext`, only now for the lexer.yyleng value.
 *
 *               - `yylineno`: ditto as `yytext`, only now for the lexer.yylineno value.
 *
 *               - `yyloc`   : ditto as `yytext`, only now for the lexer.yylloc lexer token location info.
 *
 *                               WARNING: since jison 0.4.18-186 this entry may be NULL/UNDEFINED instead
 *                               of an empty object when no suitable location info can be provided.
 *
 *               - `yystate` : the current parser state number, used internally for dispatching and
 *                               executing the action code chunk matching the rule currently being reduced.
 *
 *               - `yysp`    : the current state stack position (a.k.a. 'stack pointer')
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *                 Also note that you can access this and other stack index values using the new double-hash
 *                 syntax, i.e. `##$ === ##0 === yysp`, while `##1` is the stack index for all things
 *                 related to the first rule term, just like you have `$1`, `@1` and `#1`.
 *                 This is made available to write very advanced grammar action rules, e.g. when you want
 *                 to investigate the parse state stack in your action code, which would, for example,
 *                 be relevant when you wish to implement error diagnostics and reporting schemes similar
 *                 to the work described here:
 *
 *                 + Pottier, F., 2016. Reachability and error diagnosis in LR(1) automata.
 *                   In Journées Francophones des Languages Applicatifs.
 *
 *                 + Jeffery, C.L., 2003. Generating LR syntax error messages from examples.
 *                   ACM Transactions on Programming Languages and Systems (TOPLAS), 25(5), pp.631–640.
 *
 *               - `yyrulelength`: the current rule's term count, i.e. the number of entries occupied on the stack.
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *               - `yyvstack`: reference to the parser value stack. Also accessed via the `$1` etc.
 *                             constructs.
 *
 *               - `yylstack`: reference to the parser token location stack. Also accessed via
 *                             the `@1` etc. constructs.
 *
 *                             WARNING: since jison 0.4.18-186 this array MAY contain slots which are
 *                             UNDEFINED rather than an empty (location) object, when the lexer/parser
 *                             action code did not provide a suitable location info object when such a
 *                             slot was filled!
 *
 *               - `yystack` : reference to the parser token id stack. Also accessed via the
 *                             `#1` etc. constructs.
 *
 *                 Note: this is a bit of a **white lie** as we can statically decode any `#n` reference to
 *                 its numeric token id value, hence that code wouldn't need the `yystack` but *you* might
 *                 want access this array for your own purposes, such as error analysis as mentioned above!
 *
 *                 Note that this stack stores the current stack of *tokens*, that is the sequence of
 *                 already parsed=reduced *nonterminals* (tokens representing rules) and *terminals*
 *                 (lexer tokens *shifted* onto the stack until the rule they belong to is found and
 *                 *reduced*.
 *
 *               - `yysstack`: reference to the parser state stack. This one carries the internal parser
 *                             *states* such as the one in `yystate`, which are used to represent
 *                             the parser state machine in the *parse table*. *Very* *internal* stuff,
 *                             what can I say? If you access this one, you're clearly doing wicked things
 *
 *               - `...`     : the extra arguments you specified in the `%parse-param` statement in your
 *                             grammar definition file.
 *
 *    table: [...],
 *               State transition table
 *               ----------------------
 *
 *               index levels are:
 *               - `state`  --> hash table
 *               - `symbol` --> action (number or array)
 *
 *                 If the `action` is an array, these are the elements' meaning:
 *                 - index [0]: 1 = shift, 2 = reduce, 3 = accept
 *                 - index [1]: GOTO `state`
 *
 *                 If the `action` is a number, it is the GOTO `state`
 *
 *    defaultActions: {...},
 *
 *    parseError: function(str, hash, ExceptionClass),
 *    yyError: function(str, ...),
 *    yyRecovering: function(),
 *    yyErrOk: function(),
 *    yyClearIn: function(),
 *
 *    constructParseErrorInfo: function(error_message, exception_object, expected_token_set, is_recoverable),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this parser kernel in many places; example usage:
 *
 *                   var infoObj = parser.constructParseErrorInfo('fail!', null,
 *                                     parser.collect_expected_token_set(state), true);
 *                   var retVal = parser.parseError(infoObj.errStr, infoObj, parser.JisonParserError);
 *
 *    originalParseError: function(str, hash, ExceptionClass),
 *               The basic `parseError` handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `parseError()` to reference this function
 *               at the end of the `parse()`.
 *
 *    options: { ... parser %options ... },
 *
 *    parse: function(input[, args...]),
 *               Parse the given `input` and return the parsed value (or `true` when none was provided by
 *               the root action, in which case the parser is acting as a *matcher*).
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of this grammar:
 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
 *
 *               WARNING:
 *               Parser's additional `args...` parameters (via `%parse-param`) MAY conflict with
 *               any attributes already added to `yy` by the jison run-time;
 *               when such a collision is detected an exception is thrown to prevent the generated run-time
 *               from silently accepting this confusing and potentially hazardous situation!
 *
 *               The lexer MAY add its own set of additional parameters (via the `%parse-param` line in
 *               the lexer section of the grammar spec): these will be inserted in the `yy` shared state
 *               object and any collision with those will be reported by the lexer via a thrown exception.
 *
 *    cleanupAfterParse: function(resultValue, invoke_post_methods, do_not_nuke_errorinfos),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API is invoked at the end of the `parse()` call, unless an exception was thrown
 *               and `%options no-try-catch` has been defined for this grammar: in that case this helper MAY
 *               be invoked by calling user code to ensure the `post_parse` callbacks are invoked and
 *               the internal parser gets properly garbage collected under these particular circumstances.
 *
 *    yyMergeLocationInfo: function(first_index, last_index, first_yylloc, last_yylloc, dont_look_back),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API can be invoked to calculate a spanning `yylloc` location info object.
 *
 *               Note: %epsilon rules MAY specify no `first_index` and `first_yylloc`, in which case
 *               this function will attempt to obtain a suitable location marker by inspecting the location stack
 *               backwards.
 *
 *               For more info see the documentation comment further below, immediately above this function's
 *               implementation.
 *
 *    lexer: {
 *        yy: {...},           A reference to the so-called "shared state" `yy` once
 *                             received via a call to the `.setInput(input, yy)` lexer API.
 *        EOF: 1,
 *        ERROR: 2,
 *        JisonLexerError: function(msg, hash),
 *        parseError: function(str, hash, ExceptionClass),
 *        setInput: function(input, [yy]),
 *        input: function(),
 *        unput: function(str),
 *        more: function(),
 *        reject: function(),
 *        less: function(n),
 *        pastInput: function(n),
 *        upcomingInput: function(n),
 *        showPosition: function(),
 *        test_match: function(regex_match_array, rule_index, ...),
 *        next: function(...),
 *        lex: function(...),
 *        begin: function(condition),
 *        pushState: function(condition),
 *        popState: function(),
 *        topState: function(),
 *        _currentRules: function(),
 *        stateStackSize: function(),
 *        cleanupAfterLex: function()
 *
 *        options: { ... lexer %options ... },
 *
 *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START, ...),
 *        rules: [...],
 *        conditions: {associative list: name ==> set},
 *    }
 *  }
 *
 *
 *  token location info (@$, _$, etc.): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer and
 * parser errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *  }
 *
 * parser (grammar) errors will also provide these additional members:
 *
 *  {
 *    expected:    (array describing the set of expected tokens;
 *                  may be UNDEFINED when we cannot easily produce such a set)
 *    state:       (integer (or array when the table includes grammar collisions);
 *                  represents the current internal state of the parser kernel.
 *                  can, for example, be used to pass to the `collect_expected_token_set()`
 *                  API to obtain the expected token set)
 *    action:      (integer; represents the current internal action which will be executed)
 *    new_state:   (integer; represents the next/planned internal state, once the current
 *                  action has executed)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    value_stack: (array: the current parser LALR/LR internal `$$` value stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    location_stack: (array: the current parser LALR/LR internal location stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *    parser:      (reference to the current parser instance)
 *  }
 *
 * while `this` will reference the current parser instance.
 *
 * When `parseError` is invoked by the lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    lexer:       (reference to the current lexer instance which reported the error)
 *  }
 *
 * When `parseError` is invoked by the parser due to a **JavaScript exception** being fired
 * from either the parser or lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    exception:   (reference to the exception thrown)
 *  }
 *
 * Please do note that in the latter situation, the `expected` field will be omitted as
 * this type of failure is assumed not to be due to *parse errors* but rather due to user
 * action code in either parser or lexer failing unexpectedly.
 *
 * ---
 *
 * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.
 * These options are available:
 *
 * ### options which are global for all parser instances
 *
 *  Parser.pre_parse: function(yy)
 *                 optional: you can specify a pre_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`.
 *  Parser.post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: you can specify a post_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`. When it does not return any value,
 *                 the parser will return the original `retval`.
 *
 * ### options which can be set up per parser instance
 *
 *  yy: {
 *      pre_parse:  function(yy)
 *                 optional: is invoked before the parse cycle starts (and before the first
 *                 invocation of `lex()`) but immediately after the invocation of
 *                 `parser.pre_parse()`).
 *      post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: is invoked when the parse terminates due to success ('accept')
 *                 or failure (even when exceptions are thrown).
 *                 `retval` contains the return value to be produced by `Parser.parse()`;
 *                 this function can override the return value by returning another.
 *                 When it does not return any value, the parser will return the original
 *                 `retval`.
 *                 This function is invoked immediately before `parser.post_parse()`.
 *
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *      quoteName: function(name),
 *                 optional: overrides the default `quoteName` function.
 *  }
 *
 *  parser.lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this `%option` has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */ // See also:
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
// but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
// with userland code which might access the derived class in a 'classic' way.
function $510a014853e7284e$var$JisonParserError(msg, hash) {
    Object.defineProperty(this, 'name', {
        enumerable: false,
        writable: false,
        value: 'JisonParserError'
    });
    if (msg == null) msg = '???';
    Object.defineProperty(this, 'message', {
        enumerable: false,
        writable: true,
        value: msg
    });
    this.hash = hash;
    var stacktrace;
    if (hash && hash.exception instanceof Error) {
        var ex2 = hash.exception;
        this.message = ex2.message || msg;
        stacktrace = ex2.stack;
    }
    if (!stacktrace) {
        if (Error.hasOwnProperty('captureStackTrace')) Error.captureStackTrace(this, this.constructor);
        else stacktrace = new Error(msg).stack;
    }
    if (stacktrace) Object.defineProperty(this, 'stack', {
        enumerable: false,
        writable: false,
        value: stacktrace
    });
}
if (typeof Object.setPrototypeOf === 'function') Object.setPrototypeOf($510a014853e7284e$var$JisonParserError.prototype, Error.prototype);
else $510a014853e7284e$var$JisonParserError.prototype = Object.create(Error.prototype);
$510a014853e7284e$var$JisonParserError.prototype.constructor = $510a014853e7284e$var$JisonParserError;
$510a014853e7284e$var$JisonParserError.prototype.name = 'JisonParserError';
// helper: reconstruct the productions[] table
function $510a014853e7284e$var$bp(s) {
    var rv = [];
    var p = s.pop;
    var r = s.rule;
    for(var i = 0, l = p.length; i < l; i++)rv.push([
        p[i],
        r[i]
    ]);
    return rv;
}
// helper: reconstruct the 'goto' table
function $510a014853e7284e$var$bt(s) {
    var rv = [];
    var d = s.len;
    var y = s.symbol;
    var t = s.type;
    var a = s.state;
    var m = s.mode;
    var g = s.goto;
    for(var i = 0, l = d.length; i < l; i++){
        var n = d[i];
        var q = {
        };
        for(var j = 0; j < n; j++){
            var z = y.shift();
            switch(t.shift()){
                case 2:
                    q[z] = [
                        m.shift(),
                        g.shift()
                    ];
                    break;
                case 0:
                    q[z] = a.shift();
                    break;
                default:
                    // type === 1: accept
                    q[z] = [
                        3
                    ];
            }
        }
        rv.push(q);
    }
    return rv;
}
// helper: runlength encoding with increment step: code, length: step (default step = 0)
// `this` references an array
function $510a014853e7284e$var$s(c, l, a) {
    a = a || 0;
    for(var i = 0; i < l; i++){
        this.push(c);
        c += a;
    }
}
// helper: duplicate sequence from *relative* offset and length.
// `this` references an array
function $510a014853e7284e$var$c(i, l) {
    i = this.length - i;
    for(l += i; i < l; i++)this.push(this[i]);
}
// helper: unpack an array using helpers and data, all passed in an array argument 'a'.
function $510a014853e7284e$var$u(a) {
    var rv = [];
    for(var i = 0, l = a.length; i < l; i++){
        var e = a[i];
        // Is this entry a helper function?
        if (typeof e === 'function') {
            i++;
            e.apply(rv, a[i]);
        } else rv.push(e);
    }
    return rv;
}
var $510a014853e7284e$var$parser = {
    // Code Generator Information Report
    // ---------------------------------
    //
    // Options:
    //
    //   default action mode: ............. ["classic","merge"]
    //   test-compile action mode: ........ "parser:*,lexer:*"
    //   try..catch: ...................... true
    //   default resolve on conflict: ..... true
    //   on-demand look-ahead: ............ false
    //   error recovery token skip maximum: 3
    //   yyerror in parse actions is: ..... NOT recoverable,
    //   yyerror in lexer actions and other non-fatal lexer are:
    //   .................................. NOT recoverable,
    //   debug grammar/output: ............ false
    //   has partial LR conflict upgrade:   true
    //   rudimentary token-stack support:   true
    //   parser table compression mode: ... 2
    //   export debug tables: ............. false
    //   export *all* tables: ............. false
    //   module type: ..................... es
    //   parser engine type: .............. lalr
    //   output main() in the module: ..... true
    //   has user-specified main(): ....... false
    //   has user-specified require()/import modules for main():
    //   .................................. false
    //   number of expected conflicts: .... 0
    //
    //
    // Parser Analysis flags:
    //
    //   no significant actions (parser is a language matcher only):
    //   .................................. false
    //   uses yyleng: ..................... false
    //   uses yylineno: ................... false
    //   uses yytext: ..................... false
    //   uses yylloc: ..................... false
    //   uses ParseError API: ............. false
    //   uses YYERROR: .................... false
    //   uses YYRECOVERING: ............... false
    //   uses YYERROK: .................... false
    //   uses YYCLEARIN: .................. false
    //   tracks rule values: .............. true
    //   assigns rule values: ............. true
    //   uses location tracking: .......... false
    //   assigns location: ................ false
    //   uses yystack: .................... false
    //   uses yysstack: ................... false
    //   uses yysp: ....................... true
    //   uses yyrulelength: ............... false
    //   uses yyMergeLocationInfo API: .... false
    //   has error recovery: .............. false
    //   has error reporting: ............. false
    //
    // --------- END OF REPORT -----------
    trace: function no_op_trace() {
    },
    JisonParserError: $510a014853e7284e$var$JisonParserError,
    yy: {
    },
    options: {
        type: "lalr",
        hasPartialLrUpgradeOnConflict: true,
        errorRecoveryTokenDiscardCount: 3,
        tokenStack: true,
        ebnf: true
    },
    symbols_: {
        "$accept": 0,
        "$end": 1,
        "COMMA": 10,
        "EOF": 1,
        "EQ": 4,
        "NAME": 3,
        "PLUS": 8,
        "SPACE": 9,
        "SPREAD": 5,
        "VAL": 6,
        "VAR": 7,
        "attr": 13,
        "attrs": 12,
        "attrs_group": 15,
        "attrs_group2": 16,
        "error": 2,
        "start": 11,
        "val": 14
    },
    terminals_: {
        1: "EOF",
        2: "error",
        3: "NAME",
        4: "EQ",
        5: "SPREAD",
        6: "VAL",
        7: "VAR",
        8: "PLUS",
        9: "SPACE",
        10: "COMMA"
    },
    TERROR: 2,
    EOF: 1,
    // internals: defined here so the object *structure* doesn't get modified by parse() et al,
    // thus helping JIT compilers like Chrome V8.
    originalQuoteName: null,
    originalParseError: null,
    cleanupAfterParse: null,
    constructParseErrorInfo: null,
    yyMergeLocationInfo: null,
    __reentrant_call_depth: 0,
    __error_infos: [],
    __error_recovery_infos: [],
    // APIs which will be set up depending on user action code analysis:
    //yyRecovering: 0,
    //yyErrOk: 0,
    //yyClearIn: 0,
    // Helper APIs
    // -----------
    // Helper function which can be overridden by user code later on: put suitable quotes around
    // literal IDs in a description string.
    quoteName: function parser_quoteName(id_str) {
        return '"' + id_str + '"';
    },
    // Return the name of the given symbol (terminal or non-terminal) as a string, when available.
    //
    // Return NULL when the symbol is unknown to the parser.
    getSymbolName: function parser_getSymbolName(symbol) {
        if (this.terminals_[symbol]) return this.terminals_[symbol];
        // Otherwise... this might refer to a RULE token i.e. a non-terminal: see if we can dig that one up.
        //
        // An example of this may be where a rule's action code contains a call like this:
        //
        //      parser.getSymbolName(#$)
        //
        // to obtain a human-readable name of the current grammar rule.
        var s = this.symbols_;
        for(var key in s){
            if (s[key] === symbol) return key;
        }
        return null;
    },
    // Return a more-or-less human-readable description of the given symbol, when available,
    // or the symbol itself, serving as its own 'description' for lack of something better to serve up.
    //
    // Return NULL when the symbol is unknown to the parser.
    describeSymbol: function parser_describeSymbol(symbol) {
        if (symbol !== this.EOF && this.terminal_descriptions_ && this.terminal_descriptions_[symbol]) return this.terminal_descriptions_[symbol];
        else if (symbol === this.EOF) return 'end of input';
        var id = this.getSymbolName(symbol);
        if (id) return this.quoteName(id);
        return null;
    },
    // Produce a (more or less) human-readable list of expected tokens at the point of failure.
    //
    // The produced list may contain token or token set descriptions instead of the tokens
    // themselves to help turning this output into something that easier to read by humans
    // unless `do_not_describe` parameter is set, in which case a list of the raw, *numeric*,
    // expected terminals and nonterminals is produced.
    //
    // The returned list (array) will not contain any duplicate entries.
    collect_expected_token_set: function parser_collect_expected_token_set(state, do_not_describe) {
        var TERROR = this.TERROR;
        var tokenset = [];
        var check = {
        };
        // Has this (error?) state been outfitted with a custom expectations description text for human consumption?
        // If so, use that one instead of the less palatable token set.
        if (!do_not_describe && this.state_descriptions_ && this.state_descriptions_[state]) return [
            this.state_descriptions_[state]
        ];
        for(var p in this.table[state]){
            p = +p;
            if (p !== TERROR) {
                var d = do_not_describe ? p : this.describeSymbol(p);
                if (d && !check[d]) {
                    tokenset.push(d);
                    check[d] = true; // Mark this token description as already mentioned to prevent outputting duplicate entries.
                }
            }
        }
        return tokenset;
    },
    productions_: $510a014853e7284e$var$bp({
        pop: $510a014853e7284e$var$u([
            11,
            11,
            $510a014853e7284e$var$s,
            [
                12,
                3
            ],
            $510a014853e7284e$var$s,
            [
                13,
                3
            ],
            $510a014853e7284e$var$s,
            [
                14,
                3
            ],
            15,
            15,
            16,
            16
        ]),
        rule: $510a014853e7284e$var$u([
            1,
            2,
            3,
            2,
            1,
            3,
            $510a014853e7284e$var$s,
            [
                1,
                4
            ],
            $510a014853e7284e$var$c,
            [
                5,
                5
            ]
        ])
    }),
    performAction: function parser__PerformAction(yystate /* action[1] */ , yysp, yyvstack) {
        /* this == yyval */ // the JS engine itself can go and remove these statements when `yy` turns out to be unused in any action code!
        var yy = this.yy;
        var yyparser = yy.parser;
        var yylexer = yy.lexer;
        switch(yystate){
            case 0:
                /*! Production::    $accept : start $end */ // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-):
                this.$ = yyvstack[yysp - 1];
                break;
            case 1:
            /*! Production::    start : EOF */ case 9:
            /*! Production::    val : VAL */ case 10:
                /*! Production::    val : VAR */ // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-):
                this.$ = yyvstack[yysp];
                break;
            case 2:
                /*! Production::    start : attrs EOF */ // default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-):
                this.$ = yyvstack[yysp - 1];
                break;
            case 3:
                /*! Production::    attrs : attrs attrs_group attr */ yyvstack[yysp - 2].push(yyvstack[yysp]);
                this.$ = yyvstack[yysp - 2];
                break;
            case 4:
                /*! Production::    attrs : attrs attrs_group2 */ this.$ = yyvstack[yysp - 1];
                break;
            case 5:
                /*! Production::    attrs : attr */ this.$ = [
                    yyvstack[yysp]
                ];
                break;
            case 6:
                /*! Production::    attr : NAME EQ val */ $510a014853e7284e$var$debug('attr: NAME EQ val: NAME=', yyvstack[yysp - 2], ', val=', yyvstack[yysp]);
                this.$ = {
                    name: yyvstack[yysp - 2].trim(),
                    val: yyvstack[yysp]
                };
                break;
            case 7:
                /*! Production::    attr : SPREAD */ this.$ = {
                    name: yyvstack[yysp],
                    val: yyvstack[yysp]
                };
                break;
            case 8:
                /*! Production::    attr : NAME */ $510a014853e7284e$var$debug('attr: NAME: $NAME=', yyvstack[yysp]);
                // $$ = $1.map( function(id2) {
                //   return { name: id2 }
                // })
                this.$ = {
                    name: yyvstack[yysp]
                };
                break;
            case 11:
                /*! Production::    val : val PLUS VAR */ this.$ = yyvstack[yysp - 2] + yyvstack[yysp];
                break;
            case 12:
            /*! Production::    attrs_group : SPACE */ case 13:
            /*! Production::    attrs_group : COMMA */ case 14:
            /*! Production::    attrs_group2 : SPACE */ case 15:
                /*! Production::    attrs_group2 : COMMA */ this.$ = yyvstack[yysp];
                break;
        }
    },
    table: $510a014853e7284e$var$bt({
        len: $510a014853e7284e$var$u([
            6,
            1,
            0,
            5,
            0,
            4,
            0,
            0,
            3,
            0,
            5,
            5,
            3,
            $510a014853e7284e$var$c,
            [
                9,
                4
            ],
            1,
            0
        ]),
        symbol: $510a014853e7284e$var$u([
            1,
            3,
            5,
            11,
            12,
            13,
            1,
            1,
            9,
            10,
            15,
            16,
            1,
            4,
            9,
            10,
            3,
            5,
            13,
            $510a014853e7284e$var$c,
            [
                19,
                3
            ],
            9,
            10,
            $510a014853e7284e$var$c,
            [
                5,
                5
            ],
            6,
            7,
            14,
            1,
            8,
            9,
            10,
            7
        ]),
        type: $510a014853e7284e$var$u([
            $510a014853e7284e$var$s,
            [
                2,
                3
            ],
            $510a014853e7284e$var$s,
            [
                0,
                3
            ],
            1,
            $510a014853e7284e$var$c,
            [
                7,
                5
            ],
            $510a014853e7284e$var$s,
            [
                2,
                6
            ],
            $510a014853e7284e$var$c,
            [
                7,
                7
            ],
            $510a014853e7284e$var$c,
            [
                13,
                12
            ]
        ]),
        state: $510a014853e7284e$var$u([
            1,
            3,
            4,
            8,
            9,
            13,
            14
        ]),
        mode: $510a014853e7284e$var$u([
            $510a014853e7284e$var$s,
            [
                1,
                6
            ],
            2,
            1,
            2,
            2,
            $510a014853e7284e$var$c,
            [
                6,
                3
            ],
            $510a014853e7284e$var$s,
            [
                2,
                9
            ],
            $510a014853e7284e$var$c,
            [
                18,
                7
            ]
        ]),
        goto: $510a014853e7284e$var$u([
            2,
            5,
            6,
            7,
            10,
            11,
            8,
            12,
            8,
            8,
            5,
            6,
            14,
            12,
            12,
            14,
            14,
            15,
            13,
            13,
            $510a014853e7284e$var$s,
            [
                15,
                3
            ],
            16,
            6,
            17,
            6,
            6,
            18
        ])
    }),
    defaultActions: {
        2: 1,
        4: 5,
        6: 7,
        7: 2,
        9: 4,
        13: 3,
        15: 9,
        16: 10,
        18: 11
    },
    parseError: function parseError(str, hash, ExceptionClass) {
        if (hash.recoverable) {
            if (typeof this.trace === 'function') this.trace(str);
            hash.destroy(); // destroy... well, *almost*!
        } else {
            if (typeof this.trace === 'function') this.trace(str);
            if (!ExceptionClass) ExceptionClass = this.JisonParserError;
            throw new ExceptionClass(str, hash);
        }
    },
    parse: function parse(input) {
        var self = this;
        var stack = new Array(128); // token stack: stores token which leads to state at the same index (column storage)
        var sstack = new Array(128); // state stack: stores states (column storage)
        var tstack = []; // token stack (only used when `%options token_stack` support has been enabled)
        var vstack = new Array(128); // semantic value stack
        var table = this.table;
        var sp = 0; // 'stack pointer': index into the stacks
        var symbol1 = 0;
        var TERROR = this.TERROR;
        var EOF = this.EOF;
        var ERROR_RECOVERY_TOKEN_DISCARD_COUNT = this.options.errorRecoveryTokenDiscardCount | 0 || 3;
        var NO_ACTION = [
            0,
            19 /* === table.length :: ensures that anyone using this new state will fail dramatically! */ 
        ];
        var lexer;
        if (this.__lexer__) lexer = this.__lexer__;
        else lexer = this.__lexer__ = Object.create(this.lexer);
        var sharedState_yy = {
            parseError: undefined,
            quoteName: undefined,
            lexer: undefined,
            parser: undefined,
            pre_parse: undefined,
            post_parse: undefined,
            pre_lex: undefined,
            post_lex: undefined // WARNING: must be written this way for the code expanders to work correctly in both ES5 and ES6 modes!
        };
        var ASSERT;
        if (typeof $c1Lgv$assert !== 'function') ASSERT = function JisonAssert(cond, msg) {
            if (!cond) throw new Error('assertion failed: ' + (msg || '***'));
        };
        else ASSERT = $c1Lgv$assert;
        this.yyGetSharedState = function yyGetSharedState() {
            return sharedState_yy;
        };
        function shallow_copy_noclobber(dst, src) {
            for(var k in src)if (typeof dst[k] === 'undefined' && Object.prototype.hasOwnProperty.call(src, k)) dst[k] = src[k];
        }
        // copy state
        shallow_copy_noclobber(sharedState_yy, this.yy);
        sharedState_yy.lexer = lexer;
        sharedState_yy.parser = this;
        // Does the shared state override the default `parseError` that already comes with this instance?
        if (typeof sharedState_yy.parseError === 'function') this.parseError = function parseErrorAlt(str, hash, ExceptionClass) {
            if (!ExceptionClass) ExceptionClass = this.JisonParserError;
            return sharedState_yy.parseError.call(this, str, hash, ExceptionClass);
        };
        else this.parseError = this.originalParseError;
        // Does the shared state override the default `quoteName` that already comes with this instance?
        if (typeof sharedState_yy.quoteName === 'function') this.quoteName = function quoteNameAlt(id_str) {
            return sharedState_yy.quoteName.call(this, id_str);
        };
        else this.quoteName = this.originalQuoteName;
        // set up the cleanup function; make it an API so that external code can re-use this one in case of
        // calamities or when the `%options no-try-catch` option has been specified for the grammar, in which
        // case this parse() API method doesn't come with a `finally { ... }` block any more!
        //
        // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
        //       or else your `sharedState`, etc. references will be *wrong*!
        this.cleanupAfterParse = function parser_cleanupAfterParse(resultValue, invoke_post_methods, do_not_nuke_errorinfos) {
            var rv;
            if (invoke_post_methods) {
                var hash;
                if (sharedState_yy.post_parse || this.post_parse) // create an error hash info instance: we re-use this API in a **non-error situation**
                // as this one delivers all parser internals ready for access by userland code.
                hash = this.constructParseErrorInfo(null, null, null, false);
                if (sharedState_yy.post_parse) {
                    rv = sharedState_yy.post_parse.call(this, sharedState_yy, resultValue, hash);
                    if (typeof rv !== 'undefined') resultValue = rv;
                }
                if (this.post_parse) {
                    rv = this.post_parse.call(this, sharedState_yy, resultValue, hash);
                    if (typeof rv !== 'undefined') resultValue = rv;
                }
                // cleanup:
                if (hash && hash.destroy) hash.destroy();
            }
            if (this.__reentrant_call_depth > 1) return resultValue; // do not (yet) kill the sharedState when this is a reentrant run.
            // clean up the lingering lexer structures as well:
            if (lexer.cleanupAfterLex) lexer.cleanupAfterLex(do_not_nuke_errorinfos);
            // prevent lingering circular references from causing memory leaks:
            if (sharedState_yy) {
                sharedState_yy.lexer = undefined;
                sharedState_yy.parser = undefined;
                if (lexer.yy === sharedState_yy) lexer.yy = undefined;
            }
            sharedState_yy = undefined;
            this.parseError = this.originalParseError;
            this.quoteName = this.originalQuoteName;
            // nuke the vstack[] array at least as that one will still reference obsoleted user values.
            // To be safe, we nuke the other internal stack columns as well...
            stack.length = 0; // fastest way to nuke an array without overly bothering the GC
            sstack.length = 0;
            vstack.length = 0;
            sp = 0;
            // nuke the error hash info instances created during this run.
            // Userland code must COPY any data/references
            // in the error hash instance(s) it is more permanently interested in.
            if (!do_not_nuke_errorinfos) {
                for(var i = this.__error_infos.length - 1; i >= 0; i--){
                    var el = this.__error_infos[i];
                    if (el && typeof el.destroy === 'function') el.destroy();
                }
                this.__error_infos.length = 0;
            }
            return resultValue;
        };
        // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
        //       or else your `lexer`, `sharedState`, etc. references will be *wrong*!
        this.constructParseErrorInfo = function parser_constructParseErrorInfo(msg, ex, expected, recoverable) {
            var pei = {
                errStr: msg,
                exception: ex,
                text: lexer.match,
                value: lexer.yytext,
                token: this.describeSymbol(symbol1) || symbol1,
                token_id: symbol1,
                line: lexer.yylineno,
                expected: expected,
                recoverable: recoverable,
                state: state,
                action: action,
                new_state: newState,
                symbol_stack: stack,
                state_stack: sstack,
                value_stack: vstack,
                stack_pointer: sp,
                yy: sharedState_yy,
                lexer: lexer,
                parser: this,
                // and make sure the error info doesn't stay due to potential
                // ref cycle via userland code manipulations.
                // These would otherwise all be memory leak opportunities!
                //
                // Note that only array and object references are nuked as those
                // constitute the set of elements which can produce a cyclic ref.
                // The rest of the members is kept intact as they are harmless.
                destroy: function destructParseErrorInfo() {
                    // remove cyclic references added to error info:
                    // info.yy = null;
                    // info.lexer = null;
                    // info.value = null;
                    // info.value_stack = null;
                    // ...
                    var rec = !!this.recoverable;
                    for(var key in this)if (this.hasOwnProperty(key) && typeof key === 'object') this[key] = undefined;
                    this.recoverable = rec;
                }
            };
            // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
            this.__error_infos.push(pei);
            return pei;
        };
        function getNonTerminalFromCode(symbol) {
            var tokenName = self.getSymbolName(symbol);
            if (!tokenName) tokenName = symbol;
            return tokenName;
        }
        // lex function that supports token stacks
        function lex() {
            var token;
            token = tstack.pop() || lexer.lex() || EOF;
            // if token isn't its numeric value, convert
            if (typeof token !== 'number') {
                if (token instanceof Array) {
                    tstack = token;
                    token = tstack.pop();
                }
                // if token isn't its numeric value, convert
                if (typeof token !== 'number') token = self.symbols_[token] || token;
            }
            return token || EOF;
        }
        var state, action, r, t;
        var yyval = {
            $: true,
            _$: undefined,
            yy: sharedState_yy
        };
        var p;
        var yyrulelen;
        var this_production;
        var newState;
        var retval = false;
        try {
            this.__reentrant_call_depth++;
            lexer.setInput(input, sharedState_yy);
            // NOTE: we *assume* no lexer pre/post handlers are set up *after* 
            // this initial `setInput()` call: hence we can now check and decide
            // whether we'll go with the standard, slower, lex() API or the
            // `fast_lex()` one:
            if (typeof lexer.canIUse === 'function') {
                var lexerInfo = lexer.canIUse();
                if (lexerInfo.fastLex && typeof fastLex === 'function') lex = fastLex;
            }
            vstack[sp] = null;
            sstack[sp] = 0;
            stack[sp] = 0;
            ++sp;
            if (this.pre_parse) this.pre_parse.call(this, sharedState_yy);
            if (sharedState_yy.pre_parse) sharedState_yy.pre_parse.call(this, sharedState_yy);
            newState = sstack[sp - 1];
            for(;;){
                // retrieve state number from top of stack
                state = newState; // sstack[sp - 1];
                // use default actions if available
                if (this.defaultActions[state]) {
                    action = 2;
                    newState = this.defaultActions[state];
                } else {
                    // The single `==` condition below covers both these `===` comparisons in a single
                    // operation:
                    //
                    //     if (symbol === null || typeof symbol === 'undefined') ...
                    if (!symbol1) symbol1 = lex();
                    // read action for current state and first input
                    t = table[state] && table[state][symbol1] || NO_ACTION;
                    newState = t[1];
                    action = t[0];
                    // handle parse error
                    if (!action) {
                        var errStr;
                        var errSymbolDescr = this.describeSymbol(symbol1) || symbol1;
                        var expected1 = this.collect_expected_token_set(state);
                        // Report error
                        if (typeof lexer.yylineno === 'number') errStr = 'Parse error on line ' + (lexer.yylineno + 1) + ': ';
                        else errStr = 'Parse error: ';
                        if (typeof lexer.showPosition === 'function') errStr += '\n' + lexer.showPosition(69, 10) + '\n';
                        if (expected1.length) errStr += 'Expecting ' + expected1.join(', ') + ', got unexpected ' + errSymbolDescr;
                        else errStr += 'Unexpected ' + errSymbolDescr;
                        // we cannot recover from the error!
                        p = this.constructParseErrorInfo(errStr, null, expected1, false);
                        r = this.parseError(p.errStr, p, this.JisonParserError);
                        if (typeof r !== 'undefined') retval = r;
                        break;
                    }
                }
                switch(action){
                    // catch misc. parse failures:
                    default:
                        // this shouldn't happen, unless resolve defaults are off
                        if (action instanceof Array) {
                            p = this.constructParseErrorInfo('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol1, null, null, false);
                            r = this.parseError(p.errStr, p, this.JisonParserError);
                            if (typeof r !== 'undefined') retval = r;
                            break;
                        }
                        // Another case of better safe than sorry: in case state transitions come out of another error recovery process
                        // or a buggy LUT (LookUp Table):
                        p = this.constructParseErrorInfo('Parsing halted. No viable error recovery approach available due to internal system failure.', null, null, false);
                        r = this.parseError(p.errStr, p, this.JisonParserError);
                        if (typeof r !== 'undefined') retval = r;
                        break;
                    // shift:
                    case 1:
                        stack[sp] = symbol1;
                        vstack[sp] = lexer.yytext;
                        sstack[sp] = newState; // push state
                        ++sp;
                        symbol1 = 0;
                        continue;
                    // reduce:
                    case 2:
                        this_production = this.productions_[newState - 1]; // `this.productions_[]` is zero-based indexed while states start from 1 upwards...
                        yyrulelen = this_production[1];
                        r = this.performAction.call(yyval, newState, sp - 1, vstack);
                        if (typeof r !== 'undefined') {
                            retval = r;
                            break;
                        }
                        // pop off stack
                        sp -= yyrulelen;
                        // don't overwrite the `symbol` variable: use a local var to speed things up:
                        var ntsymbol = this_production[0]; // push nonterminal (reduce)
                        stack[sp] = ntsymbol;
                        vstack[sp] = yyval.$;
                        // goto new state = table[STATE][NONTERMINAL]
                        newState = table[sstack[sp - 1]][ntsymbol];
                        sstack[sp] = newState;
                        ++sp;
                        continue;
                    // accept:
                    case 3:
                        if (sp !== -2) {
                            retval = true;
                            // Return the `$accept` rule's `$$` result, if available.
                            //
                            // Also note that JISON always adds this top-most `$accept` rule (with implicit,
                            // default, action):
                            //
                            //     $accept: <startSymbol> $end
                            //                  %{ $$ = $1; @$ = @1; %}
                            //
                            // which, combined with the parse kernel's `$accept` state behaviour coded below,
                            // will produce the `$$` value output of the <startSymbol> rule as the parse result,
                            // IFF that result is *not* `undefined`. (See also the parser kernel code.)
                            //
                            // In code:
                            //
                            //                  %{
                            //                      @$ = @1;            // if location tracking support is included
                            //                      if (typeof $1 !== 'undefined')
                            //                          return $1;
                            //                      else
                            //                          return true;           // the default parse result if the rule actions don't produce anything
                            //                  %}
                            sp--;
                            if (typeof vstack[sp] !== 'undefined') retval = vstack[sp];
                        }
                        break;
                }
                break;
            }
        } catch (ex) {
            // report exceptions through the parseError callback too, but keep the exception intact
            // if it is a known parser or lexer error which has been thrown by parseError() already:
            if (ex instanceof this.JisonParserError) throw ex;
            else if (lexer && typeof lexer.JisonLexerError === 'function' && ex instanceof lexer.JisonLexerError) throw ex;
            p = this.constructParseErrorInfo('Parsing aborted due to exception.', ex, null, false);
            retval = false;
            r = this.parseError(p.errStr, p, this.JisonParserError);
            if (typeof r !== 'undefined') retval = r;
        } finally{
            retval = this.cleanupAfterParse(retval, true, true);
            this.__reentrant_call_depth--;
        } // /finally
        return retval;
    }
};
$510a014853e7284e$var$parser.originalParseError = $510a014853e7284e$var$parser.parseError;
$510a014853e7284e$var$parser.originalQuoteName = $510a014853e7284e$var$parser.quoteName;
/* lexer generated by jison-lex 0.6.1-216 */ /*
 * Returns a Lexer object of the following structure:
 *
 *  Lexer: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a direct reference!
 *
 *               This "shared context" object was passed to the lexer by way of 
 *               the `lexer.setInput(str, yy)` API before you may use it.
 *
 *               This "shared context" object is passed to the lexer action code in `performAction()`
 *               so userland code in the lexer actions may communicate with the outside world 
 *               and/or other lexer rules' actions in more or less complex ways.
 *
 *  }
 *
 *  Lexer.prototype: {
 *    EOF: 1,
 *    ERROR: 2,
 *
 *    yy:        The overall "shared context" object reference.
 *
 *    JisonLexerError: function(msg, hash),
 *
 *    performAction: function lexer__performAction(yy, yyrulenumber, YY_START),
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `lexer` instance. 
 *                               `yy_` is an alias for `this` lexer instance reference used internally.
 *
 *               - `yy`      : a reference to the `yy` "shared state" object which was passed to the lexer
 *                             by way of the `lexer.setInput(str, yy)` API before.
 *
 *                             Note:
 *                             The extra arguments you specified in the `%parse-param` statement in your
 *                             **parser** grammar definition file are passed to the lexer via this object
 *                             reference as member variables.
 *
 *               - `yyrulenumber`   : index of the matched lexer rule (regex), used internally.
 *
 *               - `YY_START`: the current lexer "start condition" state.
 *
 *    parseError: function(str, hash, ExceptionClass),
 *
 *    constructLexErrorInfo: function(error_message, is_recoverable),
 *               Helper function.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this lexer kernel in many places; example usage:
 *
 *                   var infoObj = lexer.constructParseErrorInfo('fail!', true);
 *                   var retVal = lexer.parseError(infoObj.errStr, infoObj, lexer.JisonLexerError);
 *
 *    options: { ... lexer %options ... },
 *
 *    lex: function(),
 *               Produce one token of lexed input, which was passed in earlier via the `lexer.setInput()` API.
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of the **lexer** grammar:
 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
 *
 *               WARNING:
 *               Lexer's additional `args...` parameters (via lexer's `%parse-param`) MAY conflict with
 *               any attributes already added to `yy` by the **parser** or the jison run-time; 
 *               when such a collision is detected an exception is thrown to prevent the generated run-time 
 *               from silently accepting this confusing and potentially hazardous situation! 
 *
 *    cleanupAfterLex: function(do_not_nuke_errorinfos),
 *               Helper function.
 *
 *               This helper API is invoked when the **parse process** has completed: it is the responsibility
 *               of the **parser** (or the calling userland code) to invoke this method once cleanup is desired. 
 *
 *               This helper may be invoked by user code to ensure the internal lexer gets properly garbage collected.
 *
 *    setInput: function(input, [yy]),
 *
 *
 *    input: function(),
 *
 *
 *    unput: function(str),
 *
 *
 *    more: function(),
 *
 *
 *    reject: function(),
 *
 *
 *    less: function(n),
 *
 *
 *    pastInput: function(n),
 *
 *
 *    upcomingInput: function(n),
 *
 *
 *    showPosition: function(),
 *
 *
 *    test_match: function(regex_match_array, rule_index),
 *
 *
 *    next: function(),
 *
 *
 *    begin: function(condition),
 *
 *
 *    pushState: function(condition),
 *
 *
 *    popState: function(),
 *
 *
 *    topState: function(),
 *
 *
 *    _currentRules: function(),
 *
 *
 *    stateStackSize: function(),
 *
 *
 *    performAction: function(yy, yy_, yyrulenumber, YY_START),
 *
 *
 *    rules: [...],
 *
 *
 *    conditions: {associative list: name ==> set},
 *  }
 *
 *
 *  token location info (`yylloc`): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *  }
 *
 * while `this` will reference the current lexer instance.
 *
 * When `parseError` is invoked by the lexer, the default implementation will
 * attempt to invoke `yy.parser.parseError()`; when this callback is not provided
 * it will try to invoke `yy.parseError()` instead. When that callback is also not
 * provided, a `JisonLexerError` exception will be thrown containing the error
 * message and `hash`, as constructed by the `constructLexErrorInfo()` API.
 *
 * Note that the lexer's `JisonLexerError` error class is passed via the
 * `ExceptionClass` argument, which is invoked to construct the exception
 * instance to be thrown, so technically `parseError` will throw the object
 * produced by the `new ExceptionClass(str, hash)` JavaScript expression.
 *
 * ---
 *
 * You can specify lexer options by setting / modifying the `.options` object of your Lexer instance.
 * These options are available:
 *
 * (Options are permanent.)
 *  
 *  yy: {
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *  }
 *
 *  lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 * WARNING: the next set of options are not meant to be changed. They echo the abilities of
 * the lexer as per when it was compiled!
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this %option has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */ var $510a014853e7284e$var$lexer = function() {
    /**
   * See also:
   * http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
   * but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
   * with userland code which might access the derived class in a 'classic' way.
   *
   * @public
   * @constructor
   * @nocollapse
   */ function JisonLexerError(msg, hash) {
        Object.defineProperty(this, 'name', {
            enumerable: false,
            writable: false,
            value: 'JisonLexerError'
        });
        if (msg == null) msg = '???';
        Object.defineProperty(this, 'message', {
            enumerable: false,
            writable: true,
            value: msg
        });
        this.hash = hash;
        var stacktrace;
        if (hash && hash.exception instanceof Error) {
            var ex2 = hash.exception;
            this.message = ex2.message || msg;
            stacktrace = ex2.stack;
        }
        if (!stacktrace) {
            if (Error.hasOwnProperty('captureStackTrace')) // V8
            Error.captureStackTrace(this, this.constructor);
            else stacktrace = new Error(msg).stack;
        }
        if (stacktrace) Object.defineProperty(this, 'stack', {
            enumerable: false,
            writable: false,
            value: stacktrace
        });
    }
    if (typeof Object.setPrototypeOf === 'function') Object.setPrototypeOf(JisonLexerError.prototype, Error.prototype);
    else JisonLexerError.prototype = Object.create(Error.prototype);
    JisonLexerError.prototype.constructor = JisonLexerError;
    JisonLexerError.prototype.name = 'JisonLexerError';
    var lexer = {
        // Code Generator Information Report
        // ---------------------------------
        //
        // Options:
        //
        //   backtracking: .................... false
        //   location.ranges: ................. false
        //   location line+column tracking: ... true
        //
        //
        // Forwarded Parser Analysis flags:
        //
        //   uses yyleng: ..................... false
        //   uses yylineno: ................... false
        //   uses yytext: ..................... false
        //   uses yylloc: ..................... false
        //   uses lexer values: ............... true / true
        //   location tracking: ............... false
        //   location assignment: ............. false
        //
        //
        // Lexer Analysis flags:
        //
        //   uses yyleng: ..................... ???
        //   uses yylineno: ................... ???
        //   uses yytext: ..................... ???
        //   uses yylloc: ..................... ???
        //   uses ParseError API: ............. ???
        //   uses yyerror: .................... ???
        //   uses location tracking & editing:  ???
        //   uses more() API: ................. ???
        //   uses unput() API: ................ ???
        //   uses reject() API: ............... ???
        //   uses less() API: ................. ???
        //   uses display APIs pastInput(), upcomingInput(), showPosition():
        //        ............................. ???
        //   uses describeYYLLOC() API: ....... ???
        //
        // --------- END OF REPORT -----------
        EOF: 1,
        ERROR: 2,
        // JisonLexerError: JisonLexerError,        /// <-- injected by the code generator
        // options: {},                             /// <-- injected by the code generator
        // yy: ...,                                 /// <-- injected by setInput()
        /// INTERNAL USE ONLY: internal rule set cache for the current lexer state
        __currentRuleSet__: null,
        /// INTERNAL USE ONLY: the set of lexErrorInfo objects created since the last cleanup
        __error_infos: [],
        /// INTERNAL USE ONLY: mark whether the lexer instance has been 'unfolded' completely and is now ready for use
        __decompressed: false,
        /// INTERNAL USE ONLY
        done: false,
        /// INTERNAL USE ONLY
        _backtrack: false,
        /// INTERNAL USE ONLY
        _input: '',
        /// INTERNAL USE ONLY
        _more: false,
        /// INTERNAL USE ONLY
        _signaled_error_token: false,
        /// INTERNAL USE ONLY; managed via `pushState()`, `popState()`, `topState()` and `stateStackSize()`
        conditionStack: [],
        /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction. `match` is identical to `yytext` except that this one still contains the matched input string after `lexer.performAction()` has been invoked, where userland code MAY have changed/replaced the `yytext` value entirely!
        match: '',
        /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks entire input which has been matched so far
        matched: '',
        /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks RE match result for last (successful) match attempt
        matches: false,
        /// ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction; this value is transferred to the parser as the 'token value' when the parser consumes the lexer token produced through a call to the `lex()` API.
        yytext: '',
        /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks the 'cursor position' in the input string, i.e. the number of characters matched so far
        offset: 0,
        /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: length of matched input for the token under construction (`yytext`)
        yyleng: 0,
        /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: 'line number' at which the token under construction is located
        yylineno: 0,
        /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks location info (lines + columns) for the token under construction
        yylloc: null,
        /**
     * INTERNAL USE: construct a suitable error info hash object instance for `parseError`.
     * 
     * @public
     * @this {RegExpLexer}
     */ constructLexErrorInfo: function lexer_constructLexErrorInfo(msg, recoverable, show_input_position) {
            msg = '' + msg;
            // heuristic to determine if the error message already contains a (partial) source code dump
            // as produced by either `showPosition()` or `prettyPrintRange()`:
            if (show_input_position == undefined) show_input_position = !(msg.indexOf('\n') > 0 && msg.indexOf('^') > 0);
            if (this.yylloc && show_input_position) {
                if (typeof this.prettyPrintRange === 'function') {
                    var pretty_src = this.prettyPrintRange(this.yylloc);
                    if (!/\n\s*$/.test(msg)) msg += '\n';
                    msg += '\n  Erroneous area:\n' + this.prettyPrintRange(this.yylloc);
                } else if (typeof this.showPosition === 'function') {
                    var pos_str = this.showPosition();
                    if (pos_str) {
                        if (msg.length && msg[msg.length - 1] !== '\n' && pos_str[0] !== '\n') msg += '\n' + pos_str;
                        else msg += pos_str;
                    }
                }
            }
            /** @constructor */ var pei = {
                errStr: msg,
                recoverable: !!recoverable,
                // This one MAY be empty; userland code should use the `upcomingInput` API to obtain more text which follows the 'lexer cursor position'...
                text: this.match,
                token: null,
                line: this.yylineno,
                loc: this.yylloc,
                yy: this.yy,
                lexer: this,
                /**
         * and make sure the error info doesn't stay due to potential
         * ref cycle via userland code manipulations.
         * These would otherwise all be memory leak opportunities!
         * 
         * Note that only array and object references are nuked as those
         * constitute the set of elements which can produce a cyclic ref.
         * The rest of the members is kept intact as they are harmless.
         * 
         * @public
         * @this {LexErrorInfo}
         */ destroy: function destructLexErrorInfo() {
                    // remove cyclic references added to error info:
                    // info.yy = null;
                    // info.lexer = null;
                    // ...
                    var rec = !!this.recoverable;
                    for(var key in this)if (this.hasOwnProperty(key) && typeof key === 'object') this[key] = undefined;
                    this.recoverable = rec;
                }
            };
            // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
            this.__error_infos.push(pei);
            return pei;
        },
        /**
     * handler which is invoked when a lexer error occurs.
     * 
     * @public
     * @this {RegExpLexer}
     */ parseError: function lexer_parseError(str, hash, ExceptionClass) {
            if (!ExceptionClass) ExceptionClass = this.JisonLexerError;
            if (this.yy) {
                if (this.yy.parser && typeof this.yy.parser.parseError === 'function') return this.yy.parser.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;
                else if (typeof this.yy.parseError === 'function') return this.yy.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;
            }
            throw new ExceptionClass(str, hash);
        },
        /**
     * method which implements `yyerror(str, ...args)` functionality for use inside lexer actions.
     * 
     * @public
     * @this {RegExpLexer}
     */ yyerror: function yyError(str /*, ...args */ ) {
            var lineno_msg = '';
            if (this.yylloc) lineno_msg = ' on line ' + (this.yylineno + 1);
            var p = this.constructLexErrorInfo('Lexical error' + lineno_msg + ': ' + str, this.options.lexerErrorsAreRecoverable);
            // Add any extra args to the hash under the name `extra_error_attributes`:
            var args = Array.prototype.slice.call(arguments, 1);
            if (args.length) p.extra_error_attributes = args;
            return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
        },
        /**
     * final cleanup function for when we have completed lexing the input;
     * make it an API so that external code can use this one once userland
     * code has decided it's time to destroy any lingering lexer error
     * hash object instances and the like: this function helps to clean
     * up these constructs, which *may* carry cyclic references which would
     * otherwise prevent the instances from being properly and timely
     * garbage-collected, i.e. this function helps prevent memory leaks!
     * 
     * @public
     * @this {RegExpLexer}
     */ cleanupAfterLex: function lexer_cleanupAfterLex(do_not_nuke_errorinfos) {
            // prevent lingering circular references from causing memory leaks:
            this.setInput('', {
            });
            // nuke the error hash info instances created during this run.
            // Userland code must COPY any data/references
            // in the error hash instance(s) it is more permanently interested in.
            if (!do_not_nuke_errorinfos) {
                for(var i = this.__error_infos.length - 1; i >= 0; i--){
                    var el = this.__error_infos[i];
                    if (el && typeof el.destroy === 'function') el.destroy();
                }
                this.__error_infos.length = 0;
            }
            return this;
        },
        /**
     * clear the lexer token context; intended for internal use only
     * 
     * @public
     * @this {RegExpLexer}
     */ clear: function lexer_clear() {
            this.yytext = '';
            this.yyleng = 0;
            this.match = '';
            // - DO NOT reset `this.matched`
            this.matches = false;
            this._more = false;
            this._backtrack = false;
            var col = this.yylloc ? this.yylloc.last_column : 0;
            this.yylloc = {
                first_line: this.yylineno + 1,
                first_column: col,
                last_line: this.yylineno + 1,
                last_column: col,
                range: [
                    this.offset,
                    this.offset
                ]
            };
        },
        /**
     * resets the lexer, sets new input
     * 
     * @public
     * @this {RegExpLexer}
     */ setInput: function lexer_setInput(input, yy) {
            this.yy = yy || this.yy || {
            };
            // also check if we've fully initialized the lexer instance,
            // including expansion work to be done to go from a loaded
            // lexer to a usable lexer:
            if (!this.__decompressed) {
                // step 1: decompress the regex list:
                var rules = this.rules;
                for(var i = 0, len = rules.length; i < len; i++){
                    var rule_re = rules[i];
                    // compression: is the RE an xref to another RE slot in the rules[] table?
                    if (typeof rule_re === 'number') rules[i] = rules[rule_re];
                }
                // step 2: unfold the conditions[] set to make these ready for use:
                var conditions = this.conditions;
                for(var k in conditions){
                    var spec = conditions[k];
                    var rule_ids = spec.rules;
                    var len = rule_ids.length;
                    var rule_regexes = new Array(len + 1); // slot 0 is unused; we use a 1-based index approach here to keep the hottest code in `lexer_next()` fast and simple!
                    var rule_new_ids = new Array(len + 1);
                    for(var i = 0; i < len; i++){
                        var idx = rule_ids[i];
                        var rule_re = rules[idx];
                        rule_regexes[i + 1] = rule_re;
                        rule_new_ids[i + 1] = idx;
                    }
                    spec.rules = rule_new_ids;
                    spec.__rule_regexes = rule_regexes;
                    spec.__rule_count = len;
                }
                this.__decompressed = true;
            }
            this._input = input || '';
            this.clear();
            this._signaled_error_token = false;
            this.done = false;
            this.yylineno = 0;
            this.matched = '';
            this.conditionStack = [
                'INITIAL'
            ];
            this.__currentRuleSet__ = null;
            this.yylloc = {
                first_line: 1,
                first_column: 0,
                last_line: 1,
                last_column: 0,
                range: [
                    0,
                    0
                ]
            };
            this.offset = 0;
            return this;
        },
        /**
     * edit the remaining input via user-specified callback.
     * This can be used to forward-adjust the input-to-parse, 
     * e.g. inserting macro expansions and alike in the
     * input which has yet to be lexed.
     * The behaviour of this API contrasts the `unput()` et al
     * APIs as those act on the *consumed* input, while this
     * one allows one to manipulate the future, without impacting
     * the current `yyloc` cursor location or any history. 
     * 
     * Use this API to help implement C-preprocessor-like
     * `#include` statements, etc.
     * 
     * The provided callback must be synchronous and is
     * expected to return the edited input (string).
     *
     * The `cpsArg` argument value is passed to the callback
     * as-is.
     *
     * `callback` interface: 
     * `function callback(input, cpsArg)`
     * 
     * - `input` will carry the remaining-input-to-lex string
     *   from the lexer.
     * - `cpsArg` is `cpsArg` passed into this API.
     * 
     * The `this` reference for the callback will be set to
     * reference this lexer instance so that userland code
     * in the callback can easily and quickly access any lexer
     * API. 
     *
     * When the callback returns a non-string-type falsey value,
     * we assume the callback did not edit the input and we
     * will using the input as-is.
     *
     * When the callback returns a non-string-type value, it
     * is converted to a string for lexing via the `"" + retval`
     * operation. (See also why: http://2ality.com/2012/03/converting-to-string.html 
     * -- that way any returned object's `toValue()` and `toString()`
     * methods will be invoked in a proper/desirable order.)
     * 
     * @public
     * @this {RegExpLexer}
     */ editRemainingInput: function lexer_editRemainingInput(callback, cpsArg) {
            var rv = callback.call(this, this._input, cpsArg);
            if (typeof rv !== 'string') {
                if (rv) this._input = '' + rv;
            } else this._input = rv;
            return this;
        },
        /**
     * consumes and returns one char from the input
     * 
     * @public
     * @this {RegExpLexer}
     */ input: function lexer_input() {
            if (!this._input) //this.done = true;    -- don't set `done` as we want the lex()/next() API to be able to produce one custom EOF token match after this anyhow. (lexer can match special <<EOF>> tokens and perform user action code for a <<EOF>> match, but only does so *once*)
            return null;
            var ch = this._input[0];
            this.yytext += ch;
            this.yyleng++;
            this.offset++;
            this.match += ch;
            this.matched += ch;
            // Count the linenumber up when we hit the LF (or a stand-alone CR).
            // On CRLF, the linenumber is incremented when you fetch the CR or the CRLF combo
            // and we advance immediately past the LF as well, returning both together as if
            // it was all a single 'character' only.
            var slice_len = 1;
            var lines = false;
            if (ch === '\n') lines = true;
            else if (ch === '\r') {
                lines = true;
                var ch2 = this._input[1];
                if (ch2 === '\n') {
                    slice_len++;
                    ch += ch2;
                    this.yytext += ch2;
                    this.yyleng++;
                    this.offset++;
                    this.match += ch2;
                    this.matched += ch2;
                    this.yylloc.range[1]++;
                }
            }
            if (lines) {
                this.yylineno++;
                this.yylloc.last_line++;
                this.yylloc.last_column = 0;
            } else this.yylloc.last_column++;
            this.yylloc.range[1]++;
            this._input = this._input.slice(slice_len);
            return ch;
        },
        /**
     * unshifts one char (or an entire string) into the input
     * 
     * @public
     * @this {RegExpLexer}
     */ unput: function lexer_unput(ch) {
            var len = ch.length;
            var lines = ch.split(/(?:\r\n?|\n)/g);
            this._input = ch + this._input;
            this.yytext = this.yytext.substr(0, this.yytext.length - len);
            this.yyleng = this.yytext.length;
            this.offset -= len;
            this.match = this.match.substr(0, this.match.length - len);
            this.matched = this.matched.substr(0, this.matched.length - len);
            if (lines.length > 1) {
                this.yylineno -= lines.length - 1;
                this.yylloc.last_line = this.yylineno + 1;
                // Get last entirely matched line into the `pre_lines[]` array's
                // last index slot; we don't mind when other previously 
                // matched lines end up in the array too. 
                var pre = this.match;
                var pre_lines = pre.split(/(?:\r\n?|\n)/g);
                if (pre_lines.length === 1) {
                    pre = this.matched;
                    pre_lines = pre.split(/(?:\r\n?|\n)/g);
                }
                this.yylloc.last_column = pre_lines[pre_lines.length - 1].length;
            } else this.yylloc.last_column -= len;
            this.yylloc.range[1] = this.yylloc.range[0] + this.yyleng;
            this.done = false;
            return this;
        },
        /**
     * cache matched text and append it on next action
     * 
     * @public
     * @this {RegExpLexer}
     */ more: function lexer_more() {
            this._more = true;
            return this;
        },
        /**
     * signal the lexer that this rule fails to match the input, so the
     * next matching rule (regex) should be tested instead.
     * 
     * @public
     * @this {RegExpLexer}
     */ reject: function lexer_reject() {
            if (this.options.backtrack_lexer) this._backtrack = true;
            else {
                // when the `parseError()` call returns, we MUST ensure that the error is registered.
                // We accomplish this by signaling an 'error' token to be produced for the current
                // `.lex()` run.
                var lineno_msg = '';
                if (this.yylloc) lineno_msg = ' on line ' + (this.yylineno + 1);
                var p = this.constructLexErrorInfo('Lexical error' + lineno_msg + ': You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).', false);
                this._signaled_error_token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
            }
            return this;
        },
        /**
     * retain first n characters of the match
     * 
     * @public
     * @this {RegExpLexer}
     */ less: function lexer_less(n) {
            return this.unput(this.match.slice(n));
        },
        /**
     * return (part of the) already matched input, i.e. for error
     * messages.
     * 
     * Limit the returned string length to `maxSize` (default: 20).
     * 
     * Limit the returned string to the `maxLines` number of lines of
     * input (default: 1).
     * 
     * Negative limit values equal *unlimited*.
     * 
     * @public
     * @this {RegExpLexer}
     */ pastInput: function lexer_pastInput(maxSize, maxLines) {
            var past = this.matched.substring(0, this.matched.length - this.match.length);
            if (maxSize < 0) maxSize = past.length;
            else if (!maxSize) maxSize = 20;
            if (maxLines < 0) maxLines = past.length; // can't ever have more input lines than this!;
            else if (!maxLines) maxLines = 1;
            // `substr` anticipation: treat \r\n as a single character and take a little
            // more than necessary so that we can still properly check against maxSize
            // after we've transformed and limited the newLines in here:
            past = past.substr(-maxSize * 2 - 2);
            // now that we have a significantly reduced string to process, transform the newlines
            // and chop them, then limit them:
            var a = past.replace(/\r\n|\r/g, '\n').split('\n');
            a = a.slice(-maxLines);
            past = a.join('\n');
            // When, after limiting to maxLines, we still have too much to return,
            // do add an ellipsis prefix...
            if (past.length > maxSize) past = '...' + past.substr(-maxSize);
            return past;
        },
        /**
     * return (part of the) upcoming input, i.e. for error messages.
     * 
     * Limit the returned string length to `maxSize` (default: 20).
     * 
     * Limit the returned string to the `maxLines` number of lines of input (default: 1).
     * 
     * Negative limit values equal *unlimited*.
     *
     * > ### NOTE ###
     * >
     * > *"upcoming input"* is defined as the whole of the both
     * > the *currently lexed* input, together with any remaining input
     * > following that. *"currently lexed"* input is the input 
     * > already recognized by the lexer but not yet returned with
     * > the lexer token. This happens when you are invoking this API
     * > from inside any lexer rule action code block. 
     * >
     * 
     * @public
     * @this {RegExpLexer}
     */ upcomingInput: function lexer_upcomingInput(maxSize, maxLines) {
            var next = this.match;
            if (maxSize < 0) maxSize = next.length + this._input.length;
            else if (!maxSize) maxSize = 20;
            if (maxLines < 0) maxLines = maxSize; // can't ever have more input lines than this!;
            else if (!maxLines) maxLines = 1;
            // `substring` anticipation: treat \r\n as a single character and take a little
            // more than necessary so that we can still properly check against maxSize
            // after we've transformed and limited the newLines in here:
            if (next.length < maxSize * 2 + 2) next += this._input.substring(0, maxSize * 2 + 2); // substring is faster on Chrome/V8
            // now that we have a significantly reduced string to process, transform the newlines
            // and chop them, then limit them:
            var a = next.replace(/\r\n|\r/g, '\n').split('\n');
            a = a.slice(0, maxLines);
            next = a.join('\n');
            // When, after limiting to maxLines, we still have too much to return,
            // do add an ellipsis postfix...
            if (next.length > maxSize) next = next.substring(0, maxSize) + '...';
            return next;
        },
        /**
     * return a string which displays the character position where the
     * lexing error occurred, i.e. for error messages
     * 
     * @public
     * @this {RegExpLexer}
     */ showPosition: function lexer_showPosition(maxPrefix, maxPostfix) {
            var pre = this.pastInput(maxPrefix).replace(/\s/g, ' ');
            var c = new Array(pre.length + 1).join('-');
            return pre + this.upcomingInput(maxPostfix).replace(/\s/g, ' ') + '\n' + c + '^';
        },
        /**
     * return an YYLLOC info object derived off the given context (actual, preceding, following, current).
     * Use this method when the given `actual` location is not guaranteed to exist (i.e. when
     * it MAY be NULL) and you MUST have a valid location info object anyway:
     * then we take the given context of the `preceding` and `following` locations, IFF those are available,
     * and reconstruct the `actual` location info from those.
     * If this fails, the heuristic is to take the `current` location, IFF available.
     * If this fails as well, we assume the sought location is at/around the current lexer position
     * and then produce that one as a response. DO NOTE that these heuristic/derived location info
     * values MAY be inaccurate!
     *
     * NOTE: `deriveLocationInfo()` ALWAYS produces a location info object *copy* of `actual`, not just
     * a *reference* hence all input location objects can be assumed to be 'constant' (function has no side-effects).
     * 
     * @public
     * @this {RegExpLexer}
     */ deriveLocationInfo: function lexer_deriveYYLLOC(actual, preceding, following, current) {
            var loc = {
                first_line: 1,
                first_column: 0,
                last_line: 1,
                last_column: 0,
                range: [
                    0,
                    0
                ]
            };
            if (actual) {
                loc.first_line = actual.first_line | 0;
                loc.last_line = actual.last_line | 0;
                loc.first_column = actual.first_column | 0;
                loc.last_column = actual.last_column | 0;
                if (actual.range) {
                    loc.range[0] = actual.range[0] | 0;
                    loc.range[1] = actual.range[1] | 0;
                }
            }
            if (loc.first_line <= 0 || loc.last_line < loc.first_line) {
                // plan B: heuristic using preceding and following:
                if (loc.first_line <= 0 && preceding) {
                    loc.first_line = preceding.last_line | 0;
                    loc.first_column = preceding.last_column | 0;
                    if (preceding.range) loc.range[0] = actual.range[1] | 0;
                }
                if ((loc.last_line <= 0 || loc.last_line < loc.first_line) && following) {
                    loc.last_line = following.first_line | 0;
                    loc.last_column = following.first_column | 0;
                    if (following.range) loc.range[1] = actual.range[0] | 0;
                }
                // plan C?: see if the 'current' location is useful/sane too:
                if (loc.first_line <= 0 && current && (loc.last_line <= 0 || current.last_line <= loc.last_line)) {
                    loc.first_line = current.first_line | 0;
                    loc.first_column = current.first_column | 0;
                    if (current.range) loc.range[0] = current.range[0] | 0;
                }
                if (loc.last_line <= 0 && current && (loc.first_line <= 0 || current.first_line >= loc.first_line)) {
                    loc.last_line = current.last_line | 0;
                    loc.last_column = current.last_column | 0;
                    if (current.range) loc.range[1] = current.range[1] | 0;
                }
            }
            // sanitize: fix last_line BEFORE we fix first_line as we use the 'raw' value of the latter
            // or plan D heuristics to produce a 'sensible' last_line value:
            if (loc.last_line <= 0) {
                if (loc.first_line <= 0) {
                    loc.first_line = this.yylloc.first_line;
                    loc.last_line = this.yylloc.last_line;
                    loc.first_column = this.yylloc.first_column;
                    loc.last_column = this.yylloc.last_column;
                    loc.range[0] = this.yylloc.range[0];
                    loc.range[1] = this.yylloc.range[1];
                } else {
                    loc.last_line = this.yylloc.last_line;
                    loc.last_column = this.yylloc.last_column;
                    loc.range[1] = this.yylloc.range[1];
                }
            }
            if (loc.first_line <= 0) {
                loc.first_line = loc.last_line;
                loc.first_column = 0; // loc.last_column;
                loc.range[1] = loc.range[0];
            }
            if (loc.first_column < 0) loc.first_column = 0;
            if (loc.last_column < 0) loc.last_column = loc.first_column > 0 ? loc.first_column : 80;
            return loc;
        },
        /**
     * return a string which displays the lines & columns of input which are referenced 
     * by the given location info range, plus a few lines of context.
     * 
     * This function pretty-prints the indicated section of the input, with line numbers 
     * and everything!
     * 
     * This function is very useful to provide highly readable error reports, while
     * the location range may be specified in various flexible ways:
     * 
     * - `loc` is the location info object which references the area which should be
     *   displayed and 'marked up': these lines & columns of text are marked up by `^`
     *   characters below each character in the entire input range.
     * 
     * - `context_loc` is the *optional* location info object which instructs this
     *   pretty-printer how much *leading* context should be displayed alongside
     *   the area referenced by `loc`. This can help provide context for the displayed
     *   error, etc.
     * 
     *   When this location info is not provided, a default context of 3 lines is
     *   used.
     * 
     * - `context_loc2` is another *optional* location info object, which serves
     *   a similar purpose to `context_loc`: it specifies the amount of *trailing*
     *   context lines to display in the pretty-print output.
     * 
     *   When this location info is not provided, a default context of 1 line only is
     *   used.
     * 
     * Special Notes:
     * 
     * - when the `loc`-indicated range is very large (about 5 lines or more), then
     *   only the first and last few lines of this block are printed while a
     *   `...continued...` message will be printed between them.
     * 
     *   This serves the purpose of not printing a huge amount of text when the `loc`
     *   range happens to be huge: this way a manageable & readable output results
     *   for arbitrary large ranges.
     * 
     * - this function can display lines of input which whave not yet been lexed.
     *   `prettyPrintRange()` can access the entire input!
     * 
     * @public
     * @this {RegExpLexer}
     */ prettyPrintRange: function lexer_prettyPrintRange(loc, context_loc, context_loc2) {
            loc = this.deriveLocationInfo(loc, context_loc, context_loc2);
            const CONTEXT = 3;
            const CONTEXT_TAIL = 1;
            const MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT = 2;
            var input = this.matched + this._input;
            var lines = input.split('\n');
            var l0 = Math.max(1, context_loc ? context_loc.first_line : loc.first_line - CONTEXT);
            var l1 = Math.max(1, context_loc2 ? context_loc2.last_line : loc.last_line + CONTEXT_TAIL);
            var lineno_display_width = 1 + Math.log10(l1 | 1) | 0;
            var ws_prefix = new Array(lineno_display_width).join(' ');
            var nonempty_line_indexes = [
                [],
                [],
                []
            ];
            var rv1 = lines.slice(l0 - 1, l1 + 1).map(function injectLineNumber(line, index) {
                var lno = index + l0;
                var lno_pfx = (ws_prefix + lno).substr(-lineno_display_width);
                var rv = lno_pfx + ': ' + line;
                var errpfx = new Array(lineno_display_width + 1).join('^');
                var offset = 3;
                var len = 0;
                if (lno === loc.first_line) {
                    offset += loc.first_column;
                    len = Math.max(2, (lno === loc.last_line ? loc.last_column : line.length) - loc.first_column + 1);
                } else if (lno === loc.last_line) len = Math.max(2, loc.last_column + 1);
                else if (lno > loc.first_line && lno < loc.last_line) len = Math.max(2, line.length + 1);
                var nli;
                if (len) {
                    var lead = new Array(offset).join('.');
                    var mark = new Array(len).join('^');
                    rv += '\n' + errpfx + lead + mark;
                    nli = 1;
                } else if (lno < loc.first_line) nli = 0;
                else if (lno > loc.last_line) nli = 2;
                if (line.trim().length > 0) nonempty_line_indexes[nli].push(index);
                rv = rv.replace(/\t/g, ' ');
                return rv;
            });
            // now make sure we don't print an overly large amount of lead/error/tail area: limit it 
            // to the top and bottom line count:
            for(var i = 0; i <= 2; i++){
                var line_arr = nonempty_line_indexes[i];
                if (line_arr.length > 2 * MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT) {
                    var clip_start = line_arr[MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT - 1] + 1;
                    var clip_end = line_arr[line_arr.length - MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT] - 1;
                    var intermediate_line = new Array(lineno_display_width + 1).join(' ') + '  (...continued...)';
                    if (i === 1) intermediate_line += '\n' + new Array(lineno_display_width + 1).join('-') + '  (---------------)';
                    rv1.splice(clip_start, clip_end - clip_start + 1, intermediate_line);
                }
            }
            return rv1.join('\n');
        },
        /**
     * helper function, used to produce a human readable description as a string, given
     * the input `yylloc` location object.
     * 
     * Set `display_range_too` to TRUE to include the string character index position(s)
     * in the description if the `yylloc.range` is available.
     * 
     * @public
     * @this {RegExpLexer}
     */ describeYYLLOC: function lexer_describe_yylloc(yylloc, display_range_too) {
            var l1 = yylloc.first_line;
            var l2 = yylloc.last_line;
            var c1 = yylloc.first_column;
            var c2 = yylloc.last_column;
            var dl = l2 - l1;
            var dc = c2 - c1;
            var rv;
            if (dl === 0) {
                rv = 'line ' + l1 + ', ';
                if (dc <= 1) rv += 'column ' + c1;
                else rv += 'columns ' + c1 + ' .. ' + c2;
            } else rv = 'lines ' + l1 + '(column ' + c1 + ') .. ' + l2 + '(column ' + c2 + ')';
            if (yylloc.range && display_range_too) {
                var r1 = yylloc.range[0];
                var r2 = yylloc.range[1] - 1;
                if (r2 <= r1) rv += ' {String Offset: ' + r1 + '}';
                else rv += ' {String Offset range: ' + r1 + ' .. ' + r2 + '}';
            }
            return rv;
        },
        /**
     * test the lexed token: return FALSE when not a match, otherwise return token.
     * 
     * `match` is supposed to be an array coming out of a regex match, i.e. `match[0]`
     * contains the actually matched text string.
     * 
     * Also move the input cursor forward and update the match collectors:
     * 
     * - `yytext`
     * - `yyleng`
     * - `match`
     * - `matches`
     * - `yylloc`
     * - `offset`
     * 
     * @public
     * @this {RegExpLexer}
     */ test_match: function lexer_test_match(match, indexed_rule) {
            var token, lines, backup, match_str, match_str_len;
            if (this.options.backtrack_lexer) // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylloc.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column,
                    range: this.yylloc.range.slice(0)
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                //_signaled_error_token: this._signaled_error_token,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            match_str = match[0];
            match_str_len = match_str.length;
            // if (match_str.indexOf('\n') !== -1 || match_str.indexOf('\r') !== -1) {
            lines = match_str.split(/(?:\r\n?|\n)/g);
            if (lines.length > 1) {
                this.yylineno += lines.length - 1;
                this.yylloc.last_line = this.yylineno + 1;
                this.yylloc.last_column = lines[lines.length - 1].length;
            } else this.yylloc.last_column += match_str_len;
            // }
            this.yytext += match_str;
            this.match += match_str;
            this.matched += match_str;
            this.matches = match;
            this.yyleng = this.yytext.length;
            this.yylloc.range[1] += match_str_len;
            // previous lex rules MAY have invoked the `more()` API rather than producing a token:
            // those rules will already have moved this `offset` forward matching their match lengths,
            // hence we must only add our own match length now:
            this.offset += match_str_len;
            this._more = false;
            this._backtrack = false;
            this._input = this._input.slice(match_str_len);
            // calling this method:
            //
            //   function lexer__performAction(yy, yyrulenumber, YY_START) {...}
            token = this.performAction.call(this, this.yy, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
            // otherwise, when the action codes are all simple return token statements:
            //token = this.simpleCaseActionClusters[indexed_rule];
            if (this.done && this._input) this.done = false;
            if (token) return token;
            else if (this._backtrack) {
                // recover context
                for(var k in backup)this[k] = backup[k];
                this.__currentRuleSet__ = null;
                return false; // rule action called reject() implying the next rule should be tested instead.
            } else if (this._signaled_error_token) {
                // produce one 'error' token as `.parseError()` in `reject()`
                // did not guarantee a failure signal by throwing an exception!
                token = this._signaled_error_token;
                this._signaled_error_token = false;
                return token;
            }
            return false;
        },
        /**
     * return next match in input
     * 
     * @public
     * @this {RegExpLexer}
     */ next: function lexer_next() {
            if (this.done) {
                this.clear();
                return this.EOF;
            }
            if (!this._input) this.done = true;
            var token, match, tempMatch, index;
            if (!this._more) this.clear();
            var spec = this.__currentRuleSet__;
            if (!spec) {
                // Update the ruleset cache as we apparently encountered a state change or just started lexing.
                // The cache is set up for fast lookup -- we assume a lexer will switch states much less often than it will
                // invoke the `lex()` token-producing API and related APIs, hence caching the set for direct access helps
                // speed up those activities a tiny bit.
                spec = this.__currentRuleSet__ = this._currentRules();
                // Check whether a *sane* condition has been pushed before: this makes the lexer robust against
                // user-programmer bugs such as https://github.com/zaach/jison-lex/issues/19
                if (!spec || !spec.rules) {
                    var lineno_msg = '';
                    if (this.options.trackPosition) lineno_msg = ' on line ' + (this.yylineno + 1);
                    var p = this.constructLexErrorInfo('Internal lexer engine error' + lineno_msg + ': The lex grammar programmer pushed a non-existing condition name "' + this.topState() + '"; this is a fatal error and should be reported to the application programmer team!', false);
                    // produce one 'error' token until this situation has been resolved, most probably by parse termination!
                    return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
                }
            }
            var rule_ids = spec.rules;
            var regexes = spec.__rule_regexes;
            var len = spec.__rule_count;
            // Note: the arrays are 1-based, while `len` itself is a valid index,
            // hence the non-standard less-or-equal check in the next loop condition!
            for(var i = 1; i <= len; i++){
                tempMatch = this._input.match(regexes[i]);
                if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                    match = tempMatch;
                    index = i;
                    if (this.options.backtrack_lexer) {
                        token = this.test_match(tempMatch, rule_ids[i]);
                        if (token !== false) return token;
                        else if (this._backtrack) {
                            match = undefined;
                            continue; // rule action called reject() implying a rule MISmatch.
                        } else // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    } else if (!this.options.flex) break;
                }
            }
            if (match) {
                token = this.test_match(match, rule_ids[index]);
                if (token !== false) return token;
                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                return false;
            }
            if (!this._input) {
                this.done = true;
                this.clear();
                return this.EOF;
            } else {
                var lineno_msg = '';
                if (this.options.trackPosition) lineno_msg = ' on line ' + (this.yylineno + 1);
                var p = this.constructLexErrorInfo('Lexical error' + lineno_msg + ': Unrecognized text.', this.options.lexerErrorsAreRecoverable);
                var pendingInput = this._input;
                var activeCondition = this.topState();
                var conditionStackDepth = this.conditionStack.length;
                token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
                if (token === this.ERROR) // we can try to recover from a lexer error that `parseError()` did not 'recover' for us
                // by moving forward at least one character at a time IFF the (user-specified?) `parseError()`
                // has not consumed/modified any pending input or changed state in the error handler:
                {
                    if (!this.matches && pendingInput === this._input && // to merit a non-consuming error handling action right now.
                    activeCondition === this.topState() && conditionStackDepth === this.conditionStack.length) this.input();
                }
                return token;
            }
        },
        /**
     * return next match that has a token
     * 
     * @public
     * @this {RegExpLexer}
     */ lex: function lexer_lex() {
            var r;
            // allow the PRE/POST handlers set/modify the return token for maximum flexibility of the generated lexer:
            if (typeof this.pre_lex === 'function') r = this.pre_lex.call(this, 0);
            if (typeof this.options.pre_lex === 'function') // (also account for a userdef function which does not return any value: keep the token as is)
            r = this.options.pre_lex.call(this, r) || r;
            if (this.yy && typeof this.yy.pre_lex === 'function') // (also account for a userdef function which does not return any value: keep the token as is)
            r = this.yy.pre_lex.call(this, r) || r;
            while(!r)r = this.next();
            if (this.yy && typeof this.yy.post_lex === 'function') // (also account for a userdef function which does not return any value: keep the token as is)
            r = this.yy.post_lex.call(this, r) || r;
            if (typeof this.options.post_lex === 'function') // (also account for a userdef function which does not return any value: keep the token as is)
            r = this.options.post_lex.call(this, r) || r;
            if (typeof this.post_lex === 'function') // (also account for a userdef function which does not return any value: keep the token as is)
            r = this.post_lex.call(this, r) || r;
            return r;
        },
        /**
     * return next match that has a token. Identical to the `lex()` API but does not invoke any of the 
     * `pre_lex()` nor any of the `post_lex()` callbacks.
     * 
     * @public
     * @this {RegExpLexer}
     */ fastLex: function lexer_fastLex() {
            var r;
            while(!r)r = this.next();
            return r;
        },
        /**
     * return info about the lexer state that can help a parser or other lexer API user to use the
     * most efficient means available. This API is provided to aid run-time performance for larger
     * systems which employ this lexer.
     * 
     * @public
     * @this {RegExpLexer}
     */ canIUse: function lexer_canIUse() {
            var rv = {
                fastLex: !(typeof this.pre_lex === 'function' || typeof this.options.pre_lex === 'function' || this.yy && typeof this.yy.pre_lex === 'function' || this.yy && typeof this.yy.post_lex === 'function' || typeof this.options.post_lex === 'function' || typeof this.post_lex === 'function') && typeof this.fastLex === 'function'
            };
            return rv;
        },
        /**
     * backwards compatible alias for `pushState()`;
     * the latter is symmetrical with `popState()` and we advise to use
     * those APIs in any modern lexer code, rather than `begin()`.
     * 
     * @public
     * @this {RegExpLexer}
     */ begin: function lexer_begin(condition) {
            return this.pushState(condition);
        },
        /**
     * activates a new lexer condition state (pushes the new lexer
     * condition state onto the condition stack)
     * 
     * @public
     * @this {RegExpLexer}
     */ pushState: function lexer_pushState(condition) {
            this.conditionStack.push(condition);
            this.__currentRuleSet__ = null;
            return this;
        },
        /**
     * pop the previously active lexer condition state off the condition
     * stack
     * 
     * @public
     * @this {RegExpLexer}
     */ popState: function lexer_popState() {
            var n = this.conditionStack.length - 1;
            if (n > 0) {
                this.__currentRuleSet__ = null;
                return this.conditionStack.pop();
            } else return this.conditionStack[0];
        },
        /**
     * return the currently active lexer condition state; when an index
     * argument is provided it produces the N-th previous condition state,
     * if available
     * 
     * @public
     * @this {RegExpLexer}
     */ topState: function lexer_topState(n) {
            n = this.conditionStack.length - 1 - Math.abs(n || 0);
            if (n >= 0) return this.conditionStack[n];
            else return 'INITIAL';
        },
        /**
     * (internal) determine the lexer rule set which is active for the
     * currently active lexer condition state
     * 
     * @public
     * @this {RegExpLexer}
     */ _currentRules: function lexer__currentRules() {
            if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) return this.conditions[this.conditionStack[this.conditionStack.length - 1]];
            else return this.conditions['INITIAL'];
        },
        /**
     * return the number of states currently on the stack
     * 
     * @public
     * @this {RegExpLexer}
     */ stateStackSize: function lexer_stateStackSize() {
            return this.conditionStack.length;
        },
        options: {
            trackPosition: true
        },
        JisonLexerError: JisonLexerError,
        performAction: function lexer__performAction(yy, yyrulenumber, YY_START) {
            var yy_ = this;
            var YYSTATE = YY_START;
            switch(yyrulenumber){
                case 1:
                    /*! Conditions:: INITIAL */ /*! Rule::       \.\.\.\w+ */ $510a014853e7284e$var$debug('spread');
                    return 5;
                case 3:
                    /*! Conditions:: INITIAL */ /*! Rule::       \s*[^= ,]+ */ this.pushState('AFTER_NAME');
                    return 3;
                case 4:
                    /*! Conditions:: AFTER_NAME */ /*! Rule::       \s*=\s* */ this.popState();
                    this.pushState('AFTER_EQ');
                    return 4;
                case 5:
                    /*! Conditions:: AFTER_EQ */ /*! Rule::       \[[^\]]+\] */ this.popState();
                    return 6;
                case 6:
                    /*! Conditions:: AFTER_EQ */ /*! Rule::       \{[^\}]+\} */ this.popState();
                    return 6;
                case 7:
                    /*! Conditions:: AFTER_EQ */ /*! Rule::       "[^"]+" */ this.popState();
                    return 6;
                case 8:
                    /*! Conditions:: AFTER_EQ */ /*! Rule::       '([^']|\\')+'\s*$ */ this.popState();
                    this.pushState('VARS');
                    return 7;
                case 9:
                    /*! Conditions:: AFTER_EQ */ /*! Rule::       '([^']|\\')+' */ this.popState();
                    this.pushState('VARS');
                    return 7;
                case 10:
                    /*! Conditions:: AFTER_EQ */ /*! Rule::       \w+\(\) */ this.popState();
                    return 6;
                case 11:
                    /*! Conditions:: AFTER_EQ */ /*! Rule::       [^=]+=(?!>) */ $510a014853e7284e$var$debug('<AFTER_EQ>[^=]+\'=\'');
                    $510a014853e7284e$var$debug('1 yy_.yytext=', yy_.yytext);
                    const lastSepIndex = $510a014853e7284e$var$findLastSeparatorIndex(yy_.yytext);
                    $510a014853e7284e$var$debug('lastSepIndex=', lastSepIndex);
                    $510a014853e7284e$var$debug('yy_.yytext.length=', yy_.yytext.length);
                    const nextToken = yy_.yytext.substring(lastSepIndex);
                    $510a014853e7284e$var$debug('nextToken=', nextToken);
                    this.unput(nextToken);
                    yy_.yytext = yy_.yytext.substring(0, lastSepIndex);
                    yy_.yytext = yy_.yytext.removeFromEnd(' ');
                    yy_.yytext = yy_.yytext.removeFromEnd(',');
                    $510a014853e7284e$var$debug('2 yy_.yytext=' + yy_.yytext);
                    // debug('this.matches=', this.matches)
                    // if (yy_.yytext.includes('=')) {
                    //   debug('"=" was found')
                    //   // oh, great
                    //   // TODO:
                    // }
                    // else {
                    //   debug('"=" NOT found')
                    // }
                    this.popState();
                    this.popState();
                    return 6;
                case 12:
                    /*! Conditions:: VARS */ /*! Rule::       \s*\+\s*\w+ */ return [
                        'VAR',
                        'PLUS'
                    ];
                case 13:
                    /*! Conditions:: VARS */ /*! Rule::       ,\s* */ this.popState();
                    return 10;
                case 14:
                    /*! Conditions:: VARS */ /*! Rule::       {space} */ this.popState();
                    return 9;
                case 15:
                    /*! Conditions:: AFTER_EQ */ /*! Rule::       .+ */ // id=id
                    this.popState();
                    return 6;
                case 16:
                    /*! Conditions:: AFTER_NAME */ /*! Rule::       ,{space}* */ $510a014853e7284e$var$debug('<AFTER_NAME>\',\'');
                    this.popState();
                    return 10;
                case 17:
                    /*! Conditions:: AFTER_NAME */ /*! Rule::       {space} */ $510a014853e7284e$var$debug('<AFTER_NAME>{space}');
                    this.popState();
                    return 9;
                default:
                    return this.simpleCaseActionClusters[yyrulenumber];
            }
        },
        simpleCaseActionClusters: {
            /*! Conditions:: INITIAL */ /*! Rule::       ,\s* */ 0: 10,
            /*! Conditions:: INITIAL */ /*! Rule::       {space} */ 2: 9
        },
        rules: [
            /*  0: */ /^(?:,\s*)/,
            /*  1: */ /^(?:\.\.\.\w+)/,
            /*  2: */ /^(?:([   -​\u2028\u2029　]))/,
            /*  3: */ /^(?:\s*[^= ,]+)/,
            /*  4: */ /^(?:\s*=\s*)/,
            /*  5: */ /^(?:\[[^\]]+\])/,
            /*  6: */ /^(?:\{[^}]+\})/,
            /*  7: */ /^(?:"[^"]+")/,
            /*  8: */ /^(?:'([^']|\\')+'\s*$)/,
            /*  9: */ /^(?:'([^']|\\')+')/,
            /* 10: */ /^(?:\w+\(\))/,
            /* 11: */ /^(?:[^=]+=(?!>))/,
            /* 12: */ /^(?:\s*\+\s*\w+)/,
            /* 13: */ /^(?:,\s*)/,
            /* 14: */ /^(?:([   -​\u2028\u2029　]))/,
            /* 15: */ /^(?:.+)/,
            /* 16: */ /^(?:,([   -​\u2028\u2029　])*)/,
            /* 17: */ /^(?:([   -​\u2028\u2029　]))/
        ],
        conditions: {
            'AFTER_NAME': {
                rules: [
                    4,
                    16,
                    17
                ],
                inclusive: false
            },
            'AFTER_EQ': {
                rules: [
                    5,
                    6,
                    7,
                    8,
                    9,
                    10,
                    11,
                    15
                ],
                inclusive: false
            },
            'VARS': {
                rules: [
                    12,
                    13,
                    14
                ],
                inclusive: false
            },
            'INITIAL': {
                rules: [
                    0,
                    1,
                    2,
                    3
                ],
                inclusive: true
            }
        }
    };
    return lexer;
}();
$510a014853e7284e$var$parser.lexer = $510a014853e7284e$var$lexer;
const $510a014853e7284e$var$TEXT_TAGS_ALLOW_SUB_TAGS = true;
const $510a014853e7284e$var$debug = $c1Lgv$debug('line-lexer:attrs');
let $510a014853e7284e$var$tagAlreadyFound = false;
let $510a014853e7284e$var$obj, $510a014853e7284e$var$name, $510a014853e7284e$var$value;
var $510a014853e7284e$var$lparenOpen = false;
const $510a014853e7284e$var$keysToMergeText = [
    'therest'
];
const $510a014853e7284e$var$quoteStack = [];
const $510a014853e7284e$var$parens = [];
function $510a014853e7284e$var$findLastSeparatorIndex(str) {
    let index = str.length - 2;
    let letterFoundIndex = -1;
    while(letterFoundIndex == -1 && index > -1){
        const c = str.charAt(index);
        if (/\w/.test(c)) letterFoundIndex = index;
        index--;
    }
    const substr = str.substring(0, letterFoundIndex);
    return Math.max(substr.lastIndexOf(' '), substr.lastIndexOf(','));
}
function $510a014853e7284e$var$parseNumber(str) {
    try {
        if (str.includes('.')) return parseFloat(str);
        else return parseInt(str);
    } catch (e) {
        console.error('Unparseable string "' + str + '"');
        return NaN;
    }
}
$510a014853e7284e$var$parser.main = function() {
    $510a014853e7284e$var$tagAlreadyFound = false;
    $510a014853e7284e$var$lparenOpen = false;
    function test(input, expected, strict = true) {
        $510a014853e7284e$var$tagAlreadyFound = false;
        $510a014853e7284e$var$lparenOpen = false;
        $510a014853e7284e$var$debug(`\nTesting '${input}'...`);
        var actual = $510a014853e7284e$var$parser.parse(input);
        $510a014853e7284e$var$debug(input + ' ==> ', $c1Lgv$util.inspect(actual));
        let compareFunc;
        if (strict) compareFunc = $c1Lgv$assert.deepEqual;
        else compareFunc = dyp;
        compareFunc.call({
        }, actual, expected);
    }
    test('abc,', [
        {
            name: 'abc'
        }
    ]);
    test('foo, bar, baz', [
        {
            name: 'foo'
        },
        {
            name: 'bar'
        },
        {
            name: 'baz'
        }
    ]);
    test("value='foo' selected", [
        {
            name: 'value',
            val: "'foo'"
        },
        {
            name: 'selected'
        }
    ]);
    test("selected value='bar'", [
        {
            name: 'selected'
        },
        {
            name: 'value',
            val: "'bar'"
        }
    ]);
    test("name='viewport' content='width=device-width'", [
        {
            name: 'name',
            val: "'viewport'"
        },
        {
            name: 'content',
            val: "'width=device-width'"
        }
    ]);
    test("content='I came across a problem in Internet Explorer (it wasn\\'t a problem with Firefox) when I...'", [
        {
            name: 'content',
            val: "'I came across a problem in Internet Explorer (it wasn\\'t a problem with Firefox) when I...'"
        }
    ]);
    test("property='og:description' content='I came across a problem in Internet Explorer (it wasn\\'t a problem with Firefox) when I...'", [
        {
            name: 'property',
            val: "'og:description'"
        },
        {
            name: 'content',
            val: "'I came across a problem in Internet Explorer (it wasn\\'t a problem with Firefox) when I...'"
        }
    ]);
    test(`foo=null bar=bar`, [
        {
            name: 'foo',
            val: 'null'
        },
        {
            name: 'bar',
            val: 'bar'
        }
    ]);
    test(`data-epoc=new Date(0)`, [
        {
            name: 'data-epoc',
            val: 'new Date(0)'
        }
    ]);
    test(`class= (tags || []).map((tag) => tag.replaceAll(" ", "_")).join(" ")`, [
        {
            name: 'class',
            val: '(tags || []).map((tag) => tag.replaceAll(" ", "_")).join(" ")'
        }
    ]);
    test('id=id', [
        {
            name: 'id',
            val: 'id'
        }
    ]);
    test(`class=['foo', 'bar', 'baz']`, [
        {
            name: 'class',
            val: "['foo', 'bar', 'baz']"
        }
    ]);
    // commenting this all out for now while I test attr {
    test(`class='bar'`, [
        {
            name: 'class',
            val: "'bar'"
        }
    ]);
    // test(`class={foo: true, bar: false, baz: true}`, [{ name: 'class', val: "[ 'foo', 'baz' ]" }])
    // test(`v-for="item in items" :name="item.id" :value="item.name"`, [{
    //   name: "v-for",
    //   val: "item in items"
    // }, {
    //   name: ":name",
    //   val: "item.id"
    // }, {
    //   name: ":value",
    //   val: "item.name"
    // }])
    // test(`class= (tags || []).map((tag) => tag.replaceAll(" ", "_")).join(" ")`, [{
    //   assignment: true,
    //   val: `(tags || []).map((tag) => tag.replaceAll(" ", "_")).join(" ")`,
    //   name: 'class'
    // }])
    // // url is a variable in a mixin
    // test(`href=url`, [
    //     { name: 'href', assignment: true, val: 'url' }
    //   ])
    // }
    test(`data-escaped={message: "Let's rock!"}`, [
        {
            name: 'data-escaped',
            val: '{message: "Let\'s rock!"}'
        }
    ]);
    test(`data-items=[1,2,3]`, [
        {
            name: 'data-items',
            val: '[1,2,3]'
        }
    ]);
    test(`href  =  '/user/' + id, class  =  'button'`, [
        {
            name: 'href',
            val: "'/user/' + id"
        },
        {
            name: 'class',
            val: "'button'"
        }
    ]);
    // I'm not supporting this right now
    // test(`href='/user/' + id, class='button'`, [{
    //   name: 'href',
    //   assignment: true,
    //   val: '"/user/" + id'
    // },
    // {name: 'class', val: 'button'}])
    // test(`class = ['class1', 'class2']`, [{ name: 'class', val: 'class1 class2'}])
    test(`href='/user/' + id, class='button'`, [
        {
            name: 'href',
            val: "'/user/' + id"
        },
        {
            name: 'class',
            val: "'button'"
        }
    ]);
    test(`key='answer', value=answer()`, [
        {
            name: 'key',
            val: "'answer'"
        },
        {
            name: 'value',
            val: 'answer()'
        }
    ]);
    test(`class = ['class1', 'class2']`, [
        {
            name: 'class',
            val: "['class1', 'class2']"
        }
    ]);
    test(`href='/user/' + id class='button'`, [
        {
            name: 'href',
            val: "'/user/' + id"
        },
        {
            name: 'class',
            val: "'button'"
        }
    ]);
    test(`href  =  '/user/' + id class  =  'button'`, [
        {
            name: 'href',
            val: "'/user/' + id"
        },
        {
            name: 'class',
            val: "'button'"
        }
    ]);
    test(`key='answer' value=answer()`, [
        {
            name: 'key',
            val: "'answer'"
        },
        {
            name: 'value',
            val: 'answer()'
        }
    ]);
    test(`class = ['class1', 'class2']`, [
        {
            name: 'class',
            val: "['class1', 'class2']"
        }
    ]);
    test(`class = ['class1', 'class2']`, [
        {
            name: 'class',
            val: "['class1', 'class2']"
        }
    ]);
    // test(`id=id)&attributes({foo: 'bar'}`, {})
    // - var bar = null
    // test(`foo=null bar=bar)&attributes({baz: 'baz'}`. [])
    test(`...object`, [
        {
            name: '...object',
            val: '...object'
        }
    ]);
    test(`...object after="after"`, [
        {
            name: '...object',
            val: '...object'
        },
        {
            name: 'after',
            val: '"after"'
        }
    ]);
    test(`before="before" ...object`, [
        {
            name: 'before',
            val: '"before"'
        },
        {
            name: '...object',
            val: '...object'
        }
    ]);
    test(`before="before" ...object after="after"`, [
        {
            name: 'before',
            val: '"before"'
        },
        {
            name: '...object',
            val: '...object'
        },
        {
            name: 'after',
            val: '"after"'
        }
    ]);
};
function $510a014853e7284e$var$Parser() {
    this.yy = {
    };
}
$510a014853e7284e$var$Parser.prototype = $510a014853e7284e$var$parser;
$510a014853e7284e$var$parser.Parser = $510a014853e7284e$var$Parser;
function $510a014853e7284e$var$yyparse() {
    return $510a014853e7284e$var$parser.parse.apply($510a014853e7284e$var$parser, arguments);
}
var $510a014853e7284e$export$2e2bcd8739ae039 = {
    parser: $510a014853e7284e$var$parser,
    Parser: $510a014853e7284e$var$Parser,
    parse: $510a014853e7284e$var$yyparse
};




/* parser generated by jison 0.6.1-216 */ /*
 * Returns a Parser object of the following structure:
 *
 *  Parser: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a derivative/copy of this one,
 *               not a direct reference!
 *  }
 *
 *  Parser.prototype: {
 *    yy: {},
 *    EOF: 1,
 *    TERROR: 2,
 *
 *    trace: function(errorMessage, ...),
 *
 *    JisonParserError: function(msg, hash),
 *
 *    quoteName: function(name),
 *               Helper function which can be overridden by user code later on: put suitable
 *               quotes around literal IDs in a description string.
 *
 *    originalQuoteName: function(name),
 *               The basic quoteName handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `quoteName()` to reference this function
 *               at the end of the `parse()`.
 *
 *    describeSymbol: function(symbol),
 *               Return a more-or-less human-readable description of the given symbol, when
 *               available, or the symbol itself, serving as its own 'description' for lack
 *               of something better to serve up.
 *
 *               Return NULL when the symbol is unknown to the parser.
 *
 *    symbols_: {associative list: name ==> number},
 *    terminals_: {associative list: number ==> name},
 *    nonterminals: {associative list: rule-name ==> {associative list: number ==> rule-alt}},
 *    terminal_descriptions_: (if there are any) {associative list: number ==> description},
 *    productions_: [...],
 *
 *    performAction: function parser__performAction(yytext, yyleng, yylineno, yyloc, yystate, yysp, yyvstack, yylstack, yystack, yysstack),
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `yyval` internal object, which has members (`$` and `_$`)
 *                             to store/reference the rule value `$$` and location info `@$`.
 *
 *                 One important thing to note about `this` a.k.a. `yyval`: every *reduce* action gets
 *                 to see the same object via the `this` reference, i.e. if you wish to carry custom
 *                 data from one reduce action through to the next within a single parse run, then you
 *                 may get nasty and use `yyval` a.k.a. `this` for storing you own semi-permanent data.
 *
 *                 `this.yy` is a direct reference to the `yy` shared state object.
 *
 *                 `%parse-param`-specified additional `parse()` arguments have been added to this `yy`
 *                 object at `parse()` start and are therefore available to the action code via the
 *                 same named `yy.xxxx` attributes (where `xxxx` represents a identifier name from
 *                 the %parse-param` list.
 *
 *               - `yytext`  : reference to the lexer value which belongs to the last lexer token used
 *                             to match this rule. This is *not* the look-ahead token, but the last token
 *                             that's actually part of this rule.
 *
 *                 Formulated another way, `yytext` is the value of the token immediately preceeding
 *                 the current look-ahead token.
 *                 Caveats apply for rules which don't require look-ahead, such as epsilon rules.
 *
 *               - `yyleng`  : ditto as `yytext`, only now for the lexer.yyleng value.
 *
 *               - `yylineno`: ditto as `yytext`, only now for the lexer.yylineno value.
 *
 *               - `yyloc`   : ditto as `yytext`, only now for the lexer.yylloc lexer token location info.
 *
 *                               WARNING: since jison 0.4.18-186 this entry may be NULL/UNDEFINED instead
 *                               of an empty object when no suitable location info can be provided.
 *
 *               - `yystate` : the current parser state number, used internally for dispatching and
 *                               executing the action code chunk matching the rule currently being reduced.
 *
 *               - `yysp`    : the current state stack position (a.k.a. 'stack pointer')
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *                 Also note that you can access this and other stack index values using the new double-hash
 *                 syntax, i.e. `##$ === ##0 === yysp`, while `##1` is the stack index for all things
 *                 related to the first rule term, just like you have `$1`, `@1` and `#1`.
 *                 This is made available to write very advanced grammar action rules, e.g. when you want
 *                 to investigate the parse state stack in your action code, which would, for example,
 *                 be relevant when you wish to implement error diagnostics and reporting schemes similar
 *                 to the work described here:
 *
 *                 + Pottier, F., 2016. Reachability and error diagnosis in LR(1) automata.
 *                   In Journées Francophones des Languages Applicatifs.
 *
 *                 + Jeffery, C.L., 2003. Generating LR syntax error messages from examples.
 *                   ACM Transactions on Programming Languages and Systems (TOPLAS), 25(5), pp.631–640.
 *
 *               - `yyrulelength`: the current rule's term count, i.e. the number of entries occupied on the stack.
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *               - `yyvstack`: reference to the parser value stack. Also accessed via the `$1` etc.
 *                             constructs.
 *
 *               - `yylstack`: reference to the parser token location stack. Also accessed via
 *                             the `@1` etc. constructs.
 *
 *                             WARNING: since jison 0.4.18-186 this array MAY contain slots which are
 *                             UNDEFINED rather than an empty (location) object, when the lexer/parser
 *                             action code did not provide a suitable location info object when such a
 *                             slot was filled!
 *
 *               - `yystack` : reference to the parser token id stack. Also accessed via the
 *                             `#1` etc. constructs.
 *
 *                 Note: this is a bit of a **white lie** as we can statically decode any `#n` reference to
 *                 its numeric token id value, hence that code wouldn't need the `yystack` but *you* might
 *                 want access this array for your own purposes, such as error analysis as mentioned above!
 *
 *                 Note that this stack stores the current stack of *tokens*, that is the sequence of
 *                 already parsed=reduced *nonterminals* (tokens representing rules) and *terminals*
 *                 (lexer tokens *shifted* onto the stack until the rule they belong to is found and
 *                 *reduced*.
 *
 *               - `yysstack`: reference to the parser state stack. This one carries the internal parser
 *                             *states* such as the one in `yystate`, which are used to represent
 *                             the parser state machine in the *parse table*. *Very* *internal* stuff,
 *                             what can I say? If you access this one, you're clearly doing wicked things
 *
 *               - `...`     : the extra arguments you specified in the `%parse-param` statement in your
 *                             grammar definition file.
 *
 *    table: [...],
 *               State transition table
 *               ----------------------
 *
 *               index levels are:
 *               - `state`  --> hash table
 *               - `symbol` --> action (number or array)
 *
 *                 If the `action` is an array, these are the elements' meaning:
 *                 - index [0]: 1 = shift, 2 = reduce, 3 = accept
 *                 - index [1]: GOTO `state`
 *
 *                 If the `action` is a number, it is the GOTO `state`
 *
 *    defaultActions: {...},
 *
 *    parseError: function(str, hash, ExceptionClass),
 *    yyError: function(str, ...),
 *    yyRecovering: function(),
 *    yyErrOk: function(),
 *    yyClearIn: function(),
 *
 *    constructParseErrorInfo: function(error_message, exception_object, expected_token_set, is_recoverable),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this parser kernel in many places; example usage:
 *
 *                   var infoObj = parser.constructParseErrorInfo('fail!', null,
 *                                     parser.collect_expected_token_set(state), true);
 *                   var retVal = parser.parseError(infoObj.errStr, infoObj, parser.JisonParserError);
 *
 *    originalParseError: function(str, hash, ExceptionClass),
 *               The basic `parseError` handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `parseError()` to reference this function
 *               at the end of the `parse()`.
 *
 *    options: { ... parser %options ... },
 *
 *    parse: function(input[, args...]),
 *               Parse the given `input` and return the parsed value (or `true` when none was provided by
 *               the root action, in which case the parser is acting as a *matcher*).
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of this grammar:
 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
 *
 *               WARNING:
 *               Parser's additional `args...` parameters (via `%parse-param`) MAY conflict with
 *               any attributes already added to `yy` by the jison run-time;
 *               when such a collision is detected an exception is thrown to prevent the generated run-time
 *               from silently accepting this confusing and potentially hazardous situation!
 *
 *               The lexer MAY add its own set of additional parameters (via the `%parse-param` line in
 *               the lexer section of the grammar spec): these will be inserted in the `yy` shared state
 *               object and any collision with those will be reported by the lexer via a thrown exception.
 *
 *    cleanupAfterParse: function(resultValue, invoke_post_methods, do_not_nuke_errorinfos),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API is invoked at the end of the `parse()` call, unless an exception was thrown
 *               and `%options no-try-catch` has been defined for this grammar: in that case this helper MAY
 *               be invoked by calling user code to ensure the `post_parse` callbacks are invoked and
 *               the internal parser gets properly garbage collected under these particular circumstances.
 *
 *    yyMergeLocationInfo: function(first_index, last_index, first_yylloc, last_yylloc, dont_look_back),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API can be invoked to calculate a spanning `yylloc` location info object.
 *
 *               Note: %epsilon rules MAY specify no `first_index` and `first_yylloc`, in which case
 *               this function will attempt to obtain a suitable location marker by inspecting the location stack
 *               backwards.
 *
 *               For more info see the documentation comment further below, immediately above this function's
 *               implementation.
 *
 *    lexer: {
 *        yy: {...},           A reference to the so-called "shared state" `yy` once
 *                             received via a call to the `.setInput(input, yy)` lexer API.
 *        EOF: 1,
 *        ERROR: 2,
 *        JisonLexerError: function(msg, hash),
 *        parseError: function(str, hash, ExceptionClass),
 *        setInput: function(input, [yy]),
 *        input: function(),
 *        unput: function(str),
 *        more: function(),
 *        reject: function(),
 *        less: function(n),
 *        pastInput: function(n),
 *        upcomingInput: function(n),
 *        showPosition: function(),
 *        test_match: function(regex_match_array, rule_index, ...),
 *        next: function(...),
 *        lex: function(...),
 *        begin: function(condition),
 *        pushState: function(condition),
 *        popState: function(),
 *        topState: function(),
 *        _currentRules: function(),
 *        stateStackSize: function(),
 *        cleanupAfterLex: function()
 *
 *        options: { ... lexer %options ... },
 *
 *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START, ...),
 *        rules: [...],
 *        conditions: {associative list: name ==> set},
 *    }
 *  }
 *
 *
 *  token location info (@$, _$, etc.): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer and
 * parser errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *  }
 *
 * parser (grammar) errors will also provide these additional members:
 *
 *  {
 *    expected:    (array describing the set of expected tokens;
 *                  may be UNDEFINED when we cannot easily produce such a set)
 *    state:       (integer (or array when the table includes grammar collisions);
 *                  represents the current internal state of the parser kernel.
 *                  can, for example, be used to pass to the `collect_expected_token_set()`
 *                  API to obtain the expected token set)
 *    action:      (integer; represents the current internal action which will be executed)
 *    new_state:   (integer; represents the next/planned internal state, once the current
 *                  action has executed)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    value_stack: (array: the current parser LALR/LR internal `$$` value stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    location_stack: (array: the current parser LALR/LR internal location stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *    parser:      (reference to the current parser instance)
 *  }
 *
 * while `this` will reference the current parser instance.
 *
 * When `parseError` is invoked by the lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    lexer:       (reference to the current lexer instance which reported the error)
 *  }
 *
 * When `parseError` is invoked by the parser due to a **JavaScript exception** being fired
 * from either the parser or lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    exception:   (reference to the exception thrown)
 *  }
 *
 * Please do note that in the latter situation, the `expected` field will be omitted as
 * this type of failure is assumed not to be due to *parse errors* but rather due to user
 * action code in either parser or lexer failing unexpectedly.
 *
 * ---
 *
 * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.
 * These options are available:
 *
 * ### options which are global for all parser instances
 *
 *  Parser.pre_parse: function(yy)
 *                 optional: you can specify a pre_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`.
 *  Parser.post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: you can specify a post_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`. When it does not return any value,
 *                 the parser will return the original `retval`.
 *
 * ### options which can be set up per parser instance
 *
 *  yy: {
 *      pre_parse:  function(yy)
 *                 optional: is invoked before the parse cycle starts (and before the first
 *                 invocation of `lex()`) but immediately after the invocation of
 *                 `parser.pre_parse()`).
 *      post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: is invoked when the parse terminates due to success ('accept')
 *                 or failure (even when exceptions are thrown).
 *                 `retval` contains the return value to be produced by `Parser.parse()`;
 *                 this function can override the return value by returning another.
 *                 When it does not return any value, the parser will return the original
 *                 `retval`.
 *                 This function is invoked immediately before `parser.post_parse()`.
 *
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *      quoteName: function(name),
 *                 optional: overrides the default `quoteName` function.
 *  }
 *
 *  parser.lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this `%option` has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */ // See also:
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
// but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
// with userland code which might access the derived class in a 'classic' way.
function $0701b6dda164cf78$var$JisonParserError(msg, hash) {
    Object.defineProperty(this, 'name', {
        enumerable: false,
        writable: false,
        value: 'JisonParserError'
    });
    if (msg == null) msg = '???';
    Object.defineProperty(this, 'message', {
        enumerable: false,
        writable: true,
        value: msg
    });
    this.hash = hash;
    var stacktrace;
    if (hash && hash.exception instanceof Error) {
        var ex2 = hash.exception;
        this.message = ex2.message || msg;
        stacktrace = ex2.stack;
    }
    if (!stacktrace) {
        if (Error.hasOwnProperty('captureStackTrace')) Error.captureStackTrace(this, this.constructor);
        else stacktrace = new Error(msg).stack;
    }
    if (stacktrace) Object.defineProperty(this, 'stack', {
        enumerable: false,
        writable: false,
        value: stacktrace
    });
}
if (typeof Object.setPrototypeOf === 'function') Object.setPrototypeOf($0701b6dda164cf78$var$JisonParserError.prototype, Error.prototype);
else $0701b6dda164cf78$var$JisonParserError.prototype = Object.create(Error.prototype);
$0701b6dda164cf78$var$JisonParserError.prototype.constructor = $0701b6dda164cf78$var$JisonParserError;
$0701b6dda164cf78$var$JisonParserError.prototype.name = 'JisonParserError';
// helper: reconstruct the productions[] table
function $0701b6dda164cf78$var$bp(s) {
    var rv = [];
    var p = s.pop;
    var r = s.rule;
    for(var i = 0, l = p.length; i < l; i++)rv.push([
        p[i],
        r[i]
    ]);
    return rv;
}
// helper: reconstruct the defaultActions[] table
function $0701b6dda164cf78$var$bda(s) {
    var rv = {
    };
    var d = s.idx;
    var g = s.goto;
    for(var i = 0, l = d.length; i < l; i++){
        var j = d[i];
        rv[j] = g[i];
    }
    return rv;
}
// helper: reconstruct the 'goto' table
function $0701b6dda164cf78$var$bt(s) {
    var rv = [];
    var d = s.len;
    var y = s.symbol;
    var t = s.type;
    var a = s.state;
    var m = s.mode;
    var g = s.goto;
    for(var i = 0, l = d.length; i < l; i++){
        var n = d[i];
        var q = {
        };
        for(var j = 0; j < n; j++){
            var z = y.shift();
            switch(t.shift()){
                case 2:
                    q[z] = [
                        m.shift(),
                        g.shift()
                    ];
                    break;
                case 0:
                    q[z] = a.shift();
                    break;
                default:
                    // type === 1: accept
                    q[z] = [
                        3
                    ];
            }
        }
        rv.push(q);
    }
    return rv;
}
// helper: runlength encoding with increment step: code, length: step (default step = 0)
// `this` references an array
function $0701b6dda164cf78$var$s(c, l, a) {
    a = a || 0;
    for(var i = 0; i < l; i++){
        this.push(c);
        c += a;
    }
}
// helper: duplicate sequence from *relative* offset and length.
// `this` references an array
function $0701b6dda164cf78$var$c(i, l) {
    i = this.length - i;
    for(l += i; i < l; i++)this.push(this[i]);
}
// helper: unpack an array using helpers and data, all passed in an array argument 'a'.
function $0701b6dda164cf78$var$u(a) {
    var rv = [];
    for(var i = 0, l = a.length; i < l; i++){
        var e = a[i];
        // Is this entry a helper function?
        if (typeof e === 'function') {
            i++;
            e.apply(rv, a[i]);
        } else rv.push(e);
    }
    return rv;
}
var $0701b6dda164cf78$var$parser = {
    // Code Generator Information Report
    // ---------------------------------
    //
    // Options:
    //
    //   default action mode: ............. ["classic","merge"]
    //   test-compile action mode: ........ "parser:*,lexer:*"
    //   try..catch: ...................... true
    //   default resolve on conflict: ..... true
    //   on-demand look-ahead: ............ false
    //   error recovery token skip maximum: 3
    //   yyerror in parse actions is: ..... NOT recoverable,
    //   yyerror in lexer actions and other non-fatal lexer are:
    //   .................................. NOT recoverable,
    //   debug grammar/output: ............ false
    //   has partial LR conflict upgrade:   true
    //   rudimentary token-stack support:   true
    //   parser table compression mode: ... 2
    //   export debug tables: ............. false
    //   export *all* tables: ............. false
    //   module type: ..................... es
    //   parser engine type: .............. lalr
    //   output main() in the module: ..... true
    //   has user-specified main(): ....... false
    //   has user-specified require()/import modules for main():
    //   .................................. false
    //   number of expected conflicts: .... 0
    //
    //
    // Parser Analysis flags:
    //
    //   no significant actions (parser is a language matcher only):
    //   .................................. false
    //   uses yyleng: ..................... false
    //   uses yylineno: ................... false
    //   uses yytext: ..................... false
    //   uses yylloc: ..................... false
    //   uses ParseError API: ............. false
    //   uses YYERROR: .................... false
    //   uses YYRECOVERING: ............... false
    //   uses YYERROK: .................... false
    //   uses YYCLEARIN: .................. false
    //   tracks rule values: .............. true
    //   assigns rule values: ............. true
    //   uses location tracking: .......... false
    //   assigns location: ................ false
    //   uses yystack: .................... false
    //   uses yysstack: ................... false
    //   uses yysp: ....................... true
    //   uses yyrulelength: ............... false
    //   uses yyMergeLocationInfo API: .... false
    //   has error recovery: .............. false
    //   has error reporting: ............. false
    //
    // --------- END OF REPORT -----------
    trace: function no_op_trace() {
    },
    JisonParserError: $0701b6dda164cf78$var$JisonParserError,
    yy: {
    },
    options: {
        type: "lalr",
        hasPartialLrUpgradeOnConflict: true,
        errorRecoveryTokenDiscardCount: 3,
        tokenStack: true,
        ebnf: true
    },
    symbols_: {
        "$accept": 0,
        "$end": 1,
        "ASSIGNMENT": 42,
        "ASSIGNMENT_VALUE": 41,
        "ATTR_TEXT": 39,
        "ATTR_TEXT_CONT": 8,
        "ATTR_TEXT_END": 7,
        "AT_ATTRS": 38,
        "CLASSNAME": 14,
        "COMMENT": 19,
        "COMMENT_HTML": 20,
        "CONDITION": 40,
        "CONDITIONAL": 28,
        "DOT_END": 26,
        "EOF": 1,
        "ESCAPED_TEXT_INTERPOLATION": 5,
        "FILTER": 37,
        "HTML_COMMENT": 9,
        "INTERPOLATION_START": 33,
        "INTERP_END": 32,
        "INTERP_NAME": 30,
        "INTERP_START": 29,
        "INTERP_VAL": 31,
        "KEYWORD": 23,
        "LPAREN": 11,
        "MIXIN_CALL": 22,
        "MIXIN_CALL_TODO": 34,
        "MIXIN_PARAMS": 12,
        "MIXIN_PARAMS_START": 16,
        "NESTED_TAG_START": 6,
        "PIPE": 24,
        "RCURLY": 25,
        "RPAREN": 13,
        "SPACE": 27,
        "TAG": 17,
        "TAG_ID": 15,
        "TAG_INTERPOLATION": 36,
        "TEXT": 3,
        "TEXT_TAG": 18,
        "UNBUF_CODE": 4,
        "UNBUF_CODE_BLOCK": 21,
        "UNBUF_CODE_BLOCK_START": 10,
        "UNESCAPED_TEXT_INTERPOLATION": 35,
        "attrs": 48,
        "error": 2,
        "first_token": 46,
        "line": 44,
        "line_end": 49,
        "line_splitter": 50,
        "line_start": 45,
        "line_start_option": 52,
        "line_start_repetition_plus": 51,
        "start": 43,
        "tag_part": 47,
        "tag_part_repetition_plus": 53
    },
    terminals_: {
        1: "EOF",
        2: "error",
        3: "TEXT",
        4: "UNBUF_CODE",
        5: "ESCAPED_TEXT_INTERPOLATION",
        6: "NESTED_TAG_START",
        7: "ATTR_TEXT_END",
        8: "ATTR_TEXT_CONT",
        9: "HTML_COMMENT",
        10: "UNBUF_CODE_BLOCK_START",
        11: "LPAREN",
        12: "MIXIN_PARAMS",
        13: "RPAREN",
        14: "CLASSNAME",
        15: "TAG_ID",
        16: "MIXIN_PARAMS_START",
        17: "TAG",
        18: "TEXT_TAG",
        19: "COMMENT",
        20: "COMMENT_HTML",
        21: "UNBUF_CODE_BLOCK",
        22: "MIXIN_CALL",
        23: "KEYWORD",
        24: "PIPE",
        25: "RCURLY",
        26: "DOT_END",
        27: "SPACE",
        28: "CONDITIONAL",
        29: "INTERP_START",
        30: "INTERP_NAME",
        31: "INTERP_VAL",
        32: "INTERP_END",
        33: "INTERPOLATION_START",
        34: "MIXIN_CALL_TODO",
        35: "UNESCAPED_TEXT_INTERPOLATION",
        36: "TAG_INTERPOLATION",
        37: "FILTER",
        38: "AT_ATTRS",
        39: "ATTR_TEXT",
        40: "CONDITION",
        41: "ASSIGNMENT_VALUE",
        42: "ASSIGNMENT"
    },
    TERROR: 2,
    EOF: 1,
    // internals: defined here so the object *structure* doesn't get modified by parse() et al,
    // thus helping JIT compilers like Chrome V8.
    originalQuoteName: null,
    originalParseError: null,
    cleanupAfterParse: null,
    constructParseErrorInfo: null,
    yyMergeLocationInfo: null,
    __reentrant_call_depth: 0,
    __error_infos: [],
    __error_recovery_infos: [],
    // APIs which will be set up depending on user action code analysis:
    //yyRecovering: 0,
    //yyErrOk: 0,
    //yyClearIn: 0,
    // Helper APIs
    // -----------
    // Helper function which can be overridden by user code later on: put suitable quotes around
    // literal IDs in a description string.
    quoteName: function parser_quoteName(id_str) {
        return '"' + id_str + '"';
    },
    // Return the name of the given symbol (terminal or non-terminal) as a string, when available.
    //
    // Return NULL when the symbol is unknown to the parser.
    getSymbolName: function parser_getSymbolName(symbol) {
        if (this.terminals_[symbol]) return this.terminals_[symbol];
        // Otherwise... this might refer to a RULE token i.e. a non-terminal: see if we can dig that one up.
        //
        // An example of this may be where a rule's action code contains a call like this:
        //
        //      parser.getSymbolName(#$)
        //
        // to obtain a human-readable name of the current grammar rule.
        var s = this.symbols_;
        for(var key in s){
            if (s[key] === symbol) return key;
        }
        return null;
    },
    // Return a more-or-less human-readable description of the given symbol, when available,
    // or the symbol itself, serving as its own 'description' for lack of something better to serve up.
    //
    // Return NULL when the symbol is unknown to the parser.
    describeSymbol: function parser_describeSymbol(symbol) {
        if (symbol !== this.EOF && this.terminal_descriptions_ && this.terminal_descriptions_[symbol]) return this.terminal_descriptions_[symbol];
        else if (symbol === this.EOF) return 'end of input';
        var id = this.getSymbolName(symbol);
        if (id) return this.quoteName(id);
        return null;
    },
    // Produce a (more or less) human-readable list of expected tokens at the point of failure.
    //
    // The produced list may contain token or token set descriptions instead of the tokens
    // themselves to help turning this output into something that easier to read by humans
    // unless `do_not_describe` parameter is set, in which case a list of the raw, *numeric*,
    // expected terminals and nonterminals is produced.
    //
    // The returned list (array) will not contain any duplicate entries.
    collect_expected_token_set: function parser_collect_expected_token_set(state, do_not_describe) {
        var TERROR = this.TERROR;
        var tokenset = [];
        var check = {
        };
        // Has this (error?) state been outfitted with a custom expectations description text for human consumption?
        // If so, use that one instead of the less palatable token set.
        if (!do_not_describe && this.state_descriptions_ && this.state_descriptions_[state]) return [
            this.state_descriptions_[state]
        ];
        for(var p in this.table[state]){
            p = +p;
            if (p !== TERROR) {
                var d = do_not_describe ? p : this.describeSymbol(p);
                if (d && !check[d]) {
                    tokenset.push(d);
                    check[d] = true; // Mark this token description as already mentioned to prevent outputting duplicate entries.
                }
            }
        }
        return tokenset;
    },
    productions_: $0701b6dda164cf78$var$bp({
        pop: $0701b6dda164cf78$var$u([
            43,
            43,
            $0701b6dda164cf78$var$s,
            [
                44,
                11
            ],
            $0701b6dda164cf78$var$s,
            [
                45,
                13
            ],
            $0701b6dda164cf78$var$s,
            [
                46,
                23
            ],
            $0701b6dda164cf78$var$s,
            [
                47,
                5
            ],
            48,
            48,
            $0701b6dda164cf78$var$s,
            [
                49,
                6
            ],
            $0701b6dda164cf78$var$s,
            [
                50,
                3
            ],
            51,
            51,
            52,
            52,
            53,
            53
        ]),
        rule: $0701b6dda164cf78$var$u([
            1,
            2,
            1,
            2,
            2,
            3,
            3,
            5,
            3,
            $0701b6dda164cf78$var$s,
            [
                1,
                6
            ],
            $0701b6dda164cf78$var$c,
            [
                12,
                3
            ],
            4,
            5,
            3,
            4,
            4,
            5,
            $0701b6dda164cf78$var$c,
            [
                17,
                8
            ],
            $0701b6dda164cf78$var$s,
            [
                1,
                10
            ],
            4,
            $0701b6dda164cf78$var$s,
            [
                1,
                11
            ],
            3,
            3,
            0,
            $0701b6dda164cf78$var$s,
            [
                1,
                9
            ],
            2,
            $0701b6dda164cf78$var$c,
            [
                11,
                3
            ],
            2
        ])
    }),
    performAction: function parser__PerformAction(yystate /* action[1] */ , yysp, yyvstack) {
        /* this == yyval */ // the JS engine itself can go and remove these statements when `yy` turns out to be unused in any action code!
        var yy = this.yy;
        var yyparser = yy.parser;
        var yylexer = yy.lexer;
        switch(yystate){
            case 0:
                /*! Production::    $accept : start $end */ // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-):
                this.$ = yyvstack[yysp - 1];
                break;
            case 1:
            /*! Production::    start : EOF */ case 3:
            /*! Production::    line : line_start */ case 14:
            /*! Production::    line_start : first_token */ case 54:
                /*! Production::    tag_part : attrs */ // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-):
                this.$ = yyvstack[yysp];
                break;
            case 2:
                /*! Production::    start : line EOF */ // default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-):
                this.$ = yyvstack[yysp - 1];
                break;
            case 4:
                /*! Production::    line : line_start TEXT */ $0701b6dda164cf78$var$debug('line: line_start TEXT: $line_start=', yyvstack[yysp - 1], ', $TEXT=', yyvstack[yysp]);
                this.$ = $0701b6dda164cf78$var$merge(yyvstack[yysp - 1], {
                    type: 'text',
                    val: yyvstack[yysp]
                });
                break;
            case 5:
                /*! Production::    line : line_start UNBUF_CODE */ this.$ = $0701b6dda164cf78$var$merge(yyvstack[yysp - 1], {
                    type: 'unbuf_code',
                    val: yyvstack[yysp],
                    state: 'UNBUF_CODE_FOLLOWER'
                });
                break;
            case 6:
                /*! Production::    line : line_start line_splitter line_end */ $0701b6dda164cf78$var$debug('line: line_start line_splitter line_end: $line_start=', yyvstack[yysp - 2], ', $line_end=', yyvstack[yysp]);
                if (yyvstack[yysp] == undefined) this.$ = $0701b6dda164cf78$var$merge(yyvstack[yysp - 2], yyvstack[yysp - 1]);
                else if (yyvstack[yysp].hasOwnProperty('type') && yyvstack[yysp].type == 'array') this.$ = $0701b6dda164cf78$var$merge(yyvstack[yysp - 2], [
                    yyvstack[yysp - 1],
                    {
                        children: yyvstack[yysp].val
                    }
                ]);
                else this.$ = $0701b6dda164cf78$var$merge(yyvstack[yysp - 2], [
                    yyvstack[yysp - 1],
                    yyvstack[yysp]
                ]);
                break;
            case 7:
                /*! Production::    line : line_start line_splitter ESCAPED_TEXT_INTERPOLATION */ $0701b6dda164cf78$var$debug('line: line_start line_splitter ESCAPED_TEXT_INTERPOLATION: $line_start=', yyvstack[yysp - 2], ', $2=', yyvstack[yysp - 1], ', $3=', yyvstack[yysp]);
                this.$ = $0701b6dda164cf78$var$merge(yyvstack[yysp - 2], {
                    val: yyvstack[yysp]
                });
                break;
            case 8:
                /*! Production::    line : line_start line_splitter ESCAPED_TEXT_INTERPOLATION NESTED_TAG_START ESCAPED_TEXT_INTERPOLATION */ $0701b6dda164cf78$var$debug('line: line_start line_splitter ESCAPED_TEXT_INTERPOLATION NESTED_TAG_START ESCAPED_TEXT_INTERPOLATION: $line_start=', yyvstack[yysp - 4], ', $2=', yyvstack[yysp - 3], ', $3=', yyvstack[yysp - 2], ', $4=', yyvstack[yysp - 1], ', $5=', yyvstack[yysp]);
                let interpArr = [];
                if (yyvstack[yysp - 2]) {
                    interpArr.push('#{');
                    interpArr.push(yyvstack[yysp - 2]);
                    interpArr.push('}');
                }
                if (yyvstack[yysp - 1]) interpArr.push(yyvstack[yysp - 1]);
                if (yyvstack[yysp]) {
                    interpArr.push('#{');
                    interpArr.push(yyvstack[yysp]);
                    interpArr.push('}');
                }
                this.$ = $0701b6dda164cf78$var$merge(yyvstack[yysp - 4], {
                    val: interpArr.join('')
                });
                break;
            case 9:
                /*! Production::    line : line_start NESTED_TAG_START line */ this.$ = $0701b6dda164cf78$var$merge(yyvstack[yysp - 2], {
                    state: 'NESTED',
                    children: [
                        yyvstack[yysp]
                    ]
                });
                break;
            case 10:
                /*! Production::    line : ATTR_TEXT_END */ this.$ = {
                    type: 'attrs_end',
                    val: $510a014853e7284e$export$2e2bcd8739ae039.parse(yyvstack[yysp]),
                    state: 'MULTI_LINE_ATTRS_END'
                };
                break;
            case 11:
                /*! Production::    line : ATTR_TEXT_CONT */ this.$ = {
                    type: 'attrs_cont',
                    val: $510a014853e7284e$export$2e2bcd8739ae039.parse(yyvstack[yysp]),
                    state: 'MULTI_LINE_ATTRS'
                };
                break;
            case 12:
                /*! Production::    line : HTML_COMMENT */ $0701b6dda164cf78$var$debug('$HTML_COMMENT=', yyvstack[yysp]);
                if (yyvstack[yysp].includes('#')) {
                    let elemsReturned = $0701b6dda164cf78$var$createElems(yyvstack[yysp], this.yy.parser);
                    $0701b6dda164cf78$var$debug('elemsReturned', JSON.stringify(elemsReturned));
                    this.$ = {
                        type: 'html_comment',
                        children: elemsReturned
                    };
                } else this.$ = {
                    type: 'html_comment',
                    val: $0701b6dda164cf78$var$quote(yyvstack[yysp])
                };
                break;
            case 13:
                /*! Production::    line : UNBUF_CODE_BLOCK_START */ this.$ = {
                    type: 'unbuf_code_block',
                    state: 'UNBUF_CODE_BLOCK_START'
                };
                break;
            case 15:
                /*! Production::    line_start : tag_part */ // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-):
                this.$ = yyvstack[yysp];
                // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-)
                $0701b6dda164cf78$var$debug('line_start: tag_part');
                break;
            case 16:
                /*! Production::    line_start : first_token line_start_repetition_plus */ $0701b6dda164cf78$var$debug('line_start: first_token tag_part+');
                this.$ = $0701b6dda164cf78$var$merge(yyvstack[yysp - 1], yyvstack[yysp]);
                break;
            case 17:
                /*! Production::    line_start : line_start attrs */ $0701b6dda164cf78$var$debug('line_start: line_start attrs');
                this.$ = $0701b6dda164cf78$var$merge(yyvstack[yysp - 1], yyvstack[yysp]);
                break;
            case 18:
                /*! Production::    line_start : first_token LPAREN line_start_option */ $0701b6dda164cf78$var$debug('line_start: first_token LPAREN ATTR_TEXT_CONT?');
                this.$ = $0701b6dda164cf78$var$merge(yyvstack[yysp - 2], {
                    state: 'MULTI_LINE_ATTRS'
                });
                if (yyvstack[yysp]) {
                    $0701b6dda164cf78$var$debug('3 Calling parseAttrs with ', yyvstack[yysp]);
                    try {
                        this.$ = $0701b6dda164cf78$var$merge(yyvstack[yysp - 2], {
                            attrs_start: $510a014853e7284e$export$2e2bcd8739ae039.parse(yyvstack[yysp])
                        });
                    } catch (e) {
                        console.error('Could not parse attributes=' + yyvstack[yysp], e);
                    }
                }
                break;
            case 19:
                /*! Production::    line_start : first_token tag_part LPAREN ATTR_TEXT_CONT */ $0701b6dda164cf78$var$debug('line_start: first_token tag_part LPAREN ATTR_TEXT_CONT');
                this.$ = $0701b6dda164cf78$var$merge(yyvstack[yysp - 3], [
                    yyvstack[yysp - 2],
                    yyvstack[yysp]
                ]);
                break;
            case 20:
                /*! Production::    line_start : first_token tag_part LPAREN MIXIN_PARAMS RPAREN */ $0701b6dda164cf78$var$debug('line_start: first_token tag_part LPAREN MIXIN_PARAMS RPAREN');
                this.$ = $0701b6dda164cf78$var$merge($0701b6dda164cf78$var$merge(yyvstack[yysp - 4], yyvstack[yysp - 3]), {
                    params: yyvstack[yysp - 1]
                });
                break;
            case 21:
                /*! Production::    line_start : first_token tag_part attrs */ $0701b6dda164cf78$var$debug('line_start: first_token tag_part attrs');
                this.$ = $0701b6dda164cf78$var$merge(yyvstack[yysp - 2], [
                    yyvstack[yysp - 1],
                    yyvstack[yysp]
                ]);
                break;
            case 22:
                /*! Production::    line_start : first_token tag_part attrs CLASSNAME */ $0701b6dda164cf78$var$debug('first_token tag_part attrs CLASSNAME: first_token=', yyvstack[yysp - 3], ', tag_part?=', yyvstack[yysp - 2], ', attrs=', yyvstack[yysp - 1], ', CLASSNAME=', yyvstack[yysp]);
                this.$ = $0701b6dda164cf78$var$merge(yyvstack[yysp - 3], [
                    yyvstack[yysp - 2],
                    yyvstack[yysp - 1],
                    {
                        attrs: [
                            {
                                name: 'class',
                                val: $0701b6dda164cf78$var$quote(yyvstack[yysp])
                            }
                        ]
                    }
                ]);
                break;
            case 23:
                /*! Production::    line_start : first_token LPAREN MIXIN_PARAMS RPAREN */ $0701b6dda164cf78$var$debug('first_token LPAREN MIXIN_PARAMS RPAREN: first_token=', yyvstack[yysp - 3], ', MIXIN_PARAMS=', yyvstack[yysp - 1]);
                this.$ = $0701b6dda164cf78$var$merge(yyvstack[yysp - 3], {
                    params: yyvstack[yysp - 1]
                });
                break;
            case 24:
                /*! Production::    line_start : first_token LPAREN MIXIN_PARAMS RPAREN CLASSNAME */ $0701b6dda164cf78$var$debug('first_token LPAREN MIXIN_PARAMS RPAREN CLASSNAME: first_token=', yyvstack[yysp - 4], ', MIXIN_PARAMS=', yyvstack[yysp - 2], ', CLASSNAME', yyvstack[yysp]);
                this.$ = $0701b6dda164cf78$var$merge(yyvstack[yysp - 4], {
                    params: yyvstack[yysp - 2],
                    attrs: [
                        {
                            name: 'class',
                            val: $0701b6dda164cf78$var$quote(yyvstack[yysp])
                        }
                    ]
                });
                break;
            case 25:
                /*! Production::    line_start : first_token LPAREN MIXIN_PARAMS RPAREN TAG_ID */ $0701b6dda164cf78$var$debug('first_token LPAREN MIXIN_PARAMS RPAREN TAG_ID: first_token=', yyvstack[yysp - 4], ', MIXIN_PARAMS=', yyvstack[yysp - 2], ', TAG_ID', yyvstack[yysp]);
                this.$ = $0701b6dda164cf78$var$merge(yyvstack[yysp - 4], {
                    params: yyvstack[yysp - 2],
                    id: yyvstack[yysp]
                });
                break;
            case 26:
                /*! Production::    line_start : first_token LPAREN MIXIN_PARAMS_START */ $0701b6dda164cf78$var$debug('first_token LPAREN MIXIN_PARAMS_START: first_token=', yyvstack[yysp - 2], ', MIXIN_PARAMS_START=', yyvstack[yysp]);
                this.$ = $0701b6dda164cf78$var$merge(yyvstack[yysp - 2], {
                    params: yyvstack[yysp],
                    state: '_START'
                });
                break;
            case 27:
                /*! Production::    first_token : TAG */ this.$ = {
                    name: yyvstack[yysp],
                    type: 'tag'
                };
                break;
            case 28:
                /*! Production::    first_token : TEXT_TAG */ this.$ = {
                    name: yyvstack[yysp],
                    type: 'tag',
                    state: 'TEXT_START'
                };
                break;
            case 29:
                /*! Production::    first_token : CLASSNAME */ this.$ = {
                    type: 'tag',
                    attrs: [
                        {
                            name: 'class',
                            val: $0701b6dda164cf78$var$quote(yyvstack[yysp])
                        }
                    ]
                };
                break;
            case 30:
                /*! Production::    first_token : TAG_ID */ this.$ = {
                    type: 'tag',
                    id: yyvstack[yysp]
                };
                break;
            case 31:
            /*! Production::    first_token : TEXT */ case 62:
                /*! Production::    line_end : RPAREN */ this.$ = {
                    type: 'text',
                    val: yyvstack[yysp]
                };
                break;
            case 32:
                /*! Production::    first_token : COMMENT */ $0701b6dda164cf78$var$debug('first_token: COMMENT: $COMMENT=', yyvstack[yysp]);
                this.$ = {
                    type: 'comment',
                    state: 'TEXT_START'
                };
                break;
            case 33:
                /*! Production::    first_token : COMMENT_HTML */ $0701b6dda164cf78$var$debug('first_token: COMMENT_HTML: $COMMENT_HTML=', yyvstack[yysp]);
                this.$ = {
                    type: 'html_comment',
                    state: 'TEXT_START'
                };
                break;
            case 34:
            /*! Production::    first_token : UNBUF_CODE */ case 61:
                /*! Production::    line_end : UNBUF_CODE */ this.$ = {
                    type: 'unbuf_code',
                    val: yyvstack[yysp],
                    state: 'UNBUF_CODE_FOLLOWER'
                };
                break;
            case 35:
                /*! Production::    first_token : UNBUF_CODE_BLOCK */ this.$ = {
                    type: 'unbuf_code',
                    val: yyvstack[yysp],
                    state: 'UNBUF_CODE_BLOCK'
                };
                break;
            case 36:
                /*! Production::    first_token : MIXIN_CALL */ $0701b6dda164cf78$var$debug('first_token MIXIN_CALL: $MIXIN_CALL=', yyvstack[yysp]);
                this.$ = {
                    type: 'mixin_call',
                    name: yyvstack[yysp].trim(),
                    state: 'MIXIN_CALL'
                };
                break;
            case 37:
                /*! Production::    first_token : KEYWORD */ this.$ = {
                    type: yyvstack[yysp]
                };
                break;
            case 38:
                /*! Production::    first_token : PIPE */ this.$ = {
                    type: 'text'
                };
                break;
            case 39:
                /*! Production::    first_token : RCURLY */ this.$ = {
                    type: 'block_end'
                };
                break;
            case 40:
                /*! Production::    first_token : DOT_END */ $0701b6dda164cf78$var$debug('line: DOT_END');
                this.$ = {
                    state: 'TEXT_START'
                };
                break;
            case 41:
                /*! Production::    first_token : SPACE */ this.$ = {
                };
                break;
            case 42:
                /*! Production::    first_token : CONDITIONAL */ this.$ = {
                    type: 'conditional',
                    name: yyvstack[yysp]
                };
                break;
            case 43:
                /*! Production::    first_token : INTERP_START INTERP_NAME INTERP_VAL INTERP_END */ var INTERP_NAME = yyvstack[yysp - 2][1];
                var INTERP_VAL = yyvstack[yysp - 1][2];
                $0701b6dda164cf78$var$debug('line: INTERP_START INTERP_NAME INTERP_VAL INTERP_END: INTERP_NAME=', INTERP_NAME, ', INTERP_VAL=', INTERP_VAL);
                this.$ = {
                    type: 'tag',
                    name: INTERP_NAME,
                    val: INTERP_VAL
                };
                break;
            case 44:
                /*! Production::    first_token : INTERPOLATION_START */ $0701b6dda164cf78$var$debug('line: INTERPOLATION_START');
                this.$ = {
                    type: 'interpolation_start',
                    state: 'INTERPOLATION_START'
                };
                break;
            case 45:
                /*! Production::    first_token : INTERP_VAL */ $0701b6dda164cf78$var$debug('line: INTERP_VAL: $INTERP_VAL=', yyvstack[yysp]);
                $0701b6dda164cf78$var$debug('AttrResolver=', $c1Lgv$AttrResolver);
                const resultInterpVal2 = $0701b6dda164cf78$var$attrResolver.resolve({
                    name: 'anonymous',
                    val: yyvstack[yysp]
                });
                $0701b6dda164cf78$var$debug('AttrResolver returned=', resultInterpVal2);
                this.$ = {
                    type: 'text',
                    val: resultInterpVal2.val
                };
                break;
            case 46:
                /*! Production::    first_token : MIXIN_CALL_TODO */ $0701b6dda164cf78$var$debug('line: MIXIN_CALL_TODO: $MIXIN_CALL_TODO=', yyvstack[yysp]);
                this.$ = {
                };
                break;
            case 47:
                /*! Production::    first_token : ESCAPED_TEXT_INTERPOLATION */ this.$ = {
                    type: 'escaped_text',
                    name: yyvstack[yysp]
                };
                break;
            case 48:
                /*! Production::    first_token : UNESCAPED_TEXT_INTERPOLATION */ this.$ = {
                    type: 'unescaped_text',
                    name: yyvstack[yysp]
                };
                break;
            case 49:
                /*! Production::    first_token : TAG_INTERPOLATION */ $0701b6dda164cf78$var$debug('line: TAG_INTERPOLATION: $TAG_INTERPOLATION=', yyvstack[yysp]);
                this.$ = {
                    type: 'tag',
                    name: yyvstack[yysp][0],
                    val: yyvstack[yysp][2]
                };
                if (yyvstack[yysp][1]) {
                    const resultInterpVal3 = $510a014853e7284e$export$2e2bcd8739ae039.parse(yyvstack[yysp][1]);
                    $0701b6dda164cf78$var$debug('parseAttrs returned=', resultInterpVal3);
                    this.$ = Object.assign(this.$, {
                        attrs: resultInterpVal3
                    });
                }
                break;
            case 50:
                /*! Production::    tag_part : TAG_ID */ this.$ = {
                    id: yyvstack[yysp]
                };
                break;
            case 51:
                /*! Production::    tag_part : tag_part_repetition_plus */ let attrs1 = yyvstack[yysp].map((cn)=>{
                    return {
                        name: 'class',
                        val: $0701b6dda164cf78$var$quote(cn)
                    };
                });
                this.$ = {
                    type: 'tag',
                    attrs: attrs1
                };
                break;
            case 52:
                /*! Production::    tag_part : FILTER */ // TODO: Filters evidently don't need a "dot" at the end or pipes. Probably treat the same as text tag
                this.$ = {
                    filter: yyvstack[yysp],
                    state: 'TEXT_START'
                };
                break;
            case 53:
                /*! Production::    tag_part : AT_ATTRS */ $0701b6dda164cf78$var$debug('tag_part AT_ATTRS: $AT_ATTRS=', yyvstack[yysp]);
                if (yyvstack[yysp].includes('{') && yyvstack[yysp].includes('}')) {
                    let func = Function('return (' + yyvstack[yysp].substring(12, yyvstack[yysp].length - 1) + ')');
                    let entries2 = Object.entries(func());
                    $0701b6dda164cf78$var$debug('entries2=', entries2);
                    let attrs2 = Object.entries(entries2).map(([index, [key, value]])=>{
                        $0701b6dda164cf78$var$debug('name=', key, 'value=', value);
                        return {
                            name: key,
                            val: $0701b6dda164cf78$var$quote(value)
                        };
                    });
                    this.$ = {
                        type: 'tag',
                        attrs: attrs2
                    };
                } else this.$ = {
                    type: 'tag',
                    attrs: [
                        {
                            val: yyvstack[yysp].substring(12, yyvstack[yysp].length - 1)
                        }
                    ]
                };
                break;
            case 55:
                /*! Production::    attrs : LPAREN ATTR_TEXT RPAREN */ $0701b6dda164cf78$var$debug('1 Calling parseAttrs with ', yyvstack[yysp - 1]);
                this.$ = {
                };
                try {
                    const attrs = $510a014853e7284e$export$2e2bcd8739ae039.parse(yyvstack[yysp - 1].trim());
                    $0701b6dda164cf78$var$debug('attrs=', attrs);
                    attrs.forEach((attr)=>{
                        if (!$c1Lgv$lodash.isEmpty(attr)) this.$ = $0701b6dda164cf78$var$merge(this.$, {
                            attrs: [
                                attr
                            ]
                        });
                    });
                } catch (e) {
                    console.error('Error parsing ' + yyvstack[yysp - 1], e);
                }
                break;
            case 56:
                /*! Production::    attrs : LPAREN CONDITION RPAREN */ $0701b6dda164cf78$var$debug('attrs: LPAREN CONDITION RPAREN');
                this.$ = {
                    condition: yyvstack[yysp - 1]
                };
                break;
            case 57:
                /*! Production::    line_end : %epsilon */ // default action (generated by JISON mode classic/merge :: 0,VT,VA,-,-,-,-,-,-):
                this.$ = undefined;
                // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,-,-,-,-,-,-)
                $0701b6dda164cf78$var$debug('line_end: <blank>');
                break;
            case 58:
                /*! Production::    line_end : DOT_END */ $0701b6dda164cf78$var$debug('line_end: DOT_END');
                this.$ = {
                    state: 'TEXT_START'
                };
                break;
            case 59:
                /*! Production::    line_end : ASSIGNMENT_VALUE */ this.$ = {
                    val: yyvstack[yysp]
                };
                break;
            case 60:
                /*! Production::    line_end : TEXT */ $0701b6dda164cf78$var$debug('line_end: TEXT: $TEXT=', yyvstack[yysp]);
                if (yyvstack[yysp].includes('#')) {
                    let elemsReturned = $0701b6dda164cf78$var$createElems(yyvstack[yysp], this.yy.parser);
                    $0701b6dda164cf78$var$debug('elemsReturned', elemsReturned);
                    this.$ = {
                        children: elemsReturned
                    };
                } else this.$ = {
                    type: 'text',
                    val: yyvstack[yysp]
                };
                break;
            case 63:
                /*! Production::    line_splitter : SPACE */ $0701b6dda164cf78$var$debug('line_splitter: SPACE');
                this.$ = {
                };
                break;
            case 64:
                /*! Production::    line_splitter : ASSIGNMENT */ this.$ = {
                    assignment: true
                };
                break;
            case 65:
                /*! Production::    line_splitter : DOT_END */ $0701b6dda164cf78$var$debug('line_splitter: DOT_END');
                this.$ = {
                    state: 'TEXT_START'
                };
                break;
            case 66:
            /*! Production::    line_start_repetition_plus : tag_part */ case 70:
                /*! Production::    tag_part_repetition_plus : CLASSNAME */ this.$ = [
                    yyvstack[yysp]
                ];
                break;
            case 67:
            /*! Production::    line_start_repetition_plus : line_start_repetition_plus tag_part */ case 71:
                /*! Production::    tag_part_repetition_plus : tag_part_repetition_plus CLASSNAME */ yyvstack[yysp - 1].push(yyvstack[yysp]);
                this.$ = yyvstack[yysp - 1];
                break;
            case 68:
                /*! Production::    line_start_option : %epsilon */ this.$ = undefined;
                break;
            case 69:
                /*! Production::    line_start_option : ATTR_TEXT_CONT */ this.$ = yyvstack[yysp];
                break;
        }
    },
    table: $0701b6dda164cf78$var$bt({
        len: $0701b6dda164cf78$var$u([
            38,
            1,
            0,
            1,
            10,
            $0701b6dda164cf78$var$s,
            [
                0,
                4
            ],
            16,
            $0701b6dda164cf78$var$s,
            [
                0,
                17
            ],
            1,
            $0701b6dda164cf78$var$s,
            [
                0,
                6
            ],
            12,
            $0701b6dda164cf78$var$s,
            [
                0,
                3
            ],
            2,
            $0701b6dda164cf78$var$s,
            [
                0,
                3
            ],
            8,
            36,
            $0701b6dda164cf78$var$s,
            [
                0,
                4
            ],
            15,
            14,
            13,
            $0701b6dda164cf78$var$c,
            [
                26,
                4
            ],
            1,
            1,
            $0701b6dda164cf78$var$c,
            [
                20,
                5
            ],
            $0701b6dda164cf78$var$c,
            [
                40,
                8
            ],
            4,
            9,
            $0701b6dda164cf78$var$c,
            [
                5,
                3
            ],
            $0701b6dda164cf78$var$c,
            [
                72,
                3
            ],
            $0701b6dda164cf78$var$c,
            [
                51,
                7
            ]
        ]),
        symbol: $0701b6dda164cf78$var$u([
            1,
            3,
            4,
            5,
            $0701b6dda164cf78$var$s,
            [
                7,
                5,
                1
            ],
            14,
            15,
            $0701b6dda164cf78$var$s,
            [
                17,
                13,
                1
            ],
            31,
            $0701b6dda164cf78$var$s,
            [
                33,
                6,
                1
            ],
            $0701b6dda164cf78$var$s,
            [
                43,
                6,
                1
            ],
            53,
            $0701b6dda164cf78$var$s,
            [
                1,
                3
            ],
            3,
            4,
            6,
            11,
            26,
            27,
            42,
            48,
            50,
            $0701b6dda164cf78$var$c,
            [
                10,
                5
            ],
            14,
            15,
            26,
            27,
            37,
            38,
            42,
            47,
            48,
            51,
            53,
            30,
            $0701b6dda164cf78$var$c,
            [
                17,
                12
            ],
            39,
            40,
            $0701b6dda164cf78$var$c,
            [
                81,
                4
            ],
            13,
            26,
            41,
            49,
            $0701b6dda164cf78$var$c,
            [
                88,
                30
            ],
            $0701b6dda164cf78$var$c,
            [
                87,
                7
            ],
            $0701b6dda164cf78$var$c,
            [
                75,
                13
            ],
            $0701b6dda164cf78$var$c,
            [
                15,
                5
            ],
            8,
            11,
            12,
            16,
            26,
            27,
            39,
            40,
            42,
            52,
            $0701b6dda164cf78$var$c,
            [
                29,
                12
            ],
            48,
            31,
            13,
            13,
            1,
            6,
            13,
            8,
            12,
            $0701b6dda164cf78$var$c,
            [
                96,
                5
            ],
            $0701b6dda164cf78$var$c,
            [
                23,
                3
            ],
            $0701b6dda164cf78$var$c,
            [
                138,
                3
            ],
            32,
            5,
            $0701b6dda164cf78$var$c,
            [
                34,
                9
            ],
            42,
            13
        ]),
        type: $0701b6dda164cf78$var$u([
            $0701b6dda164cf78$var$s,
            [
                2,
                31
            ],
            $0701b6dda164cf78$var$s,
            [
                0,
                7
            ],
            1,
            $0701b6dda164cf78$var$c,
            [
                17,
                11
            ],
            $0701b6dda164cf78$var$c,
            [
                31,
                16
            ],
            $0701b6dda164cf78$var$c,
            [
                57,
                23
            ],
            $0701b6dda164cf78$var$c,
            [
                88,
                36
            ],
            $0701b6dda164cf78$var$c,
            [
                18,
                15
            ],
            $0701b6dda164cf78$var$c,
            [
                65,
                26
            ],
            $0701b6dda164cf78$var$c,
            [
                78,
                31
            ],
            2,
            2
        ]),
        state: $0701b6dda164cf78$var$u([
            1,
            3,
            4,
            9,
            10,
            37,
            34,
            44,
            42,
            50,
            37,
            48,
            34,
            57,
            64,
            $0701b6dda164cf78$var$c,
            [
                13,
                5
            ],
            65,
            37,
            34,
            66,
            71
        ]),
        mode: $0701b6dda164cf78$var$u([
            $0701b6dda164cf78$var$s,
            [
                1,
                32
            ],
            2,
            $0701b6dda164cf78$var$c,
            [
                8,
                8
            ],
            $0701b6dda164cf78$var$s,
            [
                2,
                3
            ],
            $0701b6dda164cf78$var$c,
            [
                7,
                5
            ],
            $0701b6dda164cf78$var$c,
            [
                19,
                4
            ],
            $0701b6dda164cf78$var$s,
            [
                2,
                5
            ],
            $0701b6dda164cf78$var$c,
            [
                6,
                6
            ],
            $0701b6dda164cf78$var$c,
            [
                16,
                5
            ],
            $0701b6dda164cf78$var$s,
            [
                1,
                35
            ],
            $0701b6dda164cf78$var$c,
            [
                64,
                12
            ],
            $0701b6dda164cf78$var$c,
            [
                62,
                6
            ],
            $0701b6dda164cf78$var$c,
            [
                13,
                13
            ],
            $0701b6dda164cf78$var$c,
            [
                76,
                8
            ],
            $0701b6dda164cf78$var$c,
            [
                77,
                8
            ],
            $0701b6dda164cf78$var$c,
            [
                23,
                9
            ],
            $0701b6dda164cf78$var$c,
            [
                11,
                8
            ],
            $0701b6dda164cf78$var$c,
            [
                12,
                5
            ]
        ]),
        goto: $0701b6dda164cf78$var$u([
            2,
            15,
            18,
            31,
            $0701b6dda164cf78$var$s,
            [
                5,
                4,
                1
            ],
            38,
            13,
            14,
            11,
            12,
            16,
            17,
            $0701b6dda164cf78$var$s,
            [
                19,
                9,
                1
            ],
            29,
            28,
            30,
            32,
            33,
            35,
            36,
            39,
            3,
            40,
            41,
            43,
            38,
            47,
            45,
            46,
            $0701b6dda164cf78$var$s,
            [
                14,
                4
            ],
            49,
            52,
            51,
            14,
            14,
            35,
            36,
            14,
            53,
            $0701b6dda164cf78$var$s,
            [
                51,
                5
            ],
            54,
            $0701b6dda164cf78$var$s,
            [
                51,
                6
            ],
            55,
            56,
            57,
            61,
            62,
            58,
            63,
            59,
            60,
            $0701b6dda164cf78$var$c,
            [
                73,
                30
            ],
            $0701b6dda164cf78$var$s,
            [
                16,
                4
            ],
            38,
            52,
            51,
            16,
            16,
            $0701b6dda164cf78$var$c,
            [
                11,
                3
            ],
            $0701b6dda164cf78$var$s,
            [
                68,
                4
            ],
            69,
            68,
            67,
            $0701b6dda164cf78$var$s,
            [
                68,
                3
            ],
            55,
            56,
            68,
            $0701b6dda164cf78$var$s,
            [
                66,
                4
            ],
            70,
            $0701b6dda164cf78$var$s,
            [
                66,
                7
            ],
            72,
            73,
            74,
            7,
            $0701b6dda164cf78$var$s,
            [
                75,
                4,
                1
            ],
            55,
            56,
            $0701b6dda164cf78$var$s,
            [
                21,
                5
            ],
            79,
            $0701b6dda164cf78$var$s,
            [
                21,
                3
            ],
            80,
            81,
            $0701b6dda164cf78$var$s,
            [
                23,
                5
            ],
            82,
            83,
            $0701b6dda164cf78$var$s,
            [
                23,
                3
            ],
            84
        ])
    }),
    defaultActions: $0701b6dda164cf78$var$bda({
        idx: $0701b6dda164cf78$var$u([
            2,
            $0701b6dda164cf78$var$s,
            [
                5,
                4,
                1
            ],
            $0701b6dda164cf78$var$s,
            [
                10,
                17,
                1
            ],
            $0701b6dda164cf78$var$s,
            [
                28,
                6,
                1
            ],
            35,
            36,
            37,
            39,
            40,
            41,
            $0701b6dda164cf78$var$s,
            [
                44,
                4,
                1
            ],
            51,
            52,
            54,
            57,
            $0701b6dda164cf78$var$s,
            [
                59,
                8,
                1
            ],
            68,
            69,
            73,
            74,
            77,
            $0701b6dda164cf78$var$s,
            [
                79,
                6,
                1
            ]
        ]),
        goto: $0701b6dda164cf78$var$u([
            1,
            $0701b6dda164cf78$var$s,
            [
                10,
                4,
                1
            ],
            15,
            $0701b6dda164cf78$var$s,
            [
                27,
                16,
                1
            ],
            $0701b6dda164cf78$var$s,
            [
                44,
                6,
                1
            ],
            52,
            53,
            54,
            2,
            4,
            5,
            17,
            63,
            64,
            65,
            50,
            70,
            71,
            6,
            $0701b6dda164cf78$var$s,
            [
                58,
                5,
                1
            ],
            9,
            67,
            18,
            26,
            69,
            55,
            56,
            19,
            22,
            43,
            8,
            24,
            25,
            20
        ])
    }),
    parseError: function parseError(str, hash, ExceptionClass) {
        if (hash.recoverable) {
            if (typeof this.trace === 'function') this.trace(str);
            hash.destroy(); // destroy... well, *almost*!
        } else {
            if (typeof this.trace === 'function') this.trace(str);
            if (!ExceptionClass) ExceptionClass = this.JisonParserError;
            throw new ExceptionClass(str, hash);
        }
    },
    parse: function parse(input) {
        var self = this;
        var stack = new Array(128); // token stack: stores token which leads to state at the same index (column storage)
        var sstack = new Array(128); // state stack: stores states (column storage)
        var tstack = []; // token stack (only used when `%options token_stack` support has been enabled)
        var vstack = new Array(128); // semantic value stack
        var table = this.table;
        var sp = 0; // 'stack pointer': index into the stacks
        var symbol1 = 0;
        var TERROR = this.TERROR;
        var EOF = this.EOF;
        var ERROR_RECOVERY_TOKEN_DISCARD_COUNT = this.options.errorRecoveryTokenDiscardCount | 0 || 3;
        var NO_ACTION = [
            0,
            85 /* === table.length :: ensures that anyone using this new state will fail dramatically! */ 
        ];
        var lexer;
        if (this.__lexer__) lexer = this.__lexer__;
        else lexer = this.__lexer__ = Object.create(this.lexer);
        var sharedState_yy = {
            parseError: undefined,
            quoteName: undefined,
            lexer: undefined,
            parser: undefined,
            pre_parse: undefined,
            post_parse: undefined,
            pre_lex: undefined,
            post_lex: undefined // WARNING: must be written this way for the code expanders to work correctly in both ES5 and ES6 modes!
        };
        var ASSERT;
        if (typeof $c1Lgv$assert !== 'function') ASSERT = function JisonAssert(cond, msg) {
            if (!cond) throw new Error('assertion failed: ' + (msg || '***'));
        };
        else ASSERT = $c1Lgv$assert;
        this.yyGetSharedState = function yyGetSharedState() {
            return sharedState_yy;
        };
        function shallow_copy_noclobber(dst, src) {
            for(var k in src)if (typeof dst[k] === 'undefined' && Object.prototype.hasOwnProperty.call(src, k)) dst[k] = src[k];
        }
        // copy state
        shallow_copy_noclobber(sharedState_yy, this.yy);
        sharedState_yy.lexer = lexer;
        sharedState_yy.parser = this;
        // Does the shared state override the default `parseError` that already comes with this instance?
        if (typeof sharedState_yy.parseError === 'function') this.parseError = function parseErrorAlt(str, hash, ExceptionClass) {
            if (!ExceptionClass) ExceptionClass = this.JisonParserError;
            return sharedState_yy.parseError.call(this, str, hash, ExceptionClass);
        };
        else this.parseError = this.originalParseError;
        // Does the shared state override the default `quoteName` that already comes with this instance?
        if (typeof sharedState_yy.quoteName === 'function') this.quoteName = function quoteNameAlt(id_str) {
            return sharedState_yy.quoteName.call(this, id_str);
        };
        else this.quoteName = this.originalQuoteName;
        // set up the cleanup function; make it an API so that external code can re-use this one in case of
        // calamities or when the `%options no-try-catch` option has been specified for the grammar, in which
        // case this parse() API method doesn't come with a `finally { ... }` block any more!
        //
        // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
        //       or else your `sharedState`, etc. references will be *wrong*!
        this.cleanupAfterParse = function parser_cleanupAfterParse(resultValue, invoke_post_methods, do_not_nuke_errorinfos) {
            var rv;
            if (invoke_post_methods) {
                var hash;
                if (sharedState_yy.post_parse || this.post_parse) // create an error hash info instance: we re-use this API in a **non-error situation**
                // as this one delivers all parser internals ready for access by userland code.
                hash = this.constructParseErrorInfo(null, null, null, false);
                if (sharedState_yy.post_parse) {
                    rv = sharedState_yy.post_parse.call(this, sharedState_yy, resultValue, hash);
                    if (typeof rv !== 'undefined') resultValue = rv;
                }
                if (this.post_parse) {
                    rv = this.post_parse.call(this, sharedState_yy, resultValue, hash);
                    if (typeof rv !== 'undefined') resultValue = rv;
                }
                // cleanup:
                if (hash && hash.destroy) hash.destroy();
            }
            if (this.__reentrant_call_depth > 1) return resultValue; // do not (yet) kill the sharedState when this is a reentrant run.
            // clean up the lingering lexer structures as well:
            if (lexer.cleanupAfterLex) lexer.cleanupAfterLex(do_not_nuke_errorinfos);
            // prevent lingering circular references from causing memory leaks:
            if (sharedState_yy) {
                sharedState_yy.lexer = undefined;
                sharedState_yy.parser = undefined;
                if (lexer.yy === sharedState_yy) lexer.yy = undefined;
            }
            sharedState_yy = undefined;
            this.parseError = this.originalParseError;
            this.quoteName = this.originalQuoteName;
            // nuke the vstack[] array at least as that one will still reference obsoleted user values.
            // To be safe, we nuke the other internal stack columns as well...
            stack.length = 0; // fastest way to nuke an array without overly bothering the GC
            sstack.length = 0;
            vstack.length = 0;
            sp = 0;
            // nuke the error hash info instances created during this run.
            // Userland code must COPY any data/references
            // in the error hash instance(s) it is more permanently interested in.
            if (!do_not_nuke_errorinfos) {
                for(var i = this.__error_infos.length - 1; i >= 0; i--){
                    var el = this.__error_infos[i];
                    if (el && typeof el.destroy === 'function') el.destroy();
                }
                this.__error_infos.length = 0;
            }
            return resultValue;
        };
        // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
        //       or else your `lexer`, `sharedState`, etc. references will be *wrong*!
        this.constructParseErrorInfo = function parser_constructParseErrorInfo(msg, ex, expected, recoverable) {
            var pei = {
                errStr: msg,
                exception: ex,
                text: lexer.match,
                value: lexer.yytext,
                token: this.describeSymbol(symbol1) || symbol1,
                token_id: symbol1,
                line: lexer.yylineno,
                expected: expected,
                recoverable: recoverable,
                state: state,
                action: action,
                new_state: newState,
                symbol_stack: stack,
                state_stack: sstack,
                value_stack: vstack,
                stack_pointer: sp,
                yy: sharedState_yy,
                lexer: lexer,
                parser: this,
                // and make sure the error info doesn't stay due to potential
                // ref cycle via userland code manipulations.
                // These would otherwise all be memory leak opportunities!
                //
                // Note that only array and object references are nuked as those
                // constitute the set of elements which can produce a cyclic ref.
                // The rest of the members is kept intact as they are harmless.
                destroy: function destructParseErrorInfo() {
                    // remove cyclic references added to error info:
                    // info.yy = null;
                    // info.lexer = null;
                    // info.value = null;
                    // info.value_stack = null;
                    // ...
                    var rec = !!this.recoverable;
                    for(var key in this)if (this.hasOwnProperty(key) && typeof key === 'object') this[key] = undefined;
                    this.recoverable = rec;
                }
            };
            // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
            this.__error_infos.push(pei);
            return pei;
        };
        function getNonTerminalFromCode(symbol) {
            var tokenName = self.getSymbolName(symbol);
            if (!tokenName) tokenName = symbol;
            return tokenName;
        }
        // lex function that supports token stacks
        function lex() {
            var token;
            token = tstack.pop() || lexer.lex() || EOF;
            // if token isn't its numeric value, convert
            if (typeof token !== 'number') {
                if (token instanceof Array) {
                    tstack = token;
                    token = tstack.pop();
                }
                // if token isn't its numeric value, convert
                if (typeof token !== 'number') token = self.symbols_[token] || token;
            }
            return token || EOF;
        }
        var state, action, r, t;
        var yyval = {
            $: true,
            _$: undefined,
            yy: sharedState_yy
        };
        var p;
        var yyrulelen;
        var this_production;
        var newState;
        var retval = false;
        try {
            this.__reentrant_call_depth++;
            lexer.setInput(input, sharedState_yy);
            // NOTE: we *assume* no lexer pre/post handlers are set up *after* 
            // this initial `setInput()` call: hence we can now check and decide
            // whether we'll go with the standard, slower, lex() API or the
            // `fast_lex()` one:
            if (typeof lexer.canIUse === 'function') {
                var lexerInfo = lexer.canIUse();
                if (lexerInfo.fastLex && typeof fastLex === 'function') lex = fastLex;
            }
            vstack[sp] = null;
            sstack[sp] = 0;
            stack[sp] = 0;
            ++sp;
            if (this.pre_parse) this.pre_parse.call(this, sharedState_yy);
            if (sharedState_yy.pre_parse) sharedState_yy.pre_parse.call(this, sharedState_yy);
            newState = sstack[sp - 1];
            for(;;){
                // retrieve state number from top of stack
                state = newState; // sstack[sp - 1];
                // use default actions if available
                if (this.defaultActions[state]) {
                    action = 2;
                    newState = this.defaultActions[state];
                } else {
                    // The single `==` condition below covers both these `===` comparisons in a single
                    // operation:
                    //
                    //     if (symbol === null || typeof symbol === 'undefined') ...
                    if (!symbol1) symbol1 = lex();
                    // read action for current state and first input
                    t = table[state] && table[state][symbol1] || NO_ACTION;
                    newState = t[1];
                    action = t[0];
                    // handle parse error
                    if (!action) {
                        var errStr;
                        var errSymbolDescr = this.describeSymbol(symbol1) || symbol1;
                        var expected1 = this.collect_expected_token_set(state);
                        // Report error
                        if (typeof lexer.yylineno === 'number') errStr = 'Parse error on line ' + (lexer.yylineno + 1) + ': ';
                        else errStr = 'Parse error: ';
                        if (typeof lexer.showPosition === 'function') errStr += '\n' + lexer.showPosition(69, 10) + '\n';
                        if (expected1.length) errStr += 'Expecting ' + expected1.join(', ') + ', got unexpected ' + errSymbolDescr;
                        else errStr += 'Unexpected ' + errSymbolDescr;
                        // we cannot recover from the error!
                        p = this.constructParseErrorInfo(errStr, null, expected1, false);
                        r = this.parseError(p.errStr, p, this.JisonParserError);
                        if (typeof r !== 'undefined') retval = r;
                        break;
                    }
                }
                switch(action){
                    // catch misc. parse failures:
                    default:
                        // this shouldn't happen, unless resolve defaults are off
                        if (action instanceof Array) {
                            p = this.constructParseErrorInfo('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol1, null, null, false);
                            r = this.parseError(p.errStr, p, this.JisonParserError);
                            if (typeof r !== 'undefined') retval = r;
                            break;
                        }
                        // Another case of better safe than sorry: in case state transitions come out of another error recovery process
                        // or a buggy LUT (LookUp Table):
                        p = this.constructParseErrorInfo('Parsing halted. No viable error recovery approach available due to internal system failure.', null, null, false);
                        r = this.parseError(p.errStr, p, this.JisonParserError);
                        if (typeof r !== 'undefined') retval = r;
                        break;
                    // shift:
                    case 1:
                        stack[sp] = symbol1;
                        vstack[sp] = lexer.yytext;
                        sstack[sp] = newState; // push state
                        ++sp;
                        symbol1 = 0;
                        continue;
                    // reduce:
                    case 2:
                        this_production = this.productions_[newState - 1]; // `this.productions_[]` is zero-based indexed while states start from 1 upwards...
                        yyrulelen = this_production[1];
                        r = this.performAction.call(yyval, newState, sp - 1, vstack);
                        if (typeof r !== 'undefined') {
                            retval = r;
                            break;
                        }
                        // pop off stack
                        sp -= yyrulelen;
                        // don't overwrite the `symbol` variable: use a local var to speed things up:
                        var ntsymbol = this_production[0]; // push nonterminal (reduce)
                        stack[sp] = ntsymbol;
                        vstack[sp] = yyval.$;
                        // goto new state = table[STATE][NONTERMINAL]
                        newState = table[sstack[sp - 1]][ntsymbol];
                        sstack[sp] = newState;
                        ++sp;
                        continue;
                    // accept:
                    case 3:
                        if (sp !== -2) {
                            retval = true;
                            // Return the `$accept` rule's `$$` result, if available.
                            //
                            // Also note that JISON always adds this top-most `$accept` rule (with implicit,
                            // default, action):
                            //
                            //     $accept: <startSymbol> $end
                            //                  %{ $$ = $1; @$ = @1; %}
                            //
                            // which, combined with the parse kernel's `$accept` state behaviour coded below,
                            // will produce the `$$` value output of the <startSymbol> rule as the parse result,
                            // IFF that result is *not* `undefined`. (See also the parser kernel code.)
                            //
                            // In code:
                            //
                            //                  %{
                            //                      @$ = @1;            // if location tracking support is included
                            //                      if (typeof $1 !== 'undefined')
                            //                          return $1;
                            //                      else
                            //                          return true;           // the default parse result if the rule actions don't produce anything
                            //                  %}
                            sp--;
                            if (typeof vstack[sp] !== 'undefined') retval = vstack[sp];
                        }
                        break;
                }
                break;
            }
        } catch (ex) {
            // report exceptions through the parseError callback too, but keep the exception intact
            // if it is a known parser or lexer error which has been thrown by parseError() already:
            if (ex instanceof this.JisonParserError) throw ex;
            else if (lexer && typeof lexer.JisonLexerError === 'function' && ex instanceof lexer.JisonLexerError) throw ex;
            p = this.constructParseErrorInfo('Parsing aborted due to exception.', ex, null, false);
            retval = false;
            r = this.parseError(p.errStr, p, this.JisonParserError);
            if (typeof r !== 'undefined') retval = r;
        } finally{
            retval = this.cleanupAfterParse(retval, true, true);
            this.__reentrant_call_depth--;
        } // /finally
        return retval;
    }
};
$0701b6dda164cf78$var$parser.originalParseError = $0701b6dda164cf78$var$parser.parseError;
$0701b6dda164cf78$var$parser.originalQuoteName = $0701b6dda164cf78$var$parser.quoteName;
/* lexer generated by jison-lex 0.6.1-216 */ /*
 * Returns a Lexer object of the following structure:
 *
 *  Lexer: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a direct reference!
 *
 *               This "shared context" object was passed to the lexer by way of 
 *               the `lexer.setInput(str, yy)` API before you may use it.
 *
 *               This "shared context" object is passed to the lexer action code in `performAction()`
 *               so userland code in the lexer actions may communicate with the outside world 
 *               and/or other lexer rules' actions in more or less complex ways.
 *
 *  }
 *
 *  Lexer.prototype: {
 *    EOF: 1,
 *    ERROR: 2,
 *
 *    yy:        The overall "shared context" object reference.
 *
 *    JisonLexerError: function(msg, hash),
 *
 *    performAction: function lexer__performAction(yy, yyrulenumber, YY_START),
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `lexer` instance. 
 *                               `yy_` is an alias for `this` lexer instance reference used internally.
 *
 *               - `yy`      : a reference to the `yy` "shared state" object which was passed to the lexer
 *                             by way of the `lexer.setInput(str, yy)` API before.
 *
 *                             Note:
 *                             The extra arguments you specified in the `%parse-param` statement in your
 *                             **parser** grammar definition file are passed to the lexer via this object
 *                             reference as member variables.
 *
 *               - `yyrulenumber`   : index of the matched lexer rule (regex), used internally.
 *
 *               - `YY_START`: the current lexer "start condition" state.
 *
 *    parseError: function(str, hash, ExceptionClass),
 *
 *    constructLexErrorInfo: function(error_message, is_recoverable),
 *               Helper function.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this lexer kernel in many places; example usage:
 *
 *                   var infoObj = lexer.constructParseErrorInfo('fail!', true);
 *                   var retVal = lexer.parseError(infoObj.errStr, infoObj, lexer.JisonLexerError);
 *
 *    options: { ... lexer %options ... },
 *
 *    lex: function(),
 *               Produce one token of lexed input, which was passed in earlier via the `lexer.setInput()` API.
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of the **lexer** grammar:
 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
 *
 *               WARNING:
 *               Lexer's additional `args...` parameters (via lexer's `%parse-param`) MAY conflict with
 *               any attributes already added to `yy` by the **parser** or the jison run-time; 
 *               when such a collision is detected an exception is thrown to prevent the generated run-time 
 *               from silently accepting this confusing and potentially hazardous situation! 
 *
 *    cleanupAfterLex: function(do_not_nuke_errorinfos),
 *               Helper function.
 *
 *               This helper API is invoked when the **parse process** has completed: it is the responsibility
 *               of the **parser** (or the calling userland code) to invoke this method once cleanup is desired. 
 *
 *               This helper may be invoked by user code to ensure the internal lexer gets properly garbage collected.
 *
 *    setInput: function(input, [yy]),
 *
 *
 *    input: function(),
 *
 *
 *    unput: function(str),
 *
 *
 *    more: function(),
 *
 *
 *    reject: function(),
 *
 *
 *    less: function(n),
 *
 *
 *    pastInput: function(n),
 *
 *
 *    upcomingInput: function(n),
 *
 *
 *    showPosition: function(),
 *
 *
 *    test_match: function(regex_match_array, rule_index),
 *
 *
 *    next: function(),
 *
 *
 *    begin: function(condition),
 *
 *
 *    pushState: function(condition),
 *
 *
 *    popState: function(),
 *
 *
 *    topState: function(),
 *
 *
 *    _currentRules: function(),
 *
 *
 *    stateStackSize: function(),
 *
 *
 *    performAction: function(yy, yy_, yyrulenumber, YY_START),
 *
 *
 *    rules: [...],
 *
 *
 *    conditions: {associative list: name ==> set},
 *  }
 *
 *
 *  token location info (`yylloc`): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *  }
 *
 * while `this` will reference the current lexer instance.
 *
 * When `parseError` is invoked by the lexer, the default implementation will
 * attempt to invoke `yy.parser.parseError()`; when this callback is not provided
 * it will try to invoke `yy.parseError()` instead. When that callback is also not
 * provided, a `JisonLexerError` exception will be thrown containing the error
 * message and `hash`, as constructed by the `constructLexErrorInfo()` API.
 *
 * Note that the lexer's `JisonLexerError` error class is passed via the
 * `ExceptionClass` argument, which is invoked to construct the exception
 * instance to be thrown, so technically `parseError` will throw the object
 * produced by the `new ExceptionClass(str, hash)` JavaScript expression.
 *
 * ---
 *
 * You can specify lexer options by setting / modifying the `.options` object of your Lexer instance.
 * These options are available:
 *
 * (Options are permanent.)
 *  
 *  yy: {
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *  }
 *
 *  lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 * WARNING: the next set of options are not meant to be changed. They echo the abilities of
 * the lexer as per when it was compiled!
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this %option has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */ var $0701b6dda164cf78$var$lexer = function() {
    /**
   * See also:
   * http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
   * but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
   * with userland code which might access the derived class in a 'classic' way.
   *
   * @public
   * @constructor
   * @nocollapse
   */ function JisonLexerError(msg, hash) {
        Object.defineProperty(this, 'name', {
            enumerable: false,
            writable: false,
            value: 'JisonLexerError'
        });
        if (msg == null) msg = '???';
        Object.defineProperty(this, 'message', {
            enumerable: false,
            writable: true,
            value: msg
        });
        this.hash = hash;
        var stacktrace;
        if (hash && hash.exception instanceof Error) {
            var ex2 = hash.exception;
            this.message = ex2.message || msg;
            stacktrace = ex2.stack;
        }
        if (!stacktrace) {
            if (Error.hasOwnProperty('captureStackTrace')) // V8
            Error.captureStackTrace(this, this.constructor);
            else stacktrace = new Error(msg).stack;
        }
        if (stacktrace) Object.defineProperty(this, 'stack', {
            enumerable: false,
            writable: false,
            value: stacktrace
        });
    }
    if (typeof Object.setPrototypeOf === 'function') Object.setPrototypeOf(JisonLexerError.prototype, Error.prototype);
    else JisonLexerError.prototype = Object.create(Error.prototype);
    JisonLexerError.prototype.constructor = JisonLexerError;
    JisonLexerError.prototype.name = 'JisonLexerError';
    var lexer = {
        // Code Generator Information Report
        // ---------------------------------
        //
        // Options:
        //
        //   backtracking: .................... false
        //   location.ranges: ................. false
        //   location line+column tracking: ... true
        //
        //
        // Forwarded Parser Analysis flags:
        //
        //   uses yyleng: ..................... false
        //   uses yylineno: ................... false
        //   uses yytext: ..................... false
        //   uses yylloc: ..................... false
        //   uses lexer values: ............... true / true
        //   location tracking: ............... false
        //   location assignment: ............. false
        //
        //
        // Lexer Analysis flags:
        //
        //   uses yyleng: ..................... ???
        //   uses yylineno: ................... ???
        //   uses yytext: ..................... ???
        //   uses yylloc: ..................... ???
        //   uses ParseError API: ............. ???
        //   uses yyerror: .................... ???
        //   uses location tracking & editing:  ???
        //   uses more() API: ................. ???
        //   uses unput() API: ................ ???
        //   uses reject() API: ............... ???
        //   uses less() API: ................. ???
        //   uses display APIs pastInput(), upcomingInput(), showPosition():
        //        ............................. ???
        //   uses describeYYLLOC() API: ....... ???
        //
        // --------- END OF REPORT -----------
        EOF: 1,
        ERROR: 2,
        // JisonLexerError: JisonLexerError,        /// <-- injected by the code generator
        // options: {},                             /// <-- injected by the code generator
        // yy: ...,                                 /// <-- injected by setInput()
        /// INTERNAL USE ONLY: internal rule set cache for the current lexer state
        __currentRuleSet__: null,
        /// INTERNAL USE ONLY: the set of lexErrorInfo objects created since the last cleanup
        __error_infos: [],
        /// INTERNAL USE ONLY: mark whether the lexer instance has been 'unfolded' completely and is now ready for use
        __decompressed: false,
        /// INTERNAL USE ONLY
        done: false,
        /// INTERNAL USE ONLY
        _backtrack: false,
        /// INTERNAL USE ONLY
        _input: '',
        /// INTERNAL USE ONLY
        _more: false,
        /// INTERNAL USE ONLY
        _signaled_error_token: false,
        /// INTERNAL USE ONLY; managed via `pushState()`, `popState()`, `topState()` and `stateStackSize()`
        conditionStack: [],
        /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction. `match` is identical to `yytext` except that this one still contains the matched input string after `lexer.performAction()` has been invoked, where userland code MAY have changed/replaced the `yytext` value entirely!
        match: '',
        /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks entire input which has been matched so far
        matched: '',
        /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks RE match result for last (successful) match attempt
        matches: false,
        /// ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction; this value is transferred to the parser as the 'token value' when the parser consumes the lexer token produced through a call to the `lex()` API.
        yytext: '',
        /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks the 'cursor position' in the input string, i.e. the number of characters matched so far
        offset: 0,
        /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: length of matched input for the token under construction (`yytext`)
        yyleng: 0,
        /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: 'line number' at which the token under construction is located
        yylineno: 0,
        /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks location info (lines + columns) for the token under construction
        yylloc: null,
        /**
     * INTERNAL USE: construct a suitable error info hash object instance for `parseError`.
     * 
     * @public
     * @this {RegExpLexer}
     */ constructLexErrorInfo: function lexer_constructLexErrorInfo(msg, recoverable, show_input_position) {
            msg = '' + msg;
            // heuristic to determine if the error message already contains a (partial) source code dump
            // as produced by either `showPosition()` or `prettyPrintRange()`:
            if (show_input_position == undefined) show_input_position = !(msg.indexOf('\n') > 0 && msg.indexOf('^') > 0);
            if (this.yylloc && show_input_position) {
                if (typeof this.prettyPrintRange === 'function') {
                    var pretty_src = this.prettyPrintRange(this.yylloc);
                    if (!/\n\s*$/.test(msg)) msg += '\n';
                    msg += '\n  Erroneous area:\n' + this.prettyPrintRange(this.yylloc);
                } else if (typeof this.showPosition === 'function') {
                    var pos_str = this.showPosition();
                    if (pos_str) {
                        if (msg.length && msg[msg.length - 1] !== '\n' && pos_str[0] !== '\n') msg += '\n' + pos_str;
                        else msg += pos_str;
                    }
                }
            }
            /** @constructor */ var pei = {
                errStr: msg,
                recoverable: !!recoverable,
                // This one MAY be empty; userland code should use the `upcomingInput` API to obtain more text which follows the 'lexer cursor position'...
                text: this.match,
                token: null,
                line: this.yylineno,
                loc: this.yylloc,
                yy: this.yy,
                lexer: this,
                /**
         * and make sure the error info doesn't stay due to potential
         * ref cycle via userland code manipulations.
         * These would otherwise all be memory leak opportunities!
         * 
         * Note that only array and object references are nuked as those
         * constitute the set of elements which can produce a cyclic ref.
         * The rest of the members is kept intact as they are harmless.
         * 
         * @public
         * @this {LexErrorInfo}
         */ destroy: function destructLexErrorInfo() {
                    // remove cyclic references added to error info:
                    // info.yy = null;
                    // info.lexer = null;
                    // ...
                    var rec = !!this.recoverable;
                    for(var key in this)if (this.hasOwnProperty(key) && typeof key === 'object') this[key] = undefined;
                    this.recoverable = rec;
                }
            };
            // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
            this.__error_infos.push(pei);
            return pei;
        },
        /**
     * handler which is invoked when a lexer error occurs.
     * 
     * @public
     * @this {RegExpLexer}
     */ parseError: function lexer_parseError(str, hash, ExceptionClass) {
            if (!ExceptionClass) ExceptionClass = this.JisonLexerError;
            if (this.yy) {
                if (this.yy.parser && typeof this.yy.parser.parseError === 'function') return this.yy.parser.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;
                else if (typeof this.yy.parseError === 'function') return this.yy.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;
            }
            throw new ExceptionClass(str, hash);
        },
        /**
     * method which implements `yyerror(str, ...args)` functionality for use inside lexer actions.
     * 
     * @public
     * @this {RegExpLexer}
     */ yyerror: function yyError(str /*, ...args */ ) {
            var lineno_msg = '';
            if (this.yylloc) lineno_msg = ' on line ' + (this.yylineno + 1);
            var p = this.constructLexErrorInfo('Lexical error' + lineno_msg + ': ' + str, this.options.lexerErrorsAreRecoverable);
            // Add any extra args to the hash under the name `extra_error_attributes`:
            var args = Array.prototype.slice.call(arguments, 1);
            if (args.length) p.extra_error_attributes = args;
            return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
        },
        /**
     * final cleanup function for when we have completed lexing the input;
     * make it an API so that external code can use this one once userland
     * code has decided it's time to destroy any lingering lexer error
     * hash object instances and the like: this function helps to clean
     * up these constructs, which *may* carry cyclic references which would
     * otherwise prevent the instances from being properly and timely
     * garbage-collected, i.e. this function helps prevent memory leaks!
     * 
     * @public
     * @this {RegExpLexer}
     */ cleanupAfterLex: function lexer_cleanupAfterLex(do_not_nuke_errorinfos) {
            // prevent lingering circular references from causing memory leaks:
            this.setInput('', {
            });
            // nuke the error hash info instances created during this run.
            // Userland code must COPY any data/references
            // in the error hash instance(s) it is more permanently interested in.
            if (!do_not_nuke_errorinfos) {
                for(var i = this.__error_infos.length - 1; i >= 0; i--){
                    var el = this.__error_infos[i];
                    if (el && typeof el.destroy === 'function') el.destroy();
                }
                this.__error_infos.length = 0;
            }
            return this;
        },
        /**
     * clear the lexer token context; intended for internal use only
     * 
     * @public
     * @this {RegExpLexer}
     */ clear: function lexer_clear() {
            this.yytext = '';
            this.yyleng = 0;
            this.match = '';
            // - DO NOT reset `this.matched`
            this.matches = false;
            this._more = false;
            this._backtrack = false;
            var col = this.yylloc ? this.yylloc.last_column : 0;
            this.yylloc = {
                first_line: this.yylineno + 1,
                first_column: col,
                last_line: this.yylineno + 1,
                last_column: col,
                range: [
                    this.offset,
                    this.offset
                ]
            };
        },
        /**
     * resets the lexer, sets new input
     * 
     * @public
     * @this {RegExpLexer}
     */ setInput: function lexer_setInput(input, yy) {
            this.yy = yy || this.yy || {
            };
            // also check if we've fully initialized the lexer instance,
            // including expansion work to be done to go from a loaded
            // lexer to a usable lexer:
            if (!this.__decompressed) {
                // step 1: decompress the regex list:
                var rules = this.rules;
                for(var i = 0, len = rules.length; i < len; i++){
                    var rule_re = rules[i];
                    // compression: is the RE an xref to another RE slot in the rules[] table?
                    if (typeof rule_re === 'number') rules[i] = rules[rule_re];
                }
                // step 2: unfold the conditions[] set to make these ready for use:
                var conditions = this.conditions;
                for(var k in conditions){
                    var spec = conditions[k];
                    var rule_ids = spec.rules;
                    var len = rule_ids.length;
                    var rule_regexes = new Array(len + 1); // slot 0 is unused; we use a 1-based index approach here to keep the hottest code in `lexer_next()` fast and simple!
                    var rule_new_ids = new Array(len + 1);
                    for(var i = 0; i < len; i++){
                        var idx = rule_ids[i];
                        var rule_re = rules[idx];
                        rule_regexes[i + 1] = rule_re;
                        rule_new_ids[i + 1] = idx;
                    }
                    spec.rules = rule_new_ids;
                    spec.__rule_regexes = rule_regexes;
                    spec.__rule_count = len;
                }
                this.__decompressed = true;
            }
            this._input = input || '';
            this.clear();
            this._signaled_error_token = false;
            this.done = false;
            this.yylineno = 0;
            this.matched = '';
            this.conditionStack = [
                'INITIAL'
            ];
            this.__currentRuleSet__ = null;
            this.yylloc = {
                first_line: 1,
                first_column: 0,
                last_line: 1,
                last_column: 0,
                range: [
                    0,
                    0
                ]
            };
            this.offset = 0;
            return this;
        },
        /**
     * edit the remaining input via user-specified callback.
     * This can be used to forward-adjust the input-to-parse, 
     * e.g. inserting macro expansions and alike in the
     * input which has yet to be lexed.
     * The behaviour of this API contrasts the `unput()` et al
     * APIs as those act on the *consumed* input, while this
     * one allows one to manipulate the future, without impacting
     * the current `yyloc` cursor location or any history. 
     * 
     * Use this API to help implement C-preprocessor-like
     * `#include` statements, etc.
     * 
     * The provided callback must be synchronous and is
     * expected to return the edited input (string).
     *
     * The `cpsArg` argument value is passed to the callback
     * as-is.
     *
     * `callback` interface: 
     * `function callback(input, cpsArg)`
     * 
     * - `input` will carry the remaining-input-to-lex string
     *   from the lexer.
     * - `cpsArg` is `cpsArg` passed into this API.
     * 
     * The `this` reference for the callback will be set to
     * reference this lexer instance so that userland code
     * in the callback can easily and quickly access any lexer
     * API. 
     *
     * When the callback returns a non-string-type falsey value,
     * we assume the callback did not edit the input and we
     * will using the input as-is.
     *
     * When the callback returns a non-string-type value, it
     * is converted to a string for lexing via the `"" + retval`
     * operation. (See also why: http://2ality.com/2012/03/converting-to-string.html 
     * -- that way any returned object's `toValue()` and `toString()`
     * methods will be invoked in a proper/desirable order.)
     * 
     * @public
     * @this {RegExpLexer}
     */ editRemainingInput: function lexer_editRemainingInput(callback, cpsArg) {
            var rv = callback.call(this, this._input, cpsArg);
            if (typeof rv !== 'string') {
                if (rv) this._input = '' + rv;
            } else this._input = rv;
            return this;
        },
        /**
     * consumes and returns one char from the input
     * 
     * @public
     * @this {RegExpLexer}
     */ input: function lexer_input() {
            if (!this._input) //this.done = true;    -- don't set `done` as we want the lex()/next() API to be able to produce one custom EOF token match after this anyhow. (lexer can match special <<EOF>> tokens and perform user action code for a <<EOF>> match, but only does so *once*)
            return null;
            var ch = this._input[0];
            this.yytext += ch;
            this.yyleng++;
            this.offset++;
            this.match += ch;
            this.matched += ch;
            // Count the linenumber up when we hit the LF (or a stand-alone CR).
            // On CRLF, the linenumber is incremented when you fetch the CR or the CRLF combo
            // and we advance immediately past the LF as well, returning both together as if
            // it was all a single 'character' only.
            var slice_len = 1;
            var lines = false;
            if (ch === '\n') lines = true;
            else if (ch === '\r') {
                lines = true;
                var ch2 = this._input[1];
                if (ch2 === '\n') {
                    slice_len++;
                    ch += ch2;
                    this.yytext += ch2;
                    this.yyleng++;
                    this.offset++;
                    this.match += ch2;
                    this.matched += ch2;
                    this.yylloc.range[1]++;
                }
            }
            if (lines) {
                this.yylineno++;
                this.yylloc.last_line++;
                this.yylloc.last_column = 0;
            } else this.yylloc.last_column++;
            this.yylloc.range[1]++;
            this._input = this._input.slice(slice_len);
            return ch;
        },
        /**
     * unshifts one char (or an entire string) into the input
     * 
     * @public
     * @this {RegExpLexer}
     */ unput: function lexer_unput(ch) {
            var len = ch.length;
            var lines = ch.split(/(?:\r\n?|\n)/g);
            this._input = ch + this._input;
            this.yytext = this.yytext.substr(0, this.yytext.length - len);
            this.yyleng = this.yytext.length;
            this.offset -= len;
            this.match = this.match.substr(0, this.match.length - len);
            this.matched = this.matched.substr(0, this.matched.length - len);
            if (lines.length > 1) {
                this.yylineno -= lines.length - 1;
                this.yylloc.last_line = this.yylineno + 1;
                // Get last entirely matched line into the `pre_lines[]` array's
                // last index slot; we don't mind when other previously 
                // matched lines end up in the array too. 
                var pre = this.match;
                var pre_lines = pre.split(/(?:\r\n?|\n)/g);
                if (pre_lines.length === 1) {
                    pre = this.matched;
                    pre_lines = pre.split(/(?:\r\n?|\n)/g);
                }
                this.yylloc.last_column = pre_lines[pre_lines.length - 1].length;
            } else this.yylloc.last_column -= len;
            this.yylloc.range[1] = this.yylloc.range[0] + this.yyleng;
            this.done = false;
            return this;
        },
        /**
     * cache matched text and append it on next action
     * 
     * @public
     * @this {RegExpLexer}
     */ more: function lexer_more() {
            this._more = true;
            return this;
        },
        /**
     * signal the lexer that this rule fails to match the input, so the
     * next matching rule (regex) should be tested instead.
     * 
     * @public
     * @this {RegExpLexer}
     */ reject: function lexer_reject() {
            if (this.options.backtrack_lexer) this._backtrack = true;
            else {
                // when the `parseError()` call returns, we MUST ensure that the error is registered.
                // We accomplish this by signaling an 'error' token to be produced for the current
                // `.lex()` run.
                var lineno_msg = '';
                if (this.yylloc) lineno_msg = ' on line ' + (this.yylineno + 1);
                var p = this.constructLexErrorInfo('Lexical error' + lineno_msg + ': You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).', false);
                this._signaled_error_token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
            }
            return this;
        },
        /**
     * retain first n characters of the match
     * 
     * @public
     * @this {RegExpLexer}
     */ less: function lexer_less(n) {
            return this.unput(this.match.slice(n));
        },
        /**
     * return (part of the) already matched input, i.e. for error
     * messages.
     * 
     * Limit the returned string length to `maxSize` (default: 20).
     * 
     * Limit the returned string to the `maxLines` number of lines of
     * input (default: 1).
     * 
     * Negative limit values equal *unlimited*.
     * 
     * @public
     * @this {RegExpLexer}
     */ pastInput: function lexer_pastInput(maxSize, maxLines) {
            var past = this.matched.substring(0, this.matched.length - this.match.length);
            if (maxSize < 0) maxSize = past.length;
            else if (!maxSize) maxSize = 20;
            if (maxLines < 0) maxLines = past.length; // can't ever have more input lines than this!;
            else if (!maxLines) maxLines = 1;
            // `substr` anticipation: treat \r\n as a single character and take a little
            // more than necessary so that we can still properly check against maxSize
            // after we've transformed and limited the newLines in here:
            past = past.substr(-maxSize * 2 - 2);
            // now that we have a significantly reduced string to process, transform the newlines
            // and chop them, then limit them:
            var a = past.replace(/\r\n|\r/g, '\n').split('\n');
            a = a.slice(-maxLines);
            past = a.join('\n');
            // When, after limiting to maxLines, we still have too much to return,
            // do add an ellipsis prefix...
            if (past.length > maxSize) past = '...' + past.substr(-maxSize);
            return past;
        },
        /**
     * return (part of the) upcoming input, i.e. for error messages.
     * 
     * Limit the returned string length to `maxSize` (default: 20).
     * 
     * Limit the returned string to the `maxLines` number of lines of input (default: 1).
     * 
     * Negative limit values equal *unlimited*.
     *
     * > ### NOTE ###
     * >
     * > *"upcoming input"* is defined as the whole of the both
     * > the *currently lexed* input, together with any remaining input
     * > following that. *"currently lexed"* input is the input 
     * > already recognized by the lexer but not yet returned with
     * > the lexer token. This happens when you are invoking this API
     * > from inside any lexer rule action code block. 
     * >
     * 
     * @public
     * @this {RegExpLexer}
     */ upcomingInput: function lexer_upcomingInput(maxSize, maxLines) {
            var next = this.match;
            if (maxSize < 0) maxSize = next.length + this._input.length;
            else if (!maxSize) maxSize = 20;
            if (maxLines < 0) maxLines = maxSize; // can't ever have more input lines than this!;
            else if (!maxLines) maxLines = 1;
            // `substring` anticipation: treat \r\n as a single character and take a little
            // more than necessary so that we can still properly check against maxSize
            // after we've transformed and limited the newLines in here:
            if (next.length < maxSize * 2 + 2) next += this._input.substring(0, maxSize * 2 + 2); // substring is faster on Chrome/V8
            // now that we have a significantly reduced string to process, transform the newlines
            // and chop them, then limit them:
            var a = next.replace(/\r\n|\r/g, '\n').split('\n');
            a = a.slice(0, maxLines);
            next = a.join('\n');
            // When, after limiting to maxLines, we still have too much to return,
            // do add an ellipsis postfix...
            if (next.length > maxSize) next = next.substring(0, maxSize) + '...';
            return next;
        },
        /**
     * return a string which displays the character position where the
     * lexing error occurred, i.e. for error messages
     * 
     * @public
     * @this {RegExpLexer}
     */ showPosition: function lexer_showPosition(maxPrefix, maxPostfix) {
            var pre = this.pastInput(maxPrefix).replace(/\s/g, ' ');
            var c = new Array(pre.length + 1).join('-');
            return pre + this.upcomingInput(maxPostfix).replace(/\s/g, ' ') + '\n' + c + '^';
        },
        /**
     * return an YYLLOC info object derived off the given context (actual, preceding, following, current).
     * Use this method when the given `actual` location is not guaranteed to exist (i.e. when
     * it MAY be NULL) and you MUST have a valid location info object anyway:
     * then we take the given context of the `preceding` and `following` locations, IFF those are available,
     * and reconstruct the `actual` location info from those.
     * If this fails, the heuristic is to take the `current` location, IFF available.
     * If this fails as well, we assume the sought location is at/around the current lexer position
     * and then produce that one as a response. DO NOTE that these heuristic/derived location info
     * values MAY be inaccurate!
     *
     * NOTE: `deriveLocationInfo()` ALWAYS produces a location info object *copy* of `actual`, not just
     * a *reference* hence all input location objects can be assumed to be 'constant' (function has no side-effects).
     * 
     * @public
     * @this {RegExpLexer}
     */ deriveLocationInfo: function lexer_deriveYYLLOC(actual, preceding, following, current) {
            var loc = {
                first_line: 1,
                first_column: 0,
                last_line: 1,
                last_column: 0,
                range: [
                    0,
                    0
                ]
            };
            if (actual) {
                loc.first_line = actual.first_line | 0;
                loc.last_line = actual.last_line | 0;
                loc.first_column = actual.first_column | 0;
                loc.last_column = actual.last_column | 0;
                if (actual.range) {
                    loc.range[0] = actual.range[0] | 0;
                    loc.range[1] = actual.range[1] | 0;
                }
            }
            if (loc.first_line <= 0 || loc.last_line < loc.first_line) {
                // plan B: heuristic using preceding and following:
                if (loc.first_line <= 0 && preceding) {
                    loc.first_line = preceding.last_line | 0;
                    loc.first_column = preceding.last_column | 0;
                    if (preceding.range) loc.range[0] = actual.range[1] | 0;
                }
                if ((loc.last_line <= 0 || loc.last_line < loc.first_line) && following) {
                    loc.last_line = following.first_line | 0;
                    loc.last_column = following.first_column | 0;
                    if (following.range) loc.range[1] = actual.range[0] | 0;
                }
                // plan C?: see if the 'current' location is useful/sane too:
                if (loc.first_line <= 0 && current && (loc.last_line <= 0 || current.last_line <= loc.last_line)) {
                    loc.first_line = current.first_line | 0;
                    loc.first_column = current.first_column | 0;
                    if (current.range) loc.range[0] = current.range[0] | 0;
                }
                if (loc.last_line <= 0 && current && (loc.first_line <= 0 || current.first_line >= loc.first_line)) {
                    loc.last_line = current.last_line | 0;
                    loc.last_column = current.last_column | 0;
                    if (current.range) loc.range[1] = current.range[1] | 0;
                }
            }
            // sanitize: fix last_line BEFORE we fix first_line as we use the 'raw' value of the latter
            // or plan D heuristics to produce a 'sensible' last_line value:
            if (loc.last_line <= 0) {
                if (loc.first_line <= 0) {
                    loc.first_line = this.yylloc.first_line;
                    loc.last_line = this.yylloc.last_line;
                    loc.first_column = this.yylloc.first_column;
                    loc.last_column = this.yylloc.last_column;
                    loc.range[0] = this.yylloc.range[0];
                    loc.range[1] = this.yylloc.range[1];
                } else {
                    loc.last_line = this.yylloc.last_line;
                    loc.last_column = this.yylloc.last_column;
                    loc.range[1] = this.yylloc.range[1];
                }
            }
            if (loc.first_line <= 0) {
                loc.first_line = loc.last_line;
                loc.first_column = 0; // loc.last_column;
                loc.range[1] = loc.range[0];
            }
            if (loc.first_column < 0) loc.first_column = 0;
            if (loc.last_column < 0) loc.last_column = loc.first_column > 0 ? loc.first_column : 80;
            return loc;
        },
        /**
     * return a string which displays the lines & columns of input which are referenced 
     * by the given location info range, plus a few lines of context.
     * 
     * This function pretty-prints the indicated section of the input, with line numbers 
     * and everything!
     * 
     * This function is very useful to provide highly readable error reports, while
     * the location range may be specified in various flexible ways:
     * 
     * - `loc` is the location info object which references the area which should be
     *   displayed and 'marked up': these lines & columns of text are marked up by `^`
     *   characters below each character in the entire input range.
     * 
     * - `context_loc` is the *optional* location info object which instructs this
     *   pretty-printer how much *leading* context should be displayed alongside
     *   the area referenced by `loc`. This can help provide context for the displayed
     *   error, etc.
     * 
     *   When this location info is not provided, a default context of 3 lines is
     *   used.
     * 
     * - `context_loc2` is another *optional* location info object, which serves
     *   a similar purpose to `context_loc`: it specifies the amount of *trailing*
     *   context lines to display in the pretty-print output.
     * 
     *   When this location info is not provided, a default context of 1 line only is
     *   used.
     * 
     * Special Notes:
     * 
     * - when the `loc`-indicated range is very large (about 5 lines or more), then
     *   only the first and last few lines of this block are printed while a
     *   `...continued...` message will be printed between them.
     * 
     *   This serves the purpose of not printing a huge amount of text when the `loc`
     *   range happens to be huge: this way a manageable & readable output results
     *   for arbitrary large ranges.
     * 
     * - this function can display lines of input which whave not yet been lexed.
     *   `prettyPrintRange()` can access the entire input!
     * 
     * @public
     * @this {RegExpLexer}
     */ prettyPrintRange: function lexer_prettyPrintRange(loc, context_loc, context_loc2) {
            loc = this.deriveLocationInfo(loc, context_loc, context_loc2);
            const CONTEXT = 3;
            const CONTEXT_TAIL = 1;
            const MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT = 2;
            var input = this.matched + this._input;
            var lines = input.split('\n');
            var l0 = Math.max(1, context_loc ? context_loc.first_line : loc.first_line - CONTEXT);
            var l1 = Math.max(1, context_loc2 ? context_loc2.last_line : loc.last_line + CONTEXT_TAIL);
            var lineno_display_width = 1 + Math.log10(l1 | 1) | 0;
            var ws_prefix = new Array(lineno_display_width).join(' ');
            var nonempty_line_indexes = [
                [],
                [],
                []
            ];
            var rv1 = lines.slice(l0 - 1, l1 + 1).map(function injectLineNumber(line, index) {
                var lno = index + l0;
                var lno_pfx = (ws_prefix + lno).substr(-lineno_display_width);
                var rv = lno_pfx + ': ' + line;
                var errpfx = new Array(lineno_display_width + 1).join('^');
                var offset = 3;
                var len = 0;
                if (lno === loc.first_line) {
                    offset += loc.first_column;
                    len = Math.max(2, (lno === loc.last_line ? loc.last_column : line.length) - loc.first_column + 1);
                } else if (lno === loc.last_line) len = Math.max(2, loc.last_column + 1);
                else if (lno > loc.first_line && lno < loc.last_line) len = Math.max(2, line.length + 1);
                var nli;
                if (len) {
                    var lead = new Array(offset).join('.');
                    var mark = new Array(len).join('^');
                    rv += '\n' + errpfx + lead + mark;
                    nli = 1;
                } else if (lno < loc.first_line) nli = 0;
                else if (lno > loc.last_line) nli = 2;
                if (line.trim().length > 0) nonempty_line_indexes[nli].push(index);
                rv = rv.replace(/\t/g, ' ');
                return rv;
            });
            // now make sure we don't print an overly large amount of lead/error/tail area: limit it 
            // to the top and bottom line count:
            for(var i = 0; i <= 2; i++){
                var line_arr = nonempty_line_indexes[i];
                if (line_arr.length > 2 * MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT) {
                    var clip_start = line_arr[MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT - 1] + 1;
                    var clip_end = line_arr[line_arr.length - MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT] - 1;
                    var intermediate_line = new Array(lineno_display_width + 1).join(' ') + '  (...continued...)';
                    if (i === 1) intermediate_line += '\n' + new Array(lineno_display_width + 1).join('-') + '  (---------------)';
                    rv1.splice(clip_start, clip_end - clip_start + 1, intermediate_line);
                }
            }
            return rv1.join('\n');
        },
        /**
     * helper function, used to produce a human readable description as a string, given
     * the input `yylloc` location object.
     * 
     * Set `display_range_too` to TRUE to include the string character index position(s)
     * in the description if the `yylloc.range` is available.
     * 
     * @public
     * @this {RegExpLexer}
     */ describeYYLLOC: function lexer_describe_yylloc(yylloc, display_range_too) {
            var l1 = yylloc.first_line;
            var l2 = yylloc.last_line;
            var c1 = yylloc.first_column;
            var c2 = yylloc.last_column;
            var dl = l2 - l1;
            var dc = c2 - c1;
            var rv;
            if (dl === 0) {
                rv = 'line ' + l1 + ', ';
                if (dc <= 1) rv += 'column ' + c1;
                else rv += 'columns ' + c1 + ' .. ' + c2;
            } else rv = 'lines ' + l1 + '(column ' + c1 + ') .. ' + l2 + '(column ' + c2 + ')';
            if (yylloc.range && display_range_too) {
                var r1 = yylloc.range[0];
                var r2 = yylloc.range[1] - 1;
                if (r2 <= r1) rv += ' {String Offset: ' + r1 + '}';
                else rv += ' {String Offset range: ' + r1 + ' .. ' + r2 + '}';
            }
            return rv;
        },
        /**
     * test the lexed token: return FALSE when not a match, otherwise return token.
     * 
     * `match` is supposed to be an array coming out of a regex match, i.e. `match[0]`
     * contains the actually matched text string.
     * 
     * Also move the input cursor forward and update the match collectors:
     * 
     * - `yytext`
     * - `yyleng`
     * - `match`
     * - `matches`
     * - `yylloc`
     * - `offset`
     * 
     * @public
     * @this {RegExpLexer}
     */ test_match: function lexer_test_match(match, indexed_rule) {
            var token, lines, backup, match_str, match_str_len;
            if (this.options.backtrack_lexer) // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylloc.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column,
                    range: this.yylloc.range.slice(0)
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                //_signaled_error_token: this._signaled_error_token,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            match_str = match[0];
            match_str_len = match_str.length;
            // if (match_str.indexOf('\n') !== -1 || match_str.indexOf('\r') !== -1) {
            lines = match_str.split(/(?:\r\n?|\n)/g);
            if (lines.length > 1) {
                this.yylineno += lines.length - 1;
                this.yylloc.last_line = this.yylineno + 1;
                this.yylloc.last_column = lines[lines.length - 1].length;
            } else this.yylloc.last_column += match_str_len;
            // }
            this.yytext += match_str;
            this.match += match_str;
            this.matched += match_str;
            this.matches = match;
            this.yyleng = this.yytext.length;
            this.yylloc.range[1] += match_str_len;
            // previous lex rules MAY have invoked the `more()` API rather than producing a token:
            // those rules will already have moved this `offset` forward matching their match lengths,
            // hence we must only add our own match length now:
            this.offset += match_str_len;
            this._more = false;
            this._backtrack = false;
            this._input = this._input.slice(match_str_len);
            // calling this method:
            //
            //   function lexer__performAction(yy, yyrulenumber, YY_START) {...}
            token = this.performAction.call(this, this.yy, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
            // otherwise, when the action codes are all simple return token statements:
            //token = this.simpleCaseActionClusters[indexed_rule];
            if (this.done && this._input) this.done = false;
            if (token) return token;
            else if (this._backtrack) {
                // recover context
                for(var k in backup)this[k] = backup[k];
                this.__currentRuleSet__ = null;
                return false; // rule action called reject() implying the next rule should be tested instead.
            } else if (this._signaled_error_token) {
                // produce one 'error' token as `.parseError()` in `reject()`
                // did not guarantee a failure signal by throwing an exception!
                token = this._signaled_error_token;
                this._signaled_error_token = false;
                return token;
            }
            return false;
        },
        /**
     * return next match in input
     * 
     * @public
     * @this {RegExpLexer}
     */ next: function lexer_next() {
            if (this.done) {
                this.clear();
                return this.EOF;
            }
            if (!this._input) this.done = true;
            var token, match, tempMatch, index;
            if (!this._more) this.clear();
            var spec = this.__currentRuleSet__;
            if (!spec) {
                // Update the ruleset cache as we apparently encountered a state change or just started lexing.
                // The cache is set up for fast lookup -- we assume a lexer will switch states much less often than it will
                // invoke the `lex()` token-producing API and related APIs, hence caching the set for direct access helps
                // speed up those activities a tiny bit.
                spec = this.__currentRuleSet__ = this._currentRules();
                // Check whether a *sane* condition has been pushed before: this makes the lexer robust against
                // user-programmer bugs such as https://github.com/zaach/jison-lex/issues/19
                if (!spec || !spec.rules) {
                    var lineno_msg = '';
                    if (this.options.trackPosition) lineno_msg = ' on line ' + (this.yylineno + 1);
                    var p = this.constructLexErrorInfo('Internal lexer engine error' + lineno_msg + ': The lex grammar programmer pushed a non-existing condition name "' + this.topState() + '"; this is a fatal error and should be reported to the application programmer team!', false);
                    // produce one 'error' token until this situation has been resolved, most probably by parse termination!
                    return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
                }
            }
            var rule_ids = spec.rules;
            var regexes = spec.__rule_regexes;
            var len = spec.__rule_count;
            // Note: the arrays are 1-based, while `len` itself is a valid index,
            // hence the non-standard less-or-equal check in the next loop condition!
            for(var i = 1; i <= len; i++){
                tempMatch = this._input.match(regexes[i]);
                if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                    match = tempMatch;
                    index = i;
                    if (this.options.backtrack_lexer) {
                        token = this.test_match(tempMatch, rule_ids[i]);
                        if (token !== false) return token;
                        else if (this._backtrack) {
                            match = undefined;
                            continue; // rule action called reject() implying a rule MISmatch.
                        } else // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    } else if (!this.options.flex) break;
                }
            }
            if (match) {
                token = this.test_match(match, rule_ids[index]);
                if (token !== false) return token;
                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                return false;
            }
            if (!this._input) {
                this.done = true;
                this.clear();
                return this.EOF;
            } else {
                var lineno_msg = '';
                if (this.options.trackPosition) lineno_msg = ' on line ' + (this.yylineno + 1);
                var p = this.constructLexErrorInfo('Lexical error' + lineno_msg + ': Unrecognized text.', this.options.lexerErrorsAreRecoverable);
                var pendingInput = this._input;
                var activeCondition = this.topState();
                var conditionStackDepth = this.conditionStack.length;
                token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
                if (token === this.ERROR) // we can try to recover from a lexer error that `parseError()` did not 'recover' for us
                // by moving forward at least one character at a time IFF the (user-specified?) `parseError()`
                // has not consumed/modified any pending input or changed state in the error handler:
                {
                    if (!this.matches && pendingInput === this._input && // to merit a non-consuming error handling action right now.
                    activeCondition === this.topState() && conditionStackDepth === this.conditionStack.length) this.input();
                }
                return token;
            }
        },
        /**
     * return next match that has a token
     * 
     * @public
     * @this {RegExpLexer}
     */ lex: function lexer_lex() {
            var r;
            // allow the PRE/POST handlers set/modify the return token for maximum flexibility of the generated lexer:
            if (typeof this.pre_lex === 'function') r = this.pre_lex.call(this, 0);
            if (typeof this.options.pre_lex === 'function') // (also account for a userdef function which does not return any value: keep the token as is)
            r = this.options.pre_lex.call(this, r) || r;
            if (this.yy && typeof this.yy.pre_lex === 'function') // (also account for a userdef function which does not return any value: keep the token as is)
            r = this.yy.pre_lex.call(this, r) || r;
            while(!r)r = this.next();
            if (this.yy && typeof this.yy.post_lex === 'function') // (also account for a userdef function which does not return any value: keep the token as is)
            r = this.yy.post_lex.call(this, r) || r;
            if (typeof this.options.post_lex === 'function') // (also account for a userdef function which does not return any value: keep the token as is)
            r = this.options.post_lex.call(this, r) || r;
            if (typeof this.post_lex === 'function') // (also account for a userdef function which does not return any value: keep the token as is)
            r = this.post_lex.call(this, r) || r;
            return r;
        },
        /**
     * return next match that has a token. Identical to the `lex()` API but does not invoke any of the 
     * `pre_lex()` nor any of the `post_lex()` callbacks.
     * 
     * @public
     * @this {RegExpLexer}
     */ fastLex: function lexer_fastLex() {
            var r;
            while(!r)r = this.next();
            return r;
        },
        /**
     * return info about the lexer state that can help a parser or other lexer API user to use the
     * most efficient means available. This API is provided to aid run-time performance for larger
     * systems which employ this lexer.
     * 
     * @public
     * @this {RegExpLexer}
     */ canIUse: function lexer_canIUse() {
            var rv = {
                fastLex: !(typeof this.pre_lex === 'function' || typeof this.options.pre_lex === 'function' || this.yy && typeof this.yy.pre_lex === 'function' || this.yy && typeof this.yy.post_lex === 'function' || typeof this.options.post_lex === 'function' || typeof this.post_lex === 'function') && typeof this.fastLex === 'function'
            };
            return rv;
        },
        /**
     * backwards compatible alias for `pushState()`;
     * the latter is symmetrical with `popState()` and we advise to use
     * those APIs in any modern lexer code, rather than `begin()`.
     * 
     * @public
     * @this {RegExpLexer}
     */ begin: function lexer_begin(condition) {
            return this.pushState(condition);
        },
        /**
     * activates a new lexer condition state (pushes the new lexer
     * condition state onto the condition stack)
     * 
     * @public
     * @this {RegExpLexer}
     */ pushState: function lexer_pushState(condition) {
            this.conditionStack.push(condition);
            this.__currentRuleSet__ = null;
            return this;
        },
        /**
     * pop the previously active lexer condition state off the condition
     * stack
     * 
     * @public
     * @this {RegExpLexer}
     */ popState: function lexer_popState() {
            var n = this.conditionStack.length - 1;
            if (n > 0) {
                this.__currentRuleSet__ = null;
                return this.conditionStack.pop();
            } else return this.conditionStack[0];
        },
        /**
     * return the currently active lexer condition state; when an index
     * argument is provided it produces the N-th previous condition state,
     * if available
     * 
     * @public
     * @this {RegExpLexer}
     */ topState: function lexer_topState(n) {
            n = this.conditionStack.length - 1 - Math.abs(n || 0);
            if (n >= 0) return this.conditionStack[n];
            else return 'INITIAL';
        },
        /**
     * (internal) determine the lexer rule set which is active for the
     * currently active lexer condition state
     * 
     * @public
     * @this {RegExpLexer}
     */ _currentRules: function lexer__currentRules() {
            if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) return this.conditions[this.conditionStack[this.conditionStack.length - 1]];
            else return this.conditions['INITIAL'];
        },
        /**
     * return the number of states currently on the stack
     * 
     * @public
     * @this {RegExpLexer}
     */ stateStackSize: function lexer_stateStackSize() {
            return this.conditionStack.length;
        },
        options: {
            trackPosition: true,
            caseInsensitive: true
        },
        JisonLexerError: JisonLexerError,
        performAction: function lexer__performAction(yy, yyrulenumber, YY_START) {
            var yy_ = this;
            var YYSTATE = YY_START;
            switch(yyrulenumber){
                case 0:
                    /*! Conditions:: ATTRS_END INITIAL */ /*! Rule::       {escaped_text_interpolation} */ this.pushState('AFTER_TAG_NAME');
                    yy_.yytext = yy_.yytext.slice(2, -1);
                    return 5;
                case 1:
                    /*! Conditions:: ATTRS_END INITIAL */ /*! Rule::       {unescaped_text_interpolation} */ this.pushState('AFTER_TAG_NAME');
                    yy_.yytext = yy_.yytext.slice(2, -1);
                    return 35;
                case 2:
                    /*! Conditions:: ATTRS_END INITIAL */ /*! Rule::       {tag_interpolation} */ $0701b6dda164cf78$var$debug('this.matches=', this.matches);
                    this.pushState('AFTER_TAG_NAME');
                    yy_.yytext = [
                        this.matches[3],
                        this.matches[4],
                        this.matches[5]
                    ];
                    return 36;
                case 3:
                    /*! Conditions:: INITIAL */ /*! Rule::       {keyword} */ this.pushState('AFTER_KEYWORD');
                    return 23;
                case 4:
                    /*! Conditions:: INITIAL */ /*! Rule::       {tag} */ this.pushState('AFTER_TAG_NAME');
                    return 17;
                case 5:
                    /*! Conditions:: INITIAL */ /*! Rule::       (script|style) */ if ($0701b6dda164cf78$var$TEXT_TAGS_ALLOW_SUB_TAGS) {
                        this.pushState('AFTER_TAG_NAME');
                        return 17;
                    } else {
                        this.pushState('AFTER_TEXT_TAG_NAME');
                        return 18;
                    }
                    break;
                case 6:
                    /*! Conditions:: INITIAL MIXIN_CALL_START MIXIN_CALL_END */ /*! Rule::       {tag_id} */ this.popState();
                    this.pushState('AFTER_TAG_NAME');
                    yy_.yytext = yy_.yytext.substring(1);
                    return 15;
                case 7:
                    /*! Conditions:: INITIAL */ /*! Rule::       {mixin_call} */ yy_.yytext = yy_.yytext.substring(1);
                    this.pushState('MIXIN_CALL_START');
                    return 22;
                case 8:
                    /*! Conditions:: INITIAL */ /*! Rule::       \} */ this.pushState('AFTER_KEYWORD');
                    return 25;
                case 9:
                    /*! Conditions:: INITIAL */ /*! Rule::       {conditional} */ this.pushState('COND_START');
                    if (yy_.yytext.startsWith('-')) yy_.yytext = yy_.yytext.substring(1);
                    return 28;
                case 10:
                    /*! Conditions:: COND_START */ /*! Rule::       \( */ ')';
                    this.pushState('COND_START');
                    return 11;
                case 11:
                    /*! Conditions:: COND_START */ /*! Rule::       .+\) */ this.popState();
                    yy_.yytext = yy_.yytext.substring(0, yy_.yytext.length - 1);
                    return [
                        'RPAREN',
                        'CONDITION'
                    ];
                case 13:
                    /*! Conditions:: INITIAL UNBUF_CODE */ /*! Rule::       - */ this.pushState('UNBUF_CODE_START');
                    break;
                case 14:
                    /*! Conditions:: INITIAL */ /*! Rule::       {classname} */ // debug('<INITIAL>{classname}')
                    this.pushState('AFTER_TAG_NAME');
                    yy_.yytext = yy_.yytext.substring(1);
                    return 14;
                case 15:
                    /*! Conditions:: INITIAL */ /*! Rule::       {classname_relaxed} */ $0701b6dda164cf78$var$debug('<INITIAL>{classname_relaxed}');
                    if (this.yy.parser.options.allowDigitToStartClassName) {
                        // debug('<INITIAL>{classname}')
                        this.pushState('AFTER_TAG_NAME');
                        yy_.yytext = yy_.yytext.substring(1);
                        return 14;
                    } else throw new Error('Classnames starting with a digit are not allowed. Set allowDigitToStartClassName to true to allow.');
                    break;
                case 16:
                    /*! Conditions:: INITIAL */ /*! Rule::       \/\/- */ this.pushState('TEXT');
                    return 19;
                case 17:
                    /*! Conditions:: INITIAL */ /*! Rule::       \/\/ */ this.pushState('TEXT');
                    return 20;
                case 18:
                    /*! Conditions:: INITIAL */ /*! Rule::       <[A-Z_]+> */ if (/<[A-Z_]+>/.test(yy_.yytext)) this.pushState(yy_.yytext.substring(1, yy_.yytext.length - 1));
                    else {
                        this.pushState('TEXT');
                        return 3;
                    }
                    break;
                case 19:
                    /*! Conditions:: INITIAL TEXT */ /*! Rule::       \|  */ this.pushState('TEXT');
                    return 24;
                case 20:
                    /*! Conditions:: INITIAL */ /*! Rule::       \|\. */ this.pushState('TEXT');
                    this.unput('.');
                    break;
                case 21:
                    /*! Conditions:: INITIAL */ /*! Rule::       \|$ */ this.pushState('TEXT');
                    yy_.yytext = '';
                    return 3; // only because it is an empty object 
                case 22:
                    /*! Conditions:: INITIAL AFTER_TAG_NAME ATTRS_END MIXIN_CALL_START */ /*! Rule::       &attributes\([^\)]+\) */ $0701b6dda164cf78$var$debug('\'&attributes(\'[^)]+\')\'');
                    return 38;
                case 23:
                    /*! Conditions:: INITIAL */ /*! Rule::       {interpolation} */ $0701b6dda164cf78$var$debug('{interpolation}');
                    $0701b6dda164cf78$var$debug('this.matches=', this.matches);
                    $0701b6dda164cf78$var$debug('this=', this);
                    this.pushState('AFTER_TAG_NAME');
                    yy_.yytext = [
                        this.matches[6],
                        this.matches[7],
                        this.matches[8],
                        this.matches[9]
                    ];
                    return [
                        'INTERP_END',
                        'INTERP_VAL',
                        'INTERP_NAME',
                        'INTERP_START'
                    ];
                case 24:
                    /*! Conditions:: INITIAL */ /*! Rule::       {interpolation}.+ */ $0701b6dda164cf78$var$debug('{interpolation222222222}');
                    $0701b6dda164cf78$var$debug('this.matches=', this.matches);
                    $0701b6dda164cf78$var$debug('this=', this);
                    this.pushState('AFTER_TAG_NAME');
                    yy_.yytext = [
                        this.matches[6],
                        this.matches[7],
                        this.matches[8],
                        this.matches[9]
                    ];
                    return [
                        'INTERP_END',
                        'INTERP_VAL',
                        'INTERP_NAME',
                        'INTERP_START'
                    ];
                case 26:
                    /*! Conditions:: INITIAL */ /*! Rule::       {interpolation_start} */ $0701b6dda164cf78$var$debug('{interpolation_start}');
                    $0701b6dda164cf78$var$debug('this.matches=', this.matches);
                    this.pushState('INTERPOLATION_START');
                    return 33;
                case 27:
                    /*! Conditions:: INITIAL */ /*! Rule::       <\/.+ */ this.pushState('TEXT');
                    return 3;
                case 28:
                    /*! Conditions:: AFTER_TAG_NAME */ /*! Rule::       =  */ this.popState();
                    this.pushState('ASSIGNMENT_VALUE');
                    return 42;
                case 29:
                    /*! Conditions:: AFTER_TAG_NAME AFTER_ATTRS AFTER_MIXIN_CALL */ /*! Rule::       :  */ this.popState();
                    return 6;
                case 30:
                    /*! Conditions:: INITIAL */ /*! Rule::       {filter} */ yy_.yytext = yy_.yytext.substring(1);
                    this.pushState('AFTER_TAG_NAME');
                    return 37;
                case 31:
                    /*! Conditions:: AFTER_KEYWORD */ /*! Rule::       {filter} */ yy_.yytext = yy_.yytext.substring(1);
                    return 37;
                case 32:
                    /*! Conditions:: AFTER_TAG_NAME AFTER_TEXT_TAG_NAME */ /*! Rule::       \( */ ')'; // hack for syntax
                    $0701b6dda164cf78$var$debug(`<AFTER_TAG_NAME,AFTER_TEXT_TAG_NAME>'('`);
                    this.pushState('ATTRS_STARTED');
                    return 11;
                case 34:
                    /*! Conditions:: MIXIN_PARAMS_END */ /*! Rule::       \) */ // this.popState() // for inline blocks after mixin calls
                    return 13;
                case 35:
                    /*! Conditions:: INITIAL ATTRS_END MIXIN_PARAMS_END */ /*! Rule::       {classname} */ this.pushState('AFTER_TAG_NAME');
                    yy_.yytext = yy_.yytext.substring(1);
                    return 14;
                case 36:
                    /*! Conditions:: INITIAL ATTRS_END MIXIN_PARAMS_END */ /*! Rule::       {tag_id} */ this.pushState('AFTER_TAG_NAME');
                    yy_.yytext = yy_.yytext.substring(1);
                    return 15;
                case 37:
                    /*! Conditions:: INITIAL ATTRS_END */ /*! Rule::       {classname_relaxed} */ $0701b6dda164cf78$var$debug('<INITIAL,ATTRS_END>{classname_relaxed}');
                    if (this.yy.parser.options.allowDigitToStartClassName) {
                        this.pushState('AFTER_TAG_NAME');
                        yy_.yytext = yy_.yytext.substring(1);
                        return 14;
                    } else throw new Error('Classnames starting with a digit are not allowed. Set allowDigitToStartClassName to true to allow.');
                    break;
                case 38:
                    /*! Conditions:: ATTRS_STARTED */ /*! Rule::       (\(.+|.+\().+ */ '))';
                    $0701b6dda164cf78$var$debug('15 yy_.yytext=', yy_.yytext);
                    $0701b6dda164cf78$var$debug('15 this.matches=', this.matches);
                    const stack = [];
                    let i = 0;
                    for(; i < yy_.yytext.length; i++)if (/[\)\]}]/.test(yy_.yytext[i])) {
                        $0701b6dda164cf78$var$debug('match');
                        $0701b6dda164cf78$var$debug('stack.peek()=', stack.peek());
                        if (stack.length == 0 || stack.pop() != yy_.yytext[i]) {
                            $0701b6dda164cf78$var$debug('stack.length=', stack.length);
                            break;
                        }
                    } else switch(yy_.yytext[i]){
                        case '(':
                            stack.push(')');
                            break;
                        case '[':
                            stack.push(']');
                            break;
                        case '{':
                            stack.push('}');
                            break;
                    }
                    this.unput(yy_.yytext.substring(i));
                    yy_.yytext = yy_.yytext.substring(0, i);
                    $0701b6dda164cf78$var$debug('15 yy_.yytext=', yy_.yytext);
                    this.popState();
                    this.pushState('ATTRS_END');
                    return 39;
                case 39:
                    /*! Conditions:: ATTRS_STARTED */ /*! Rule::       ([^\)]+)(\))(?!\s*\..+\)) */ this.popState();
                    this.pushState('ATTRS_END');
                    $0701b6dda164cf78$var$debug('20 this.matches=', this.matches);
                    $0701b6dda164cf78$var$debug('20 this.matches.length=', this.matches.length);
                    $0701b6dda164cf78$var$debug('20 yy_.yytext=', yy_.yytext);
                    try {
                        this.unput(')');
                        if (this.matches.length > 1) yy_.yytext = this.matches[1];
                    } catch (e) {
                        console.error(e);
                    }
                    $0701b6dda164cf78$var$lparenOpen = false;
                    $0701b6dda164cf78$var$debug('20 yy_.yytext=', yy_.yytext);
                    return 39;
                case 40:
                    /*! Conditions:: ATTRS_STARTED */ /*! Rule::       (.+)\)\s*$ */ this.popState();
                    $0701b6dda164cf78$var$debug('30 this.matches=', this.matches);
                    $0701b6dda164cf78$var$debug('30 this.matches.length=', this.matches.length);
                    $0701b6dda164cf78$var$debug('30 yy_.yytext=', yy_.yytext);
                    try {
                        if (this.matches.length > 1) yy_.yytext = this.matches[1];
                    } catch (e1) {
                        console.error(e1);
                    }
                    $0701b6dda164cf78$var$lparenOpen = false;
                    $0701b6dda164cf78$var$debug('30 yy_.yytext=', yy_.yytext);
                    return [
                        'RPAREN',
                        'ATTR_TEXT'
                    ];
                case 41:
                    /*! Conditions:: ATTRS_STARTED */ /*! Rule::       (.+)\)\.?\s*(.+)$ */ this.popState();
                    this.pushState('ATTRS_END');
                    $0701b6dda164cf78$var$debug('40 this.matches=', this.matches);
                    this.unput(this.matches[2]);
                    yy_.yytext = yy_.yytext.substring(0, yy_.yytext.indexOf(this.matches[1]) + this.matches[1].length);
                    $0701b6dda164cf78$var$debug('40 yy_.yytext=', yy_.yytext);
                    $0701b6dda164cf78$var$lparenOpen = false;
                    return [
                        'RPAREN',
                        'ATTR_TEXT'
                    ];
                case 42:
                    /*! Conditions:: ATTRS_STARTED */ /*! Rule::       (.+)\.?\s*$ */ this.popState();
                    $0701b6dda164cf78$var$debug('50 this.matches=', this.matches);
                    $0701b6dda164cf78$var$debug('50 this.matches.length=', this.matches.length);
                    $0701b6dda164cf78$var$debug('50 yy_.yytext=', yy_.yytext);
                    try {
                        if (this.matches.length > 1) yy_.yytext = this.matches[1];
                    } catch (e2) {
                        console.error(e2);
                    }
                    $0701b6dda164cf78$var$debug('50 yy_.yytext=', yy_.yytext);
                    return 8;
                case 43:
                    /*! Conditions:: AFTER_TAG_NAME */ /*! Rule::       {tag_id} */ this.pushState('AFTER_TAG_NAME');
                    yy_.yytext = this.matches[1].substring(1);
                    return 15;
                case 44:
                    /*! Conditions:: AFTER_TAG_NAME */ /*! Rule::       {classname} */ // yy_.yytext = this.matches[1].substring(1);
                    yy_.yytext = yy_.yytext.substring(1);
                    $0701b6dda164cf78$var$debug('60 yy_.yytext=', yy_.yytext);
                    return 14;
                case 45:
                    /*! Conditions:: AFTER_TAG_NAME */ /*! Rule::       {classname_relaxed} */ if (this.yy.parser.options.allowDigitToStartClassName) {
                        yy_.yytext = yy_.yytext.substring(1);
                        return 14;
                    } else throw new Error('Classnames starting with a digit are not allowed. Set allowDigitToStartClassName to true to allow.');
                    break;
                case 46:
                    /*! Conditions:: INITIAL */ /*! Rule::       {space}{2,} */ $0701b6dda164cf78$var$debug('{space}{2,}');
                    return 27;
                case 47:
                    /*! Conditions:: AFTER_TAG_NAME AFTER_KEYWORD AFTER_TEXT_TAG_NAME */ /*! Rule::       {space}{space} */ this.pushState('TEXT');
                    $0701b6dda164cf78$var$debug('space space');
                    this.unput(' ');
                    return 27;
                case 48:
                    /*! Conditions:: AFTER_TAG_NAME AFTER_KEYWORD AFTER_TEXT_TAG_NAME */ /*! Rule::       {space}{classname} */ this.pushState('ATTRS_END');
                    yy_.yytext = yy_.yytext.substring(1);
                    return 3;
                case 49:
                    /*! Conditions:: AFTER_TAG_NAME AFTER_KEYWORD AFTER_TEXT_TAG_NAME */ /*! Rule::       {space}{classname_relaxed} */ $0701b6dda164cf78$var$debug('<AFTER_TAG_NAME,AFTER_KEYWORD,AFTER_TEXT_TAG_NAME>{space}{classname_relaxed} this.parser.options=', this.parser.options);
                    if (this.yy.parser.options.allowDigitToStartClassName) {
                        this.pushState('ATTRS_END');
                        yy_.yytext = yy_.yytext.substring(1);
                        return 3;
                    } else throw new Error('Classnames starting with a digit are not allowed. Set allowDigitToStartClassName to true to allow.');
                    break;
                case 50:
                    /*! Conditions:: AFTER_TAG_NAME AFTER_TEXT_TAG_NAME */ /*! Rule::       {space} */ this.pushState('ATTRS_END');
                    $0701b6dda164cf78$var$debug('<AFTER_TAG_NAME,AFTER_KEYWORD,AFTER_TEXT_TAG_NAME>{space}');
                    return 27;
                case 51:
                    /*! Conditions:: AFTER_KEYWORD */ /*! Rule::       {space} */ this.pushState('ATTRS_END');
                    $0701b6dda164cf78$var$debug('<AFTER_KEYWORD>{space}');
                    return 27;
                case 52:
                    /*! Conditions:: ATTRS_END MIXIN_PARAMS_END */ /*! Rule::       {space} */ this.pushState('TEXT');
                    $0701b6dda164cf78$var$debug('<ATTRS_END>{space}');
                    return 27;
                case 54:
                    /*! Conditions:: AFTER_TAG_NAME AFTER_TEXT_TAG_NAME NO_MORE_SPACE */ /*! Rule::       .+ */ $0701b6dda164cf78$var$debug('70 yy_.yytext=', yy_.yytext);
                    return 3;
                case 55:
                    /*! Conditions:: AFTER_KEYWORD */ /*! Rule::       .+ */ $0701b6dda164cf78$var$debug('77 yy_.yytext=', yy_.yytext);
                    return 3;
                case 56:
                    /*! Conditions:: ATTRS_END MIXIN_PARAMS_END */ /*! Rule::       ={space} */ this.popState();
                    this.pushState('ASSIGNMENT_VALUE');
                    return 42;
                case 57:
                    /*! Conditions:: INITIAL ATTRS_END */ /*! Rule::       \.\s*$ */ this.popState();
                    return 26;
                case 58:
                    /*! Conditions:: ASSIGNMENT_VALUE */ /*! Rule::       .+ */ this.popState();
                    return 41;
                case 59:
                    /*! Conditions:: ATTRS_END */ /*! Rule::       .+ */ $0701b6dda164cf78$var$debug('6 yy_.yytext=', yy_.yytext);
                    return 3;
                case 60:
                    /*! Conditions:: UNBUF_CODE_START */ /*! Rule::       {space} */ $0701b6dda164cf78$var$debug('<UNBUF_CODE_START>{space}');
                    return 27;
                case 62:
                    /*! Conditions:: MIXIN_CALL_START */ /*! Rule::       {classname} */ yy_.yytext = yy_.yytext.substring(1);
                    return 14;
                case 63:
                    /*! Conditions:: MIXIN_CALL_START */ /*! Rule::       {tag_id} */ yy_.yytext = yy_.yytext.substring(1);
                    return 15;
                case 64:
                    /*! Conditions:: MIXIN_CALL_START */ /*! Rule::       \( */ ')';
                    this.popState();
                    this.pushState('MIXIN_PARAMS_STARTED');
                    return 11;
                case 65:
                    /*! Conditions:: MIXIN_CALL_START */ /*! Rule::       {space}$ */ this.popState();
                    break;
                case 66:
                    /*! Conditions:: MIXIN_PARAMS_END */ /*! Rule::       :{space}? */ $0701b6dda164cf78$var$debug('75 yy_.yytext=', yy_.yytext);
                    this.popState();
                    return 6;
                case 67:
                    /*! Conditions:: TEXT */ /*! Rule::       .+ */ $0701b6dda164cf78$var$debug('80 yy_.yytext=', yy_.yytext);
                    return 3;
                case 68:
                    /*! Conditions:: MULTI_LINE_ATTRS */ /*! Rule::       ,?(.*)\) */ $0701b6dda164cf78$var$debug('110 this.matches=', this.matches);
                    this.popState();
                    yy_.yytext = this.matches[1];
                    return 7;
                case 70:
                    /*! Conditions:: MIXIN_PARAMS_STARTED */ /*! Rule::       \) */ this.popState();
                    this.pushState('MIXIN_PARAMS_END');
                    yy_.yytext = '';
                    return [
                        'RPAREN',
                        'MIXIN_PARAMS'
                    ];
                case 71:
                    /*! Conditions:: MIXIN_PARAMS_STARTED */ /*! Rule::       (.+)(\)) */ this.popState();
                    this.pushState('MIXIN_PARAMS_END');
                    $0701b6dda164cf78$var$debug('120 this.matches=', this.matches);
                    $0701b6dda164cf78$var$debug('120 this.matches.length=', this.matches.length);
                    $0701b6dda164cf78$var$debug('120 yy_.yytext=', yy_.yytext);
                    try {
                        this.unput(')');
                        if (this.matches.length > 1) yy_.yytext = this.matches[1];
                    } catch (e3) {
                        console.error(e3);
                    }
                    $0701b6dda164cf78$var$lparenOpen = false;
                    $0701b6dda164cf78$var$debug('120 yy_.yytext=', yy_.yytext);
                    return 12;
                case 72:
                    /*! Conditions:: MIXIN_PARAMS_STARTED */ /*! Rule::       (.+)\.?\s*$ */ this.popState();
                    $0701b6dda164cf78$var$debug('150 this.matches=', this.matches);
                    $0701b6dda164cf78$var$debug('150 this.matches.length=', this.matches.length);
                    $0701b6dda164cf78$var$debug('150 yy_.yytext=', yy_.yytext);
                    try {
                        if (this.matches.length > 1) yy_.yytext = this.matches[1];
                    } catch (e4) {
                        console.error(e4);
                    }
                    $0701b6dda164cf78$var$debug('150 yy_.yytext=', yy_.yytext);
                    return 16;
                case 73:
                    /*! Conditions:: INITIAL */ /*! Rule::       <!--.+--> */ yy_.yytext = yy_.yytext.slice(4, -3);
                    return 9;
                case 74:
                    /*! Conditions:: UNBUF_CODE_FOLLOWER */ /*! Rule::       .+ */ this.popState();
                    this.unput(yy_.yytext);
                    break;
                case 75:
                    /*! Conditions:: UNBUF_CODE UNBUF_CODE_BLOCK */ /*! Rule::       .+ */ return this.popState();
                case 76:
                    /*! Conditions:: MIXIN_CALL */ /*! Rule::       . */ this.popState();
                    this.unput(yy_.yytext);
                    break;
                default:
                    return this.simpleCaseActionClusters[yyrulenumber];
            }
        },
        simpleCaseActionClusters: {
            /*! Conditions:: INITIAL */ /*! Rule::       -{space}*$ */ 12: 10,
            /*! Conditions:: INTERPOLATION */ /*! Rule::       .+ */ 25: 31,
            /*! Conditions:: ATTRS_END */ /*! Rule::       \) */ 33: 13,
            /*! Conditions:: AFTER_TAG_NAME AFTER_TEXT_TAG_NAME ATTRS_END */ /*! Rule::       \.\s*$ */ 53: 26,
            /*! Conditions:: UNBUF_CODE_START */ /*! Rule::       .+ */ 61: 4,
            /*! Conditions:: MULTI_LINE_ATTRS */ /*! Rule::       .+ */ 69: 8
        },
        rules: [
            /*  0: */ /^(?:((?<!\\)(#\{)([^}]+)(\})))/i,
            /*  1: */ /^(?:((?<!\\)(!\{)([^}]+)(\})))/i,
            /*  2: */ /^(?:((?<!\\)(#\[)(\w+)(?:\(([^\n)]*)\))?\s(.*?)(\])))/i,
            /*  3: */ /^(?:((append|block|case|default|doctype|each|else|extend|extends|for|if|include|mixin|prepend|unless|when|while|yield)\b))/i,
            /*  4: */ /^(?:((a|abbr|acronym|address|applet|area|article|aside|audio|b|base|basefont|bdi|bdo|bgsound|big|blink|blockquote|body|br|button|canvas|caption|center|cite|code|col|colgroup|content|data|datalist|dd|del|details|dfn|dialog|dir|div|dl|dt|em|embed|fb|fieldset|figcaption|figure|font|foo|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hgroup|hr|html|i|iframe|image|img|input|ins|kbd|keygen|label|legend|li|link|main|map|mark|marquee|math|menu|menuitem|meta|meter|nav|nobr|noembed|noframes|noscript|object|ol|optgroup|option|output|p|param|picture|plaintext|portal|pre|progress|q|rb|rp|rt|rtc|ruby|s|samp|section|select|shadow|slot|small|source|spacer|span|strike|strong|sub|summary|sup|svg|table|tbody|td|template|textarea|tfoot|th|thead|time|title|tr|track|tt|u|ul|var|video|wbr|xmp)\b))/i,
            /*  5: */ /^(?:(script|style))/i,
            /*  6: */ /^(?:(#[\d\-a-z]+))/i,
            /*  7: */ /^(?:(\+\s*[a-z]+\b))/i,
            /*  8: */ /^(?:\})/i,
            /*  9: */ /^(?:{conditional})/i,
            /* 10: */ /^(?:\()/i,
            /* 11: */ /^(?:.+\))/i,
            /* 12: */ /^(?:-([   -​\u2028\u2029　])*$)/i,
            /* 13: */ /^(?:-)/i,
            /* 14: */ /^(?:(\.-?[^\W\d]+[\w\-]*))/i,
            /* 15: */ /^(?:(\.-?\w+[\w\-]*))/i,
            /* 16: */ /^(?:\/\/-)/i,
            /* 17: */ /^(?:\/\/)/i,
            /* 18: */ /^(?:<[A-Z_]+>)/i,
            /* 19: */ /^(?:\| )/i,
            /* 20: */ /^(?:\|\.)/i,
            /* 21: */ /^(?:\|$)/i,
            /* 22: */ /^(?:&attributes\([^)]+\))/i,
            /* 23: */ /^(?:{interpolation})/i,
            /* 24: */ /^(?:{interpolation}.+)/i,
            /* 25: */ /^(?:.+)/i,
            /* 26: */ /^(?:{interpolation_start})/i,
            /* 27: */ /^(?:<\/.+)/i,
            /* 28: */ /^(?:= )/i,
            /* 29: */ /^(?:: )/i,
            /* 30: */ /^(?:(:[\d\-a-z]+\b))/i,
            /* 31: */ /^(?:(:[\d\-a-z]+\b))/i,
            /* 32: */ /^(?:\()/i,
            /* 33: */ /^(?:\))/i,
            /* 34: */ /^(?:\))/i,
            /* 35: */ /^(?:(\.-?[^\W\d]+[\w\-]*))/i,
            /* 36: */ /^(?:(#[\d\-a-z]+))/i,
            /* 37: */ /^(?:(\.-?\w+[\w\-]*))/i,
            /* 38: */ /^(?:(\(.+|.+\().+)/i,
            /* 39: */ /^(?:([^)]+)(\))(?!\s*\..+\)))/i,
            /* 40: */ /^(?:(.+)\)\s*$)/i,
            /* 41: */ /^(?:(.+)\)\.?\s*(.+)$)/i,
            /* 42: */ /^(?:(.+)\.?\s*$)/i,
            /* 43: */ /^(?:(#[\d\-a-z]+))/i,
            /* 44: */ /^(?:(\.-?[^\W\d]+[\w\-]*))/i,
            /* 45: */ /^(?:(\.-?\w+[\w\-]*))/i,
            /* 46: */ /^(?:([   -​\u2028\u2029　]){2,})/i,
            /* 47: */ /^(?:([   -​\u2028\u2029　])([   -​\u2028\u2029　]))/i,
            /* 48: */ /^(?:([   -​\u2028\u2029　])(\.-?[^\W\d]+[\w\-]*))/i,
            /* 49: */ /^(?:([   -​\u2028\u2029　])(\.-?\w+[\w\-]*))/i,
            /* 50: */ /^(?:([   -​\u2028\u2029　]))/i,
            /* 51: */ /^(?:([   -​\u2028\u2029　]))/i,
            /* 52: */ /^(?:([   -​\u2028\u2029　]))/i,
            /* 53: */ /^(?:\.\s*$)/i,
            /* 54: */ /^(?:.+)/i,
            /* 55: */ /^(?:.+)/i,
            /* 56: */ /^(?:=([   -​\u2028\u2029　]))/i,
            /* 57: */ /^(?:\.\s*$)/i,
            /* 58: */ /^(?:.+)/i,
            /* 59: */ /^(?:.+)/i,
            /* 60: */ /^(?:([   -​\u2028\u2029　]))/i,
            /* 61: */ /^(?:.+)/i,
            /* 62: */ /^(?:(\.-?[^\W\d]+[\w\-]*))/i,
            /* 63: */ /^(?:(#[\d\-a-z]+))/i,
            /* 64: */ /^(?:\()/i,
            /* 65: */ /^(?:([   -​\u2028\u2029　])$)/i,
            /* 66: */ /^(?::([   -​\u2028\u2029　])?)/i,
            /* 67: */ /^(?:.+)/i,
            /* 68: */ /^(?:,?(.*)\))/i,
            /* 69: */ /^(?:.+)/i,
            /* 70: */ /^(?:\))/i,
            /* 71: */ /^(?:(.+)(\)))/i,
            /* 72: */ /^(?:(.+)\.?\s*$)/i,
            /* 73: */ /^(?:<!--.+-->)/i,
            /* 74: */ /^(?:.+)/i,
            /* 75: */ /^(?:.+)/i,
            /* 76: */ /^(?:.)/i
        ],
        conditions: {
            'TEXT': {
                rules: [
                    19,
                    67
                ],
                inclusive: false
            },
            'TEXT_START': {
                rules: [],
                inclusive: false
            },
            'AFTER_TAG_NAME': {
                rules: [
                    22,
                    28,
                    29,
                    32,
                    43,
                    44,
                    45,
                    47,
                    48,
                    49,
                    50,
                    53,
                    54
                ],
                inclusive: false
            },
            'ATTRS_STARTED': {
                rules: [
                    38,
                    39,
                    40,
                    41,
                    42
                ],
                inclusive: false
            },
            'ATTR_TEXT': {
                rules: [],
                inclusive: false
            },
            'MIXIN_CALL': {
                rules: [
                    76
                ],
                inclusive: false
            },
            'MIXIN_CALL_START': {
                rules: [
                    6,
                    22,
                    62,
                    63,
                    64,
                    65
                ],
                inclusive: false
            },
            'ATTRS_END': {
                rules: [
                    0,
                    1,
                    2,
                    22,
                    33,
                    35,
                    36,
                    37,
                    52,
                    53,
                    56,
                    57,
                    59
                ],
                inclusive: true
            },
            'CODE_START': {
                rules: [],
                inclusive: false
            },
            'UNBUF_CODE': {
                rules: [
                    13,
                    75
                ],
                inclusive: false
            },
            'MULTI_LINE_ATTRS': {
                rules: [
                    68,
                    69
                ],
                inclusive: false
            },
            'COMMENT': {
                rules: [],
                inclusive: false
            },
            'AFTER_ATTRS': {
                rules: [
                    29
                ],
                inclusive: false
            },
            'AFTER_TEXT_TAG_NAME': {
                rules: [
                    32,
                    47,
                    48,
                    49,
                    50,
                    53,
                    54
                ],
                inclusive: false
            },
            'AFTER_KEYWORD': {
                rules: [
                    31,
                    47,
                    48,
                    49,
                    51,
                    55
                ],
                inclusive: false
            },
            'NO_MORE_SPACE': {
                rules: [
                    54
                ],
                inclusive: false
            },
            'ASSIGNMENT_VALUE': {
                rules: [
                    58
                ],
                inclusive: false
            },
            'COND_START': {
                rules: [
                    10,
                    11
                ],
                inclusive: false
            },
            'INTERPOLATION_START': {
                rules: [],
                inclusive: false
            },
            'MIXIN_PARAMS_STARTED': {
                rules: [
                    70,
                    71,
                    72
                ],
                inclusive: false
            },
            'HTML_COMMENT_STARTED': {
                rules: [],
                inclusive: false
            },
            'INTERPOLATION': {
                rules: [
                    25
                ],
                inclusive: false
            },
            'MIXIN_PARAMS_END': {
                rules: [
                    34,
                    35,
                    36,
                    52,
                    56,
                    66
                ],
                inclusive: false
            },
            'UNBUF_CODE_START': {
                rules: [
                    60,
                    61
                ],
                inclusive: false
            },
            'UNBUF_CODE_BLOCK': {
                rules: [
                    75
                ],
                inclusive: false
            },
            'INITIAL': {
                rules: [
                    0,
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7,
                    8,
                    9,
                    12,
                    13,
                    14,
                    15,
                    16,
                    17,
                    18,
                    19,
                    20,
                    21,
                    22,
                    23,
                    24,
                    26,
                    27,
                    30,
                    35,
                    36,
                    37,
                    46,
                    57,
                    73
                ],
                inclusive: true
            },
            'MIXIN_CALL_END': {
                rules: [
                    6
                ],
                inclusive: false
            },
            'AFTER_MIXIN_CALL': {
                rules: [
                    29
                ],
                inclusive: false
            },
            'UNBUF_CODE_FOLLOWER': {
                rules: [
                    74
                ],
                inclusive: false
            }
        }
    };
    return lexer;
}();
$0701b6dda164cf78$var$parser.lexer = $0701b6dda164cf78$var$lexer;
const $0701b6dda164cf78$var$TEXT_TAGS_ALLOW_SUB_TAGS = false;
const $0701b6dda164cf78$var$debug = $c1Lgv$debug('line-lexer');
let $0701b6dda164cf78$var$tagAlreadyFound = false;
let $0701b6dda164cf78$var$obj;
var $0701b6dda164cf78$var$lparenOpen = false;
const $0701b6dda164cf78$var$attrResolver = new $c1Lgv$AttrResolver();
function $0701b6dda164cf78$var$rank(type1, type2) {
    if (type2 === 'text') return type1;
    else if (type1 === type2) return type1;
    else if (type1 == 'tag' && type2 == 'mixin_call') return type2;
    else if (type1 == 'mixin_call' && type2 == 'tag') return type1;
    else return type1.concat(type2);
}
function $0701b6dda164cf78$var$isQuoted(str) {
    if (str.trim().slice(-1) === "'" && str.trim().slice(-1) === "'") return true;
    if (str.trim().slice(-1) === '"' && str.trim().slice(-1) === "'") return true;
    return false;
}
function $0701b6dda164cf78$var$quote(str) {
    return '"' + str + '"';
}
function $0701b6dda164cf78$var$unquote(str) {
    return str.trim().slice(1, -1);
}
function $0701b6dda164cf78$var$merge(obj, src) {
    if (obj == undefined || $c1Lgv$lodash.isEmpty(obj)) {
        $0701b6dda164cf78$var$debug('empty/undefined obj, returning src');
        return src;
    } else if (src == undefined || $c1Lgv$lodash.isEmpty(src)) {
        $0701b6dda164cf78$var$debug('empty/undefined src, returning obj');
        return obj;
    }
    if (Array.isArray(src) && src.length > 0) {
        src = src.reduce($0701b6dda164cf78$var$merge);
        $0701b6dda164cf78$var$debug('src reduced to=', src);
    }
    $0701b6dda164cf78$var$debug('merging', obj, src);
    if (obj.type != 'text' && Object.keys(src).length == 1 && Object.keys(src)[0] == 'children' && src.children.length == 1 && src.children[0].hasOwnProperty('type') && src.children[0].type == 'text') return Object.assign(obj, {
        val: $0701b6dda164cf78$var$quote(src.children[0].val)
    });
    if (obj.type === 'include' && src.type === 'text') return Object.assign(obj, {
        val: src.val
    });
    let ret = $c1Lgv$lodash.mergeWith(obj, src, function(objValue, srcValue, key, object, source, stack) {
        $0701b6dda164cf78$var$debug('merging', 'inside _mergeWith', key, objValue, srcValue);
        if (objValue == undefined && srcValue == undefined) return {
        };
        if (objValue == undefined) return srcValue;
        if (srcValue == undefined) return objValue;
        return $0701b6dda164cf78$var$rank(objValue, srcValue);
    });
    $0701b6dda164cf78$var$debug('merging', ' returning', ret);
    return ret;
}
// creates nodes of text and/or interpolations
function $0701b6dda164cf78$var$createElems(text, parser) {
    const debug = $c1Lgv$debug('line-lexer:createElems');
    const matches1 = text.matchAll(/#[\[\{].*?[\]\}]/g);
    let idx = 0;
    let elems = [];
    for (const match of matches1){
        debug('match=', match);
        if (idx != match.index) {
            const textToPush = text.substring(idx, match.index);
            debug('pushing text onto element array:', textToPush);
            elems.push({
                type: 'text',
                val: textToPush
            });
            idx = match.index;
        }
        if (match[0][1] == '[') {
            debug('found left bracked');
            const toParse = match[0].slice(2, -1);
            debug('sending to parser:', toParse);
            const results = parser.parse(toParse);
            debug('received from parser:', results);
            elems.push(results);
        } else {
            debug('pushing interpolation value to arr:', match[0].slice(2, -1));
            elems.push({
                type: 'interpolation',
                val: match[0].slice(2, -1)
            });
        }
        idx += match[0].length;
    }
    if (idx != text.length) elems.push({
        type: 'text',
        val: text.substring(idx, text.index)
    });
    debug('returning=', $c1Lgv$util.inspect(elems, false, 5));
    return elems;
}
function $0701b6dda164cf78$var$Parser() {
    this.yy = {
    };
}
$0701b6dda164cf78$var$Parser.prototype = $0701b6dda164cf78$var$parser;
$0701b6dda164cf78$var$parser.Parser = $0701b6dda164cf78$var$Parser;
function $0701b6dda164cf78$var$yyparse() {
    return $0701b6dda164cf78$var$parser.parse.apply($0701b6dda164cf78$var$parser, arguments);
}
var $0701b6dda164cf78$export$2e2bcd8739ae039 = {
    parser: $0701b6dda164cf78$var$parser,
    Parser: $0701b6dda164cf78$var$Parser,
    parse: $0701b6dda164cf78$var$yyparse
};






export {$0701b6dda164cf78$export$2e2bcd8739ae039 as Parser, $51f63cf6b52326c0$export$2e2bcd8739ae039 as InlineParser, $510a014853e7284e$export$2e2bcd8739ae039 as AttrsParser};
//# sourceMappingURL=module.js.map
