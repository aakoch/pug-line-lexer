{"mappings":"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CAM,EACA,CAAC,EAAG,GACJA,EACA,CAAC,GAAI,IACLA,EACA,CAAC,GAAI,IACLA,EACA,CAAC,GAAI,GACL,EACAN,EACA,CAAC,EAAG,IACJM,EACA,CAAC,GAAI,KAELiF,OAAQ/E,EAAE,CACV,EACA,EACA,EACA,EACA,EACAR,EACA,CAAC,GAAI,EAAG,GACR,EACAM,EACA,CAAC,GAAI,GACLA,EACA,CAAC,EAAG,GACJA,EACA,CAAC,EAAG,GACJ,EACA,EACA,GACA,GACA,GACAN,EACA,CAAC,GAAI,EAAG,GACR,GACA,GACA,EACA,GACA,GACAA,EACA,CAAC,GAAI,EAAG,GACR,GACAM,EACA,CAAC,GAAI,GACL,EACA,EACA,GACA,EACA,GACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACAA,EACA,CAAC,GAAI,GACL,GACAA,EACA,CAAC,EAAG,GACJA,EACA,CAAC,GAAI,GACL,GACA,GACA,GACA,GACAA,EACA,CAAC,GAAI,GACL,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACAA,EACA,CAAC,GAAI,GACL,GACAA,EACA,CAAC,EAAG,GACJ,GACA,GACAA,EACA,CAAC,GAAI,GACLA,EACA,CAAC,GAAI,GACL,EACA,GACA,GACA,GACA,GACAA,EACA,CAAC,GAAI,GACL,GACAA,EACA,CAAC,GAAI,KAELe,KAAMb,EAAE,CACRR,EACA,CAAC,EAAG,GACJA,EACA,CAAC,EAAG,GACJ,EACAM,EACA,CAAC,GAAI,GACLN,EACA,CAAC,EAAG,IACJA,EACA,CAAC,EAAG,GACJM,EACA,CAAC,EAAG,GACJN,EACA,CAAC,EAAG,IACJM,EACA,CAAC,GAAI,GACL,EACAA,EACA,CAAC,GAAI,GACLA,EACA,CAAC,GAAI,IACLA,EACA,CAAC,GAAI,GACLA,EACA,CAAC,GAAI,IACLA,EACA,CAAC,GAAI,GACLA,EACA,CAAC,GAAI,IACLA,EACA,CAAC,GAAI,KAELwF,MAAOtF,EAAE,CACT,EACA,EACA,EACA,EACA,GACA,EACAR,EACA,CAAC,GAAI,EAAG,GACR,GACAA,EACA,CAAC,GAAI,EAAG,GACR,GACA,GACAA,EACA,CAAC,GAAI,EAAG,GACR,GACA,GACA,GACA,GACAA,EACA,CAAC,GAAI,EAAG,GACR,GACA,KAEAuI,KAAM/H,EAAE,CACR,EACAR,EACA,CAAC,EAAG,GACJA,EACA,CAAC,EAAG,GACJM,EACA,CAAC,GAAI,IACLA,EACA,CAAC,GAAI,IACLA,EACA,CAAC,GAAI,GACLA,EACA,CAAC,GAAI,GACLA,EACA,CAAC,GAAI,IACLA,EACA,CAAC,GAAI,IACLA,EACA,CAAC,GAAI,IACLA,EACA,CAAC,GAAI,GACLN,EACA,CAAC,EAAG,KAEJyI,KAAMjI,EAAE,CACR,EACA,EACAR,EACA,CAAC,EAAG,EAAG,GACPM,EACA,CAAC,EAAG,GACJN,EACA,CAAC,EAAG,GACJ,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACAA,EACA,CAAC,GAAI,GACLA,EACA,CAAC,GAAI,EAAG,GACR,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACAA,EACA,CAAC,GAAI,EAAG,GACR,GACA,GACA,GACA,GACA,GACA,GACA,GACAA,EACA,CAAC,GAAI,EAAG,GACR,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACAA,EACA,CAAC,GAAI,GACLA,EACA,CAAC,GAAI,GAAI,GACT,GACA,GACA,GACA,GACAA,EACA,CAAC,GAAI,EAAG,OAGVgJ,wBApiCqBxD,GAIT,IAHA,IAAI/E,EAAK,GACL4F,EAAIb,EAAEyD,IACNT,EAAIhD,EAAEiD,KACDrI,EAAI,EAAGF,EAAImG,EAAE9F,OAAQH,EAAIF,EAAGE,IAAK,CAEtCK,EADQ4F,EAAEjG,IACFoI,EAAEpI,GAEd,OAAOK,EA4hCHyI,CAAI,CAClBD,IAAKzI,EAAE,CACP,EACA,EACAR,EACA,CAAC,EAAG,EAAG,GACP,GACA,GACA,GACA,GACAA,EACA,CAAC,GAAI,EAAG,GACR,GACA,GACA,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DrI,EAAI,EAAGF,EAAImG,EAAE9F,OAAQH,EAAIF,EAAGE,IAAK,CAGtC,IAFA,IAAIsI,EAAIrC,EAAEjG,GACNuI,EAAI,GACCC,EAAI,EAAGA,EAAIF,EAAGE,IAAK,CACxB,IAAIC,EAAIT,EAAEU,QACV,OAAQT,EAAES,SACV,KAAK,EACDH,EAAEE,GAAK,CACHP,EAAEQ,QACFN,EAAEM,SAEN,MAEJ,KAAK,EACDH,EAAEE,GAAK1I,EAAE2I,QACT,cAIAH,EAAEE,GAAK,CACH,IAIZpI,EAAGJ,KAAKsI,GAEZ,OAAOlI,EAoXZwX,CAAG,CACR9P,IAAKgP,EAAE,CACP,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACAD,EACA,CAAC,EAAG,GACJ,EACA,IAEA3R,OAAQ4R,EAAE,CACV,EACA,EACA,EACA,GACA,GACA,GACA,EACA,EACA,EACA,GACA,GACA,GACA,EACA,EACA,EACA,GACA,EACA,EACA,GACAD,EACA,CAAC,GAAI,GACL,EACA,GACAA,EACA,CAAC,EAAG,GACJ,EACA,EACA,GACA,EACA,EACA,EACA,GACA,IAEA7V,KAAM8V,EAAE,CACRF,EACA,CAAC,EAAG,GACJA,EACA,CAAC,EAAG,GACJ,EACAC,EACA,CAAC,EAAG,GACJD,EACA,CAAC,EAAG,GACJC,EACA,CAAC,EAAG,GACJA,EACA,CAAC,GAAI,MAELpR,MAAOqR,EAAE,CACT,EACA,EACA,EACA,EACA,EACA,GACA,KAEA5O,KAAM4O,EAAE,CACRF,EACA,CAAC,EAAG,GACJ,EACA,EACA,EACA,EACAC,EACA,CAAC,EAAG,GACJD,EACA,CAAC,EAAG,GACJC,EACA,CAAC,GAAI,KAELzO,KAAM0O,EAAE,CACR,EACA,EACA,EACA,EACA,GACA,GACA,EACA,GACA,EACA,EACA,EACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACAF,EACA,CAAC,GAAI,GACL,GACA,EACA,GACA,EACA,EACA,OAGFjO,eAAgB,CACd,EAAG,EACH,EAAG,EACH,EAAG,EACH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AAI,EAAGF,EAAImG,EAAE9F,OAAQH,EAAIF,EAAGE,IAAK,CAGtC,IAFA,IAAIsI,EAAIrC,EAAEjG,GACNuI,EAAI,GACCC,EAAI,EAAGA,EAAIF,EAAGE,IAAK,CACxB,IAAIC,EAAIT,EAAEU,QACV,OAAQT,EAAES,SACV,KAAK,EACDH,EAAEE,GAAK,CACHP,EAAEQ,QACFN,EAAEM,SAEN,MAEJ,KAAK,EACDH,EAAEE,GAAK1I,EAAE2I,QACT,cAIAH,EAAEE,GAAK,CACH,IAIZpI,EAAGJ,KAAKsI,GAEZ,OAAOlI,EAi0BZ0c,CAAG,CACRhV,IAAK+Q,EAAE,CACP,GACA,EACA,EACA,EACA,EACAF,EACA,CAAC,EAAG,GACJ,GACAA,EACA,CAAC,EAAG,IACJ,EACAA,EACA,CAAC,EAAG,GACJ,EACA,GACAA,EACA,CAAC,EAAG,GACJ,GACA,EACA,GACA,GACA,GACA,EACA,GACAC,EACA,CAAC,GAAI,GACLD,EACA,CAAC,EAAG,GACJ,EACAC,EACA,CAAC,GAAI,GACLD,EACA,CAAC,EAAG,GACJA,EACA,CAAC,EAAG,MAEJzT,OAAQ2T,EAAE,CACV,EACA,EACA,EACA,EACA,EACA,EACA,GACA,GACAF,EACA,CAAC,GAAI,GAAI,GACTA,EACA,CAAC,GAAI,EAAG,GACRA,EACA,CAAC,EAAG,GACJ,EACA,EACA,EACA,EACA,GACA,GACA,GACA,GACAC,EACA,CAAC,EAAG,GACJ,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACAA,EACA,CAAC,GAAI,GACL,GACA,GACA,GACA,GACAA,EACA,CAAC,GAAI,IACLA,EACA,CAAC,GAAI,GACLA,EACA,CAAC,GAAI,GACLA,EACA,CAAC,GAAI,GACL,GACAA,EACA,CAAC,GAAI,GACL,GACAA,EACA,CAAC,GAAI,GACLA,EACA,CAAC,EAAG,GACJ,EACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACAA,EACA,CAAC,GAAI,GACLA,EACA,CAAC,GAAI,GACL,GACA,GACAA,EACA,CAAC,GAAI,GACLA,EACA,CAAC,GAAI,GACLA,EACA,CAAC,GAAI,GACLA,EACA,CAAC,IAAK,GACN,GACA,GACA,EACA,GACA,GACAA,EACA,CAAC,GAAI,GACLD,EACA,CAAC,GAAI,KAEL3X,KAAM6X,EAAE,CACRF,EACA,CAAC,EAAG,IACJA,EACA,CAAC,EAAG,GACJ,EACAC,EACA,CAAC,GAAI,IACLA,EACA,CAAC,GAAI,IACLA,EACA,CAAC,GAAI,IACLA,EACA,CAAC,GAAI,IACLA,EACA,CAAC,GAAI,IACLA,EACA,CAAC,GAAI,IACLA,EACA,CAAC,GAAI,IACLD,EACA,CAAC,EAAG,MAEJlT,MAAOoT,EAAE,CACT,EACA,EACA,EACA,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACA,EACA,EACA,GACA,GACA,GACA,KAEA3Q,KAAM2Q,EAAE,CACRF,EACA,CAAC,EAAG,IACJ,EACAC,EACA,CAAC,EAAG,GACJD,EACA,CAAC,EAAG,GACJC,EACA,CAAC,EAAG,GACJA,EACA,CAAC,GAAI,GACLA,EACA,CAAC,GAAI,GACLA,EACA,CAAC,GAAI,IACLA,EACA,CAAC,GAAI,GACLD,EACA,CAAC,EAAG,GACJC,EACA,CAAC,EAAG,GACJA,EACA,CAAC,GAAI,GACLA,EACA,CAAC,GAAI,GACLA,EACA,CAAC,GAAI,IACLA,EACA,CAAC,GAAI,IACLA,EACA,CAAC,GAAI,IACLD,EACA,CAAC,EAAG,KAEJvQ,KAAMyQ,EAAE,CACR,EACA,GACA,GACAF,EACA,CAAC,EAAG,EAAG,GACP,GACA,GACAA,EACA,CAAC,GAAI,EAAG,GACRA,EACA,CAAC,GAAI,GAAI,GACT,EACA,GACA,GACA,GACA,GACA,GACA,GACA,GACAA,EACA,CAAC,GAAI,GACL,GACA,GACA,GACA,GACA,GACA,GACA,GACA,GACAA,EACA,CAAC,GAAI,EAAG,GACR,GACA,GACAC,EACA,CAAC,GAAI,IACLD,EACA,CAAC,GAAI,GACL,GACAA,EACA,CAAC,GAAI,GACLA,EACA,CAAC,GAAI,GACL,GACAA,EACA,CAAC,GAAI,GACLA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","sources":["workspaces/pug-line-lexer/build/inline.js","workspaces/pug-line-lexer/build/attrs.js","workspaces/pug-line-lexer/build/main.js"],"sourcesContent":["\n/* parser generated by jison 0.6.1-216 */\n\n/*\n * Returns a Parser object of the following structure:\n *\n *  Parser: {\n *    yy: {}     The so-called \"shared state\" or rather the *source* of it;\n *               the real \"shared state\" `yy` passed around to\n *               the rule actions, etc. is a derivative/copy of this one,\n *               not a direct reference!\n *  }\n *\n *  Parser.prototype: {\n *    yy: {},\n *    EOF: 1,\n *    TERROR: 2,\n *\n *    trace: function(errorMessage, ...),\n *\n *    JisonParserError: function(msg, hash),\n *\n *    quoteName: function(name),\n *               Helper function which can be overridden by user code later on: put suitable\n *               quotes around literal IDs in a description string.\n *\n *    originalQuoteName: function(name),\n *               The basic quoteName handler provided by JISON.\n *               `cleanupAfterParse()` will clean up and reset `quoteName()` to reference this function\n *               at the end of the `parse()`.\n *\n *    describeSymbol: function(symbol),\n *               Return a more-or-less human-readable description of the given symbol, when\n *               available, or the symbol itself, serving as its own 'description' for lack\n *               of something better to serve up.\n *\n *               Return NULL when the symbol is unknown to the parser.\n *\n *    symbols_: {associative list: name ==> number},\n *    terminals_: {associative list: number ==> name},\n *    nonterminals: {associative list: rule-name ==> {associative list: number ==> rule-alt}},\n *    terminal_descriptions_: (if there are any) {associative list: number ==> description},\n *    productions_: [...],\n *\n *    performAction: function parser__performAction(yytext, yyleng, yylineno, yyloc, yystate, yysp, yyvstack, yylstack, yystack, yysstack),\n *\n *               The function parameters and `this` have the following value/meaning:\n *               - `this`    : reference to the `yyval` internal object, which has members (`$` and `_$`)\n *                             to store/reference the rule value `$$` and location info `@$`.\n *\n *                 One important thing to note about `this` a.k.a. `yyval`: every *reduce* action gets\n *                 to see the same object via the `this` reference, i.e. if you wish to carry custom\n *                 data from one reduce action through to the next within a single parse run, then you\n *                 may get nasty and use `yyval` a.k.a. `this` for storing you own semi-permanent data.\n *\n *                 `this.yy` is a direct reference to the `yy` shared state object.\n *\n *                 `%parse-param`-specified additional `parse()` arguments have been added to this `yy`\n *                 object at `parse()` start and are therefore available to the action code via the\n *                 same named `yy.xxxx` attributes (where `xxxx` represents a identifier name from\n *                 the %parse-param` list.\n *\n *               - `yytext`  : reference to the lexer value which belongs to the last lexer token used\n *                             to match this rule. This is *not* the look-ahead token, but the last token\n *                             that's actually part of this rule.\n *\n *                 Formulated another way, `yytext` is the value of the token immediately preceeding\n *                 the current look-ahead token.\n *                 Caveats apply for rules which don't require look-ahead, such as epsilon rules.\n *\n *               - `yyleng`  : ditto as `yytext`, only now for the lexer.yyleng value.\n *\n *               - `yylineno`: ditto as `yytext`, only now for the lexer.yylineno value.\n *\n *               - `yyloc`   : ditto as `yytext`, only now for the lexer.yylloc lexer token location info.\n *\n *                               WARNING: since jison 0.4.18-186 this entry may be NULL/UNDEFINED instead\n *                               of an empty object when no suitable location info can be provided.\n *\n *               - `yystate` : the current parser state number, used internally for dispatching and\n *                               executing the action code chunk matching the rule currently being reduced.\n *\n *               - `yysp`    : the current state stack position (a.k.a. 'stack pointer')\n *\n *                 This one comes in handy when you are going to do advanced things to the parser\n *                 stacks, all of which are accessible from your action code (see the next entries below).\n *\n *                 Also note that you can access this and other stack index values using the new double-hash\n *                 syntax, i.e. `##$ === ##0 === yysp`, while `##1` is the stack index for all things\n *                 related to the first rule term, just like you have `$1`, `@1` and `#1`.\n *                 This is made available to write very advanced grammar action rules, e.g. when you want\n *                 to investigate the parse state stack in your action code, which would, for example,\n *                 be relevant when you wish to implement error diagnostics and reporting schemes similar\n *                 to the work described here:\n *\n *                 + Pottier, F., 2016. Reachability and error diagnosis in LR(1) automata.\n *                   In Journées Francophones des Languages Applicatifs.\n *\n *                 + Jeffery, C.L., 2003. Generating LR syntax error messages from examples.\n *                   ACM Transactions on Programming Languages and Systems (TOPLAS), 25(5), pp.631–640.\n *\n *               - `yyrulelength`: the current rule's term count, i.e. the number of entries occupied on the stack.\n *\n *                 This one comes in handy when you are going to do advanced things to the parser\n *                 stacks, all of which are accessible from your action code (see the next entries below).\n *\n *               - `yyvstack`: reference to the parser value stack. Also accessed via the `$1` etc.\n *                             constructs.\n *\n *               - `yylstack`: reference to the parser token location stack. Also accessed via\n *                             the `@1` etc. constructs.\n *\n *                             WARNING: since jison 0.4.18-186 this array MAY contain slots which are\n *                             UNDEFINED rather than an empty (location) object, when the lexer/parser\n *                             action code did not provide a suitable location info object when such a\n *                             slot was filled!\n *\n *               - `yystack` : reference to the parser token id stack. Also accessed via the\n *                             `#1` etc. constructs.\n *\n *                 Note: this is a bit of a **white lie** as we can statically decode any `#n` reference to\n *                 its numeric token id value, hence that code wouldn't need the `yystack` but *you* might\n *                 want access this array for your own purposes, such as error analysis as mentioned above!\n *\n *                 Note that this stack stores the current stack of *tokens*, that is the sequence of\n *                 already parsed=reduced *nonterminals* (tokens representing rules) and *terminals*\n *                 (lexer tokens *shifted* onto the stack until the rule they belong to is found and\n *                 *reduced*.\n *\n *               - `yysstack`: reference to the parser state stack. This one carries the internal parser\n *                             *states* such as the one in `yystate`, which are used to represent\n *                             the parser state machine in the *parse table*. *Very* *internal* stuff,\n *                             what can I say? If you access this one, you're clearly doing wicked things\n *\n *               - `...`     : the extra arguments you specified in the `%parse-param` statement in your\n *                             grammar definition file.\n *\n *    table: [...],\n *               State transition table\n *               ----------------------\n *\n *               index levels are:\n *               - `state`  --> hash table\n *               - `symbol` --> action (number or array)\n *\n *                 If the `action` is an array, these are the elements' meaning:\n *                 - index [0]: 1 = shift, 2 = reduce, 3 = accept\n *                 - index [1]: GOTO `state`\n *\n *                 If the `action` is a number, it is the GOTO `state`\n *\n *    defaultActions: {...},\n *\n *    parseError: function(str, hash, ExceptionClass),\n *    yyError: function(str, ...),\n *    yyRecovering: function(),\n *    yyErrOk: function(),\n *    yyClearIn: function(),\n *\n *    constructParseErrorInfo: function(error_message, exception_object, expected_token_set, is_recoverable),\n *               Helper function **which will be set up during the first invocation of the `parse()` method**.\n *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.\n *               See it's use in this parser kernel in many places; example usage:\n *\n *                   var infoObj = parser.constructParseErrorInfo('fail!', null,\n *                                     parser.collect_expected_token_set(state), true);\n *                   var retVal = parser.parseError(infoObj.errStr, infoObj, parser.JisonParserError);\n *\n *    originalParseError: function(str, hash, ExceptionClass),\n *               The basic `parseError` handler provided by JISON.\n *               `cleanupAfterParse()` will clean up and reset `parseError()` to reference this function\n *               at the end of the `parse()`.\n *\n *    options: { ... parser %options ... },\n *\n *    parse: function(input[, args...]),\n *               Parse the given `input` and return the parsed value (or `true` when none was provided by\n *               the root action, in which case the parser is acting as a *matcher*).\n *               You MAY use the additional `args...` parameters as per `%parse-param` spec of this grammar:\n *               these extra `args...` are added verbatim to the `yy` object reference as member variables.\n *\n *               WARNING:\n *               Parser's additional `args...` parameters (via `%parse-param`) MAY conflict with\n *               any attributes already added to `yy` by the jison run-time;\n *               when such a collision is detected an exception is thrown to prevent the generated run-time\n *               from silently accepting this confusing and potentially hazardous situation!\n *\n *               The lexer MAY add its own set of additional parameters (via the `%parse-param` line in\n *               the lexer section of the grammar spec): these will be inserted in the `yy` shared state\n *               object and any collision with those will be reported by the lexer via a thrown exception.\n *\n *    cleanupAfterParse: function(resultValue, invoke_post_methods, do_not_nuke_errorinfos),\n *               Helper function **which will be set up during the first invocation of the `parse()` method**.\n *               This helper API is invoked at the end of the `parse()` call, unless an exception was thrown\n *               and `%options no-try-catch` has been defined for this grammar: in that case this helper MAY\n *               be invoked by calling user code to ensure the `post_parse` callbacks are invoked and\n *               the internal parser gets properly garbage collected under these particular circumstances.\n *\n *    yyMergeLocationInfo: function(first_index, last_index, first_yylloc, last_yylloc, dont_look_back),\n *               Helper function **which will be set up during the first invocation of the `parse()` method**.\n *               This helper API can be invoked to calculate a spanning `yylloc` location info object.\n *\n *               Note: %epsilon rules MAY specify no `first_index` and `first_yylloc`, in which case\n *               this function will attempt to obtain a suitable location marker by inspecting the location stack\n *               backwards.\n *\n *               For more info see the documentation comment further below, immediately above this function's\n *               implementation.\n *\n *    lexer: {\n *        yy: {...},           A reference to the so-called \"shared state\" `yy` once\n *                             received via a call to the `.setInput(input, yy)` lexer API.\n *        EOF: 1,\n *        ERROR: 2,\n *        JisonLexerError: function(msg, hash),\n *        parseError: function(str, hash, ExceptionClass),\n *        setInput: function(input, [yy]),\n *        input: function(),\n *        unput: function(str),\n *        more: function(),\n *        reject: function(),\n *        less: function(n),\n *        pastInput: function(n),\n *        upcomingInput: function(n),\n *        showPosition: function(),\n *        test_match: function(regex_match_array, rule_index, ...),\n *        next: function(...),\n *        lex: function(...),\n *        begin: function(condition),\n *        pushState: function(condition),\n *        popState: function(),\n *        topState: function(),\n *        _currentRules: function(),\n *        stateStackSize: function(),\n *        cleanupAfterLex: function()\n *\n *        options: { ... lexer %options ... },\n *\n *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START, ...),\n *        rules: [...],\n *        conditions: {associative list: name ==> set},\n *    }\n *  }\n *\n *\n *  token location info (@$, _$, etc.): {\n *    first_line: n,\n *    last_line: n,\n *    first_column: n,\n *    last_column: n,\n *    range: [start_number, end_number]\n *               (where the numbers are indexes into the input string, zero-based)\n *  }\n *\n * ---\n *\n * The `parseError` function receives a 'hash' object with these members for lexer and\n * parser errors:\n *\n *  {\n *    text:        (matched text)\n *    token:       (the produced terminal token, if any)\n *    token_id:    (the produced terminal token numeric ID, if any)\n *    line:        (yylineno)\n *    loc:         (yylloc)\n *  }\n *\n * parser (grammar) errors will also provide these additional members:\n *\n *  {\n *    expected:    (array describing the set of expected tokens;\n *                  may be UNDEFINED when we cannot easily produce such a set)\n *    state:       (integer (or array when the table includes grammar collisions);\n *                  represents the current internal state of the parser kernel.\n *                  can, for example, be used to pass to the `collect_expected_token_set()`\n *                  API to obtain the expected token set)\n *    action:      (integer; represents the current internal action which will be executed)\n *    new_state:   (integer; represents the next/planned internal state, once the current\n *                  action has executed)\n *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule\n *                  available for this particular error)\n *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used,\n *                  for instance, for advanced error analysis and reporting)\n *    value_stack: (array: the current parser LALR/LR internal `$$` value stack; this can be used,\n *                  for instance, for advanced error analysis and reporting)\n *    location_stack: (array: the current parser LALR/LR internal location stack; this can be used,\n *                  for instance, for advanced error analysis and reporting)\n *    yy:          (object: the current parser internal \"shared state\" `yy`\n *                  as is also available in the rule actions; this can be used,\n *                  for instance, for advanced error analysis and reporting)\n *    lexer:       (reference to the current lexer instance used by the parser)\n *    parser:      (reference to the current parser instance)\n *  }\n *\n * while `this` will reference the current parser instance.\n *\n * When `parseError` is invoked by the lexer, `this` will still reference the related *parser*\n * instance, while these additional `hash` fields will also be provided:\n *\n *  {\n *    lexer:       (reference to the current lexer instance which reported the error)\n *  }\n *\n * When `parseError` is invoked by the parser due to a **JavaScript exception** being fired\n * from either the parser or lexer, `this` will still reference the related *parser*\n * instance, while these additional `hash` fields will also be provided:\n *\n *  {\n *    exception:   (reference to the exception thrown)\n *  }\n *\n * Please do note that in the latter situation, the `expected` field will be omitted as\n * this type of failure is assumed not to be due to *parse errors* but rather due to user\n * action code in either parser or lexer failing unexpectedly.\n *\n * ---\n *\n * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.\n * These options are available:\n *\n * ### options which are global for all parser instances\n *\n *  Parser.pre_parse: function(yy)\n *                 optional: you can specify a pre_parse() function in the chunk following\n *                 the grammar, i.e. after the last `%%`.\n *  Parser.post_parse: function(yy, retval, parseInfo) { return retval; }\n *                 optional: you can specify a post_parse() function in the chunk following\n *                 the grammar, i.e. after the last `%%`. When it does not return any value,\n *                 the parser will return the original `retval`.\n *\n * ### options which can be set up per parser instance\n *\n *  yy: {\n *      pre_parse:  function(yy)\n *                 optional: is invoked before the parse cycle starts (and before the first\n *                 invocation of `lex()`) but immediately after the invocation of\n *                 `parser.pre_parse()`).\n *      post_parse: function(yy, retval, parseInfo) { return retval; }\n *                 optional: is invoked when the parse terminates due to success ('accept')\n *                 or failure (even when exceptions are thrown).\n *                 `retval` contains the return value to be produced by `Parser.parse()`;\n *                 this function can override the return value by returning another.\n *                 When it does not return any value, the parser will return the original\n *                 `retval`.\n *                 This function is invoked immediately before `parser.post_parse()`.\n *\n *      parseError: function(str, hash, ExceptionClass)\n *                 optional: overrides the default `parseError` function.\n *      quoteName: function(name),\n *                 optional: overrides the default `quoteName` function.\n *  }\n *\n *  parser.lexer.options: {\n *      pre_lex:  function()\n *                 optional: is invoked before the lexer is invoked to produce another token.\n *                 `this` refers to the Lexer object.\n *      post_lex: function(token) { return token; }\n *                 optional: is invoked when the lexer has produced a token `token`;\n *                 this function can override the returned token value by returning another.\n *                 When it does not return any (truthy) value, the lexer will return\n *                 the original `token`.\n *                 `this` refers to the Lexer object.\n *\n *      ranges: boolean\n *                 optional: `true` ==> token location info will include a .range[] member.\n *      flex: boolean\n *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested\n *                 exhaustively to find the longest match.\n *      backtrack_lexer: boolean\n *                 optional: `true` ==> lexer regexes are tested in order and for invoked;\n *                 the lexer terminates the scan when a token is returned by the action code.\n *      xregexp: boolean\n *                 optional: `true` ==> lexer rule regexes are \"extended regex format\" requiring the\n *                 `XRegExp` library. When this `%option` has not been specified at compile time, all lexer\n *                 rule regexes have been written as standard JavaScript RegExp expressions.\n *  }\n */\n\n\n\n\n\n// See also:\n// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508\n// but we keep the prototype.constructor and prototype.name assignment lines too for compatibility\n// with userland code which might access the derived class in a 'classic' way.\nfunction JisonParserError(msg, hash) {\n    Object.defineProperty(this, 'name', {\n        enumerable: false,\n        writable: false,\n        value: 'JisonParserError'\n    });\n\n    if (msg == null) msg = '???';\n\n    Object.defineProperty(this, 'message', {\n        enumerable: false,\n        writable: true,\n        value: msg\n    });\n\n    this.hash = hash;\n\n    var stacktrace;\n    if (hash && hash.exception instanceof Error) {\n        var ex2 = hash.exception;\n        this.message = ex2.message || msg;\n        stacktrace = ex2.stack;\n    }\n    if (!stacktrace) {\n        if (Error.hasOwnProperty('captureStackTrace')) {        // V8/Chrome engine\n            Error.captureStackTrace(this, this.constructor);\n        } else {\n            stacktrace = (new Error(msg)).stack;\n        }\n    }\n    if (stacktrace) {\n        Object.defineProperty(this, 'stack', {\n            enumerable: false,\n            writable: false,\n            value: stacktrace\n        });\n    }\n}\n\nif (typeof Object.setPrototypeOf === 'function') {\n    Object.setPrototypeOf(JisonParserError.prototype, Error.prototype);\n} else {\n    JisonParserError.prototype = Object.create(Error.prototype);\n}\nJisonParserError.prototype.constructor = JisonParserError;\nJisonParserError.prototype.name = 'JisonParserError';\n\n\n\n\n        // helper: reconstruct the productions[] table\n        function bp(s) {\n            var rv = [];\n            var p = s.pop;\n            var r = s.rule;\n            for (var i = 0, l = p.length; i < l; i++) {\n                rv.push([\n                    p[i],\n                    r[i]\n                ]);\n            }\n            return rv;\n        }\n    \n\n\n        // helper: reconstruct the defaultActions[] table\n        function bda(s) {\n            var rv = {};\n            var d = s.idx;\n            var g = s.goto;\n            for (var i = 0, l = d.length; i < l; i++) {\n                var j = d[i];\n                rv[j] = g[i];\n            }\n            return rv;\n        }\n    \n\n\n        // helper: reconstruct the 'goto' table\n        function bt(s) {\n            var rv = [];\n            var d = s.len;\n            var y = s.symbol;\n            var t = s.type;\n            var a = s.state;\n            var m = s.mode;\n            var g = s.goto;\n            for (var i = 0, l = d.length; i < l; i++) {\n                var n = d[i];\n                var q = {};\n                for (var j = 0; j < n; j++) {\n                    var z = y.shift();\n                    switch (t.shift()) {\n                    case 2:\n                        q[z] = [\n                            m.shift(),\n                            g.shift()\n                        ];\n                        break;\n\n                    case 0:\n                        q[z] = a.shift();\n                        break;\n\n                    default:\n                        // type === 1: accept\n                        q[z] = [\n                            3\n                        ];\n                    }\n                }\n                rv.push(q);\n            }\n            return rv;\n        }\n    \n\n\n        // helper: runlength encoding with increment step: code, length: step (default step = 0)\n        // `this` references an array\n        function s(c, l, a) {\n            a = a || 0;\n            for (var i = 0; i < l; i++) {\n                this.push(c);\n                c += a;\n            }\n        }\n\n        // helper: duplicate sequence from *relative* offset and length.\n        // `this` references an array\n        function c(i, l) {\n            i = this.length - i;\n            for (l += i; i < l; i++) {\n                this.push(this[i]);\n            }\n        }\n\n        // helper: unpack an array using helpers and data, all passed in an array argument 'a'.\n        function u(a) {\n            var rv = [];\n            for (var i = 0, l = a.length; i < l; i++) {\n                var e = a[i];\n                // Is this entry a helper function?\n                if (typeof e === 'function') {\n                    i++;\n                    e.apply(rv, a[i]);\n                } else {\n                    rv.push(e);\n                }\n            }\n            return rv;\n        }\n    \n\nvar parser = {\n    // Code Generator Information Report\n    // ---------------------------------\n    //\n    // Options:\n    //\n    //   default action mode: ............. [\"classic\",\"merge\"]\n    //   test-compile action mode: ........ \"parser:*,lexer:*\"\n    //   try..catch: ...................... true\n    //   default resolve on conflict: ..... true\n    //   on-demand look-ahead: ............ false\n    //   error recovery token skip maximum: 3\n    //   yyerror in parse actions is: ..... NOT recoverable,\n    //   yyerror in lexer actions and other non-fatal lexer are:\n    //   .................................. NOT recoverable,\n    //   debug grammar/output: ............ false\n    //   has partial LR conflict upgrade:   true\n    //   rudimentary token-stack support:   true\n    //   parser table compression mode: ... 2\n    //   export debug tables: ............. false\n    //   export *all* tables: ............. false\n    //   module type: ..................... es\n    //   parser engine type: .............. lalr\n    //   output main() in the module: ..... true\n    //   has user-specified main(): ....... false\n    //   has user-specified require()/import modules for main():\n    //   .................................. false\n    //   number of expected conflicts: .... 0\n    //\n    //\n    // Parser Analysis flags:\n    //\n    //   no significant actions (parser is a language matcher only):\n    //   .................................. false\n    //   uses yyleng: ..................... false\n    //   uses yylineno: ................... false\n    //   uses yytext: ..................... false\n    //   uses yylloc: ..................... false\n    //   uses ParseError API: ............. false\n    //   uses YYERROR: .................... false\n    //   uses YYRECOVERING: ............... false\n    //   uses YYERROK: .................... false\n    //   uses YYCLEARIN: .................. false\n    //   tracks rule values: .............. true\n    //   assigns rule values: ............. true\n    //   uses location tracking: .......... false\n    //   assigns location: ................ false\n    //   uses yystack: .................... false\n    //   uses yysstack: ................... false\n    //   uses yysp: ....................... true\n    //   uses yyrulelength: ............... false\n    //   uses yyMergeLocationInfo API: .... false\n    //   has error recovery: .............. false\n    //   has error reporting: ............. false\n    //\n    // --------- END OF REPORT -----------\n\ntrace: function no_op_trace() { },\nJisonParserError: JisonParserError,\nyy: {},\noptions: {\n  type: \"lalr\",\n  hasPartialLrUpgradeOnConflict: true,\n  errorRecoveryTokenDiscardCount: 3,\n  tokenStack: true,\n  ebnf: true\n},\nsymbols_: {\n  \"$accept\": 0,\n  \"$end\": 1,\n  \"ASSIGN_PART\": 13,\n  \"ATTR\": 12,\n  \"BODY\": 11,\n  \"CLASSNAME\": 14,\n  \"DOT\": 10,\n  \"EOF\": 1,\n  \"EQ\": 7,\n  \"FILTER_START\": 6,\n  \"INTERPOLATION\": 9,\n  \"TAG\": 3,\n  \"TAG_END\": 5,\n  \"TAG_START\": 4,\n  \"TEXT\": 8,\n  \"error\": 2,\n  \"line\": 16,\n  \"line_part\": 17,\n  \"line_part_repetition\": 41,\n  \"line_part_repetition2\": 42,\n  \"line_part_repetition3\": 43,\n  \"line_part_repetition4\": 44,\n  \"line_part_repetition5\": 45,\n  \"line_part_repetition_plus\": 18,\n  \"line_part_repetition_plus10\": 27,\n  \"line_part_repetition_plus11\": 28,\n  \"line_part_repetition_plus12\": 29,\n  \"line_part_repetition_plus13\": 30,\n  \"line_part_repetition_plus14\": 31,\n  \"line_part_repetition_plus15\": 32,\n  \"line_part_repetition_plus16\": 33,\n  \"line_part_repetition_plus17\": 34,\n  \"line_part_repetition_plus18\": 35,\n  \"line_part_repetition_plus19\": 36,\n  \"line_part_repetition_plus2\": 19,\n  \"line_part_repetition_plus20\": 37,\n  \"line_part_repetition_plus21\": 38,\n  \"line_part_repetition_plus22\": 39,\n  \"line_part_repetition_plus23\": 40,\n  \"line_part_repetition_plus3\": 20,\n  \"line_part_repetition_plus4\": 21,\n  \"line_part_repetition_plus5\": 22,\n  \"line_part_repetition_plus6\": 23,\n  \"line_part_repetition_plus7\": 24,\n  \"line_part_repetition_plus8\": 25,\n  \"line_part_repetition_plus9\": 26,\n  \"start\": 15\n},\nterminals_: {\n  1: \"EOF\",\n  2: \"error\",\n  3: \"TAG\",\n  4: \"TAG_START\",\n  5: \"TAG_END\",\n  6: \"FILTER_START\",\n  7: \"EQ\",\n  8: \"TEXT\",\n  9: \"INTERPOLATION\",\n  10: \"DOT\",\n  11: \"BODY\",\n  12: \"ATTR\",\n  13: \"ASSIGN_PART\",\n  14: \"CLASSNAME\"\n},\nTERROR: 2,\n    EOF: 1,\n\n    // internals: defined here so the object *structure* doesn't get modified by parse() et al,\n    // thus helping JIT compilers like Chrome V8.\n    originalQuoteName: null,\n    originalParseError: null,\n    cleanupAfterParse: null,\n    constructParseErrorInfo: null,\n    yyMergeLocationInfo: null,\n\n    __reentrant_call_depth: 0,      // INTERNAL USE ONLY\n    __error_infos: [],              // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup\n    __error_recovery_infos: [],     // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup\n\n    // APIs which will be set up depending on user action code analysis:\n    //yyRecovering: 0,\n    //yyErrOk: 0,\n    //yyClearIn: 0,\n\n    // Helper APIs\n    // -----------\n\n    // Helper function which can be overridden by user code later on: put suitable quotes around\n    // literal IDs in a description string.\n    quoteName: function parser_quoteName(id_str) {\n        return '\"' + id_str + '\"';\n    },\n\n    // Return the name of the given symbol (terminal or non-terminal) as a string, when available.\n    //\n    // Return NULL when the symbol is unknown to the parser.\n    getSymbolName: function parser_getSymbolName(symbol) {\n        if (this.terminals_[symbol]) {\n            return this.terminals_[symbol];\n        }\n\n        // Otherwise... this might refer to a RULE token i.e. a non-terminal: see if we can dig that one up.\n        //\n        // An example of this may be where a rule's action code contains a call like this:\n        //\n        //      parser.getSymbolName(#$)\n        //\n        // to obtain a human-readable name of the current grammar rule.\n        var s = this.symbols_;\n        for (var key in s) {\n            if (s[key] === symbol) {\n                return key;\n            }\n        }\n        return null;\n    },\n\n    // Return a more-or-less human-readable description of the given symbol, when available,\n    // or the symbol itself, serving as its own 'description' for lack of something better to serve up.\n    //\n    // Return NULL when the symbol is unknown to the parser.\n    describeSymbol: function parser_describeSymbol(symbol) {\n        if (symbol !== this.EOF && this.terminal_descriptions_ && this.terminal_descriptions_[symbol]) {\n            return this.terminal_descriptions_[symbol];\n        }\n        else if (symbol === this.EOF) {\n            return 'end of input';\n        }\n        var id = this.getSymbolName(symbol);\n        if (id) {\n            return this.quoteName(id);\n        }\n        return null;\n    },\n\n    // Produce a (more or less) human-readable list of expected tokens at the point of failure.\n    //\n    // The produced list may contain token or token set descriptions instead of the tokens\n    // themselves to help turning this output into something that easier to read by humans\n    // unless `do_not_describe` parameter is set, in which case a list of the raw, *numeric*,\n    // expected terminals and nonterminals is produced.\n    //\n    // The returned list (array) will not contain any duplicate entries.\n    collect_expected_token_set: function parser_collect_expected_token_set(state, do_not_describe) {\n        var TERROR = this.TERROR;\n        var tokenset = [];\n        var check = {};\n        // Has this (error?) state been outfitted with a custom expectations description text for human consumption?\n        // If so, use that one instead of the less palatable token set.\n        if (!do_not_describe && this.state_descriptions_ && this.state_descriptions_[state]) {\n            return [\n                this.state_descriptions_[state]\n            ];\n        }\n        for (var p in this.table[state]) {\n            p = +p;\n            if (p !== TERROR) {\n                var d = do_not_describe ? p : this.describeSymbol(p);\n                if (d && !check[d]) {\n                    tokenset.push(d);\n                    check[d] = true;        // Mark this token description as already mentioned to prevent outputting duplicate entries.\n                }\n            }\n        }\n        return tokenset;\n    },\nproductions_: bp({\n  pop: u([\n  15,\n  16,\n  16,\n  s,\n  [17, 22],\n  18,\n  18,\n  19,\n  19,\n  20,\n  20,\n  21,\n  21,\n  22,\n  22,\n  23,\n  23,\n  24,\n  24,\n  25,\n  25,\n  26,\n  26,\n  27,\n  27,\n  28,\n  28,\n  29,\n  29,\n  30,\n  30,\n  31,\n  31,\n  32,\n  32,\n  33,\n  33,\n  34,\n  34,\n  35,\n  35,\n  36,\n  36,\n  37,\n  37,\n  38,\n  38,\n  39,\n  39,\n  40,\n  40,\n  41,\n  41,\n  42,\n  42,\n  43,\n  43,\n  44,\n  44,\n  45,\n  45\n]),\n  rule: u([\n  2,\n  2,\n  1,\n  0,\n  1,\n  1,\n  2,\n  s,\n  [3, 3],\n  4,\n  4,\n  c,\n  [6, 6],\n  4,\n  5,\n  5,\n  6,\n  2,\n  6,\n  4,\n  1,\n  2,\n  1,\n  2,\n  c,\n  [4, 42],\n  0,\n  2,\n  0,\n  c,\n  [4, 7]\n])\n}),\nperformAction: function parser__PerformAction(yystate /* action[1] */, yysp, yyvstack) {\n\n          /* this == yyval */\n\n          // the JS engine itself can go and remove these statements when `yy` turns out to be unused in any action code!\n          var yy = this.yy;\n          var yyparser = yy.parser;\n          var yylexer = yy.lexer;\n\n          \n\n          switch (yystate) {\ncase 0:\n    /*! Production::    $accept : start $end */\n\n    // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-):\n    this.$ = yyvstack[yysp - 1];\n    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-)\n    break;\n\ncase 1:\n    /*! Production::    start : line EOF */\n\n    // default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-):\n    this.$ = yyvstack[yysp - 1];\n    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-)\n    break;\n\ncase 2:\n    /*! Production::    line : line line_part */\n\n    debug('line: line line_part: $line=', yyvstack[yysp - 1], ', $line_part=', yyvstack[yysp])\n    if (Array.isArray(yyvstack[yysp - 1])) {\n      this.$ = yyvstack[yysp - 1]\n    }\n    else {\n      this.$ = [ yyvstack[yysp - 1] ]\n    }\n    this.$.push(yyvstack[yysp])\n    break;\n\ncase 3:\n    /*! Production::    line : line_part */\n\n    debug('line: line_part: $line_part=', yyvstack[yysp])\n    if (Array.isArray(yyvstack[yysp])) {\n      this.$ = yyvstack[yysp]\n    }\n    else {\n      this.$ = [ yyvstack[yysp] ]\n    }\n    break;\n\ncase 4:\n    /*! Production::    line_part : %epsilon */\n\n    // default action (generated by JISON mode classic/merge :: 0,VT,VA,-,-,-,-,-,-):\n    this.$ = undefined;\n    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,-,-,-,-,-,-)\n    break;\n\ncase 5:\n    /*! Production::    line_part : TAG */\n\n    let [tag_name, attrs, body] = yyvstack[yysp]\n    debug('$TAG=', yyvstack[yysp])\n    debug('tag_name=', tag_name)\n    debug('attrs=', attrs)\n    debug('body=', body)\n    const obj1 = { type: 'tag', name: tag_name, attrs: attrs }\n    if (attrs == undefined) delete obj1.attrs\n    if (body == '') {\n      delete obj1.val\n    }\n    else if (body.includes('<') && body.includes('>')) {\n      debug('parsing ', body)\n      recursive++\n      let parsedBody = yy.parser.parse(body)\n      recursive--\n      debug('parsedBody=', parsedBody)\n      if (parsedBody.length == 1 && parsedBody[0].type == 'text' && !parsedBody[0].hasOwnProperty('children')) {\n        obj1.val = parsedBody[0].val\n      }\n      else {\n        obj1.children = obj1.hasOwnProperty('children') ? obj1.children.push(...parsedBody) : parsedBody\n      }\n    }\n    else {\n      obj1.val = body\n    }\n    this.$ = obj1\n    break;\n\ncase 6:\n    /*! Production::    line_part : line_part_repetition_plus */\n\n    this.$ = { type: 'text', val: yyvstack[yysp].join('') }\n    break;\n\ncase 7:\n    /*! Production::    line_part : TAG_START TAG_END */\n\n    this.$ = { type: 'tag', name: yyvstack[yysp - 1] }\n    break;\n\ncase 8:\n    /*! Production::    line_part : TAG_START line_part_repetition_plus2 TAG_END */\ncase 9:\n    /*! Production::    line_part : TAG_START line_part_repetition_plus3 TAG_END */\n\n    this.$ = { type: 'tag', name: yyvstack[yysp - 2], val: yyvstack[yysp - 1].join('') }\n    break;\n\ncase 10:\n    /*! Production::    line_part : TAG_START line_part_repetition_plus4 TAG_END */\n\n    this.$ = { type: 'tag', name: yyvstack[yysp - 2], attrs: parseAttrs.parse(yyvstack[yysp - 1].join('')) }\n    break;\n\ncase 11:\n    /*! Production::    line_part : TAG_START line_part_repetition_plus5 line_part_repetition_plus6 TAG_END */\ncase 12:\n    /*! Production::    line_part : TAG_START line_part_repetition_plus7 line_part_repetition_plus8 TAG_END */\n\n    this.$ = { type: 'tag', name: yyvstack[yysp - 3], val: yyvstack[yysp - 1].join(''), attrs: parseAttrs.parse(yyvstack[yysp - 2].join('')) }\n    break;\n\ncase 13:\n    /*! Production::    line_part : FILTER_START TAG_END */\n\n    this.$ = { type: 'filter', name: yyvstack[yysp - 1] }\n    break;\n\ncase 14:\n    /*! Production::    line_part : FILTER_START line_part_repetition_plus9 TAG_END */\ncase 15:\n    /*! Production::    line_part : FILTER_START line_part_repetition_plus10 TAG_END */\n\n    this.$ = { type: 'filter', name: yyvstack[yysp - 2], val: yyvstack[yysp - 1].join('') }\n    break;\n\ncase 16:\n    /*! Production::    line_part : FILTER_START line_part_repetition_plus11 TAG_END */\n\n    this.$ = { type: 'filter', name: yyvstack[yysp - 2], attrs: parseAttrs.parse(yyvstack[yysp - 1].join('')) }\n    break;\n\ncase 17:\n    /*! Production::    line_part : FILTER_START line_part_repetition_plus12 line_part_repetition_plus13 TAG_END */\ncase 18:\n    /*! Production::    line_part : FILTER_START line_part_repetition_plus14 line_part_repetition_plus15 TAG_END */\n\n    this.$ = { type: 'filter', name: yyvstack[yysp - 3], val: yyvstack[yysp - 1].join(''), attrs: parseAttrs.parse(yyvstack[yysp - 2].join('')) }\n    break;\n\ncase 19:\n    /*! Production::    line_part : TAG_START EQ line_part_repetition_plus16 TAG_END */\n\n    this.$ = { type: 'tag', name: yyvstack[yysp - 3], assignment: yyvstack[yysp - 1].join('') }\n    break;\n\ncase 20:\n    /*! Production::    line_part : TAG_START EQ line_part_repetition_plus17 line_part_repetition_plus18 TAG_END */\n\n    this.$ = { type: 'tag', name: yyvstack[yysp - 4], assignment: yyvstack[yysp - 2].join(''), attrs: parseAttrs.parse(yyvstack[yysp].join('')) }\n    break;\n\ncase 21:\n    /*! Production::    line_part : TAG_START EQ line_part_repetition_plus19 line_part_repetition_plus20 TAG_END */\n\n    this.$ = { type: 'tag', name: yyvstack[yysp - 4], assignment: yyvstack[yysp - 2].join(''), val: yyvstack[yysp].join('') }\n    break;\n\ncase 22:\n    /*! Production::    line_part : TAG_START EQ line_part_repetition_plus21 line_part_repetition_plus22 line_part_repetition_plus23 TAG_END */\n\n    this.$ = { type: 'tag', name: yyvstack[yysp - 5], assignment: yyvstack[yysp - 3].join(''), val: yyvstack[yysp].join(''), attrs: parseAttrs.parse(yyvstack[yysp - 1].join('')) }\n    break;\n\ncase 23:\n    /*! Production::    line_part : TEXT INTERPOLATION */\n\n    this.$ = [\n      { type: 'text', val: yyvstack[yysp - 1] },\n      // { type: 'interp', val: $INTERPOLATION.slice(2, -1) }\n      { type: 'interp', val: yyvstack[yysp] }\n    ]\n    break;\n\ncase 24:\n    /*! Production::    line_part : TAG_START DOT line_part_repetition line_part_repetition2 line_part_repetition3 TAG_END */\n\n    this.$ = { type: 'tag', name: yyvstack[yysp - 5] }\n    if (yyvstack[yysp - 3]) {\n      this.$.classes = yyvstack[yysp - 3]\n    }\n    if (yyvstack[yysp - 2]) {\n      this.$.attrs = parseAttrs.parse(yyvstack[yysp - 2].join(''))\n    }\n    if (yyvstack[yysp - 1]) {\n      this.$.val = yyvstack[yysp - 1].join('')\n    }\n    break;\n\ncase 25:\n    /*! Production::    line_part : TAG_START line_part_repetition4 line_part_repetition5 TAG_END */\n\n    debug('TAG_START ATTR* BODY* TAG_END')\n    this.$ = { type: 'tag', name: yyvstack[yysp - 3] }\n    if (yyvstack[yysp - 2]) {\n      this.$.attrs = parseAttrs.parse(yyvstack[yysp - 2].join(''))\n    }\n    if (yyvstack[yysp - 1]) {\n      this.$.val = yyvstack[yysp - 1].join('')\n    }\n    break;\n\ncase 26:\n    /*! Production::    line_part_repetition_plus : TEXT */\ncase 28:\n    /*! Production::    line_part_repetition_plus2 : BODY */\ncase 30:\n    /*! Production::    line_part_repetition_plus3 : BODY */\ncase 32:\n    /*! Production::    line_part_repetition_plus4 : ATTR */\ncase 34:\n    /*! Production::    line_part_repetition_plus5 : ATTR */\ncase 36:\n    /*! Production::    line_part_repetition_plus6 : BODY */\ncase 38:\n    /*! Production::    line_part_repetition_plus7 : ATTR */\ncase 40:\n    /*! Production::    line_part_repetition_plus8 : BODY */\ncase 42:\n    /*! Production::    line_part_repetition_plus9 : BODY */\ncase 44:\n    /*! Production::    line_part_repetition_plus10 : BODY */\ncase 46:\n    /*! Production::    line_part_repetition_plus11 : ATTR */\ncase 48:\n    /*! Production::    line_part_repetition_plus12 : ATTR */\ncase 50:\n    /*! Production::    line_part_repetition_plus13 : BODY */\ncase 52:\n    /*! Production::    line_part_repetition_plus14 : ATTR */\ncase 54:\n    /*! Production::    line_part_repetition_plus15 : BODY */\ncase 56:\n    /*! Production::    line_part_repetition_plus16 : ASSIGN_PART */\ncase 58:\n    /*! Production::    line_part_repetition_plus17 : ASSIGN_PART */\ncase 60:\n    /*! Production::    line_part_repetition_plus18 : ATTR */\ncase 62:\n    /*! Production::    line_part_repetition_plus19 : ASSIGN_PART */\ncase 64:\n    /*! Production::    line_part_repetition_plus20 : BODY */\ncase 66:\n    /*! Production::    line_part_repetition_plus21 : ASSIGN_PART */\ncase 68:\n    /*! Production::    line_part_repetition_plus22 : ATTR */\ncase 70:\n    /*! Production::    line_part_repetition_plus23 : BODY */\n\n    this.$ = [yyvstack[yysp]];\n    break;\n\ncase 27:\n    /*! Production::    line_part_repetition_plus : line_part_repetition_plus TEXT */\ncase 29:\n    /*! Production::    line_part_repetition_plus2 : line_part_repetition_plus2 BODY */\ncase 31:\n    /*! Production::    line_part_repetition_plus3 : line_part_repetition_plus3 BODY */\ncase 33:\n    /*! Production::    line_part_repetition_plus4 : line_part_repetition_plus4 ATTR */\ncase 35:\n    /*! Production::    line_part_repetition_plus5 : line_part_repetition_plus5 ATTR */\ncase 37:\n    /*! Production::    line_part_repetition_plus6 : line_part_repetition_plus6 BODY */\ncase 39:\n    /*! Production::    line_part_repetition_plus7 : line_part_repetition_plus7 ATTR */\ncase 41:\n    /*! Production::    line_part_repetition_plus8 : line_part_repetition_plus8 BODY */\ncase 43:\n    /*! Production::    line_part_repetition_plus9 : line_part_repetition_plus9 BODY */\ncase 45:\n    /*! Production::    line_part_repetition_plus10 : line_part_repetition_plus10 BODY */\ncase 47:\n    /*! Production::    line_part_repetition_plus11 : line_part_repetition_plus11 ATTR */\ncase 49:\n    /*! Production::    line_part_repetition_plus12 : line_part_repetition_plus12 ATTR */\ncase 51:\n    /*! Production::    line_part_repetition_plus13 : line_part_repetition_plus13 BODY */\ncase 53:\n    /*! Production::    line_part_repetition_plus14 : line_part_repetition_plus14 ATTR */\ncase 55:\n    /*! Production::    line_part_repetition_plus15 : line_part_repetition_plus15 BODY */\ncase 57:\n    /*! Production::    line_part_repetition_plus16 : line_part_repetition_plus16 ASSIGN_PART */\ncase 59:\n    /*! Production::    line_part_repetition_plus17 : line_part_repetition_plus17 ASSIGN_PART */\ncase 61:\n    /*! Production::    line_part_repetition_plus18 : line_part_repetition_plus18 ATTR */\ncase 63:\n    /*! Production::    line_part_repetition_plus19 : line_part_repetition_plus19 ASSIGN_PART */\ncase 65:\n    /*! Production::    line_part_repetition_plus20 : line_part_repetition_plus20 BODY */\ncase 67:\n    /*! Production::    line_part_repetition_plus21 : line_part_repetition_plus21 ASSIGN_PART */\ncase 69:\n    /*! Production::    line_part_repetition_plus22 : line_part_repetition_plus22 ATTR */\ncase 71:\n    /*! Production::    line_part_repetition_plus23 : line_part_repetition_plus23 BODY */\ncase 73:\n    /*! Production::    line_part_repetition : line_part_repetition CLASSNAME */\ncase 75:\n    /*! Production::    line_part_repetition2 : line_part_repetition2 ATTR */\ncase 77:\n    /*! Production::    line_part_repetition3 : line_part_repetition3 BODY */\ncase 79:\n    /*! Production::    line_part_repetition4 : line_part_repetition4 ATTR */\ncase 81:\n    /*! Production::    line_part_repetition5 : line_part_repetition5 BODY */\n\n    yyvstack[yysp - 1].push(yyvstack[yysp]);\n    this.$ = yyvstack[yysp - 1];\n    break;\n\ncase 72:\n    /*! Production::    line_part_repetition : %epsilon */\ncase 74:\n    /*! Production::    line_part_repetition2 : %epsilon */\ncase 76:\n    /*! Production::    line_part_repetition3 : %epsilon */\ncase 78:\n    /*! Production::    line_part_repetition4 : %epsilon */\ncase 80:\n    /*! Production::    line_part_repetition5 : %epsilon */\n\n    this.$ = [];\n    break;\n\n}\n},\ntable: bt({\n  len: u([\n  9,\n  1,\n  7,\n  0,\n  0,\n  5,\n  11,\n  8,\n  6,\n  s,\n  [0, 4],\n  s,\n  [2, 3],\n  3,\n  3,\n  5,\n  1,\n  4,\n  0,\n  3,\n  c,\n  [11, 6],\n  c,\n  [8, 3],\n  s,\n  [0, 6],\n  2,\n  c,\n  [3, 6],\n  s,\n  [3, 3],\n  4,\n  5,\n  c,\n  [9, 3],\n  c,\n  [20, 11],\n  c,\n  [12, 12],\n  c,\n  [46, 3],\n  4,\n  s,\n  [0, 11],\n  c,\n  [33, 9]\n]),\n  symbol: u([\n  1,\n  3,\n  4,\n  6,\n  8,\n  s,\n  [15, 4, 1],\n  1,\n  c,\n  [10, 5],\n  c,\n  [8, 3],\n  c,\n  [7, 4],\n  5,\n  7,\n  10,\n  11,\n  12,\n  s,\n  [19, 4, 1],\n  24,\n  44,\n  5,\n  11,\n  12,\n  s,\n  [26, 4, 1],\n  31,\n  c,\n  [24, 5],\n  9,\n  5,\n  11,\n  5,\n  11,\n  5,\n  12,\n  11,\n  12,\n  23,\n  11,\n  12,\n  25,\n  13,\n  33,\n  34,\n  36,\n  38,\n  41,\n  c,\n  [32, 3],\n  45,\n  c,\n  [4, 3],\n  c,\n  [25, 8],\n  30,\n  11,\n  12,\n  32,\n  c,\n  [15, 8],\n  13,\n  12,\n  13,\n  35,\n  11,\n  13,\n  37,\n  12,\n  13,\n  39,\n  c,\n  [18, 3],\n  13,\n  c,\n  [4, 3],\n  14,\n  42,\n  c,\n  [24, 5],\n  c,\n  [41, 3],\n  5,\n  11,\n  11,\n  12,\n  40,\n  c,\n  [18, 3],\n  43,\n  c,\n  [15, 4]\n]),\n  type: u([\n  s,\n  [2, 5],\n  s,\n  [0, 4],\n  1,\n  c,\n  [10, 7],\n  s,\n  [2, 10],\n  s,\n  [0, 6],\n  c,\n  [9, 8],\n  s,\n  [2, 14],\n  c,\n  [15, 3],\n  0,\n  c,\n  [24, 9],\n  c,\n  [28, 12],\n  c,\n  [25, 5],\n  c,\n  [15, 16],\n  c,\n  [18, 9],\n  c,\n  [70, 13],\n  c,\n  [59, 9]\n]),\n  state: u([\n  1,\n  2,\n  3,\n  5,\n  10,\n  5,\n  s,\n  [13, 5, 1],\n  20,\n  s,\n  [24, 5, 1],\n  38,\n  41,\n  s,\n  [44, 4, 1],\n  49,\n  50,\n  58,\n  61,\n  s,\n  [70, 4, 3],\n  91,\n  94\n]),\n  mode: u([\n  2,\n  s,\n  [1, 9],\n  s,\n  [2, 4],\n  c,\n  [13, 13],\n  c,\n  [14, 10],\n  c,\n  [17, 5],\n  c,\n  [20, 4],\n  c,\n  [16, 12],\n  c,\n  [31, 15],\n  c,\n  [50, 17],\n  c,\n  [51, 4],\n  s,\n  [1, 4]\n]),\n  goto: u([\n  4,\n  4,\n  s,\n  [6, 4, 1],\n  c,\n  [5, 4],\n  s,\n  [6, 4],\n  11,\n  12,\n  18,\n  19,\n  21,\n  22,\n  23,\n  29,\n  30,\n  s,\n  [26, 5],\n  s,\n  [31, 7, 1],\n  40,\n  39,\n  43,\n  42,\n  48,\n  80,\n  80,\n  51,\n  32,\n  34,\n  32,\n  s,\n  [52, 6, 1],\n  60,\n  59,\n  63,\n  62,\n  46,\n  48,\n  46,\n  s,\n  [64, 6, 1],\n  72,\n  71,\n  75,\n  74,\n  78,\n  77,\n  56,\n  62,\n  58,\n  56,\n  s,\n  [74, 3],\n  s,\n  [80, 11, 1],\n  93,\n  92,\n  76,\n  76,\n  s,\n  [95, 5, 1]\n])\n}),\ndefaultActions: bda({\n  idx: u([\n  3,\n  4,\n  s,\n  [9, 4, 1],\n  19,\n  21,\n  23,\n  29,\n  s,\n  [31, 7, 1],\n  39,\n  40,\n  42,\n  43,\n  s,\n  [51, 7, 1],\n  59,\n  60,\n  s,\n  [62, 8, 1],\n  71,\n  72,\n  74,\n  75,\n  77,\n  78,\n  s,\n  [80, 11, 1],\n  92,\n  93,\n  s,\n  [95, 5, 1]\n]),\n  goto: u([\n  3,\n  5,\n  1,\n  2,\n  27,\n  7,\n  72,\n  28,\n  13,\n  42,\n  23,\n  8,\n  29,\n  9,\n  31,\n  10,\n  33,\n  35,\n  36,\n  39,\n  40,\n  79,\n  14,\n  43,\n  15,\n  45,\n  16,\n  47,\n  49,\n  50,\n  53,\n  54,\n  11,\n  37,\n  12,\n  41,\n  19,\n  57,\n  59,\n  60,\n  63,\n  64,\n  67,\n  68,\n  73,\n  25,\n  81,\n  17,\n  51,\n  18,\n  55,\n  20,\n  61,\n  21,\n  65,\n  69,\n  70,\n  75,\n  22,\n  71,\n  24,\n  77\n])\n}),\nparseError: function parseError(str, hash, ExceptionClass) {\n    if (hash.recoverable) {\n        if (typeof this.trace === 'function') {\n            this.trace(str);\n        }\n        hash.destroy();             // destroy... well, *almost*!\n    } else {\n        if (typeof this.trace === 'function') {\n            this.trace(str);\n        }\n        if (!ExceptionClass) {\n            ExceptionClass = this.JisonParserError;\n        }\n        throw new ExceptionClass(str, hash);\n    }\n},\nparse: function parse(input) {\n    var self = this;\n    var stack = new Array(128);         // token stack: stores token which leads to state at the same index (column storage)\n    var sstack = new Array(128);        // state stack: stores states (column storage)\n    var tstack = [];                    // token stack (only used when `%options token_stack` support has been enabled)\n    var vstack = new Array(128);        // semantic value stack\n\n    var table = this.table;\n    var sp = 0;                         // 'stack pointer': index into the stacks\n\n\n    \n\n\n    var symbol = 0;\n\n\n\n    var TERROR = this.TERROR;\n    var EOF = this.EOF;\n    var ERROR_RECOVERY_TOKEN_DISCARD_COUNT = (this.options.errorRecoveryTokenDiscardCount | 0) || 3;\n    var NO_ACTION = [0, 100 /* === table.length :: ensures that anyone using this new state will fail dramatically! */];\n\n    var lexer;\n    if (this.__lexer__) {\n        lexer = this.__lexer__;\n    } else {\n        lexer = this.__lexer__ = Object.create(this.lexer);\n    }\n\n    var sharedState_yy = {\n        parseError: undefined,\n        quoteName: undefined,\n        lexer: undefined,\n        parser: undefined,\n        pre_parse: undefined,\n        post_parse: undefined,\n        pre_lex: undefined,\n        post_lex: undefined      // WARNING: must be written this way for the code expanders to work correctly in both ES5 and ES6 modes!\n    };\n\n    var ASSERT;\n    if (typeof assert !== 'function') {\n        ASSERT = function JisonAssert(cond, msg) {\n            if (!cond) {\n                throw new Error('assertion failed: ' + (msg || '***'));\n            }\n        };\n    } else {\n        ASSERT = assert;\n    }\n\n    this.yyGetSharedState = function yyGetSharedState() {\n        return sharedState_yy;\n    };\n\n\n\n\n\n\n\n\n    function shallow_copy_noclobber(dst, src) {\n        for (var k in src) {\n            if (typeof dst[k] === 'undefined' && Object.prototype.hasOwnProperty.call(src, k)) {\n                dst[k] = src[k];\n            }\n        }\n    }\n\n    // copy state\n    shallow_copy_noclobber(sharedState_yy, this.yy);\n\n    sharedState_yy.lexer = lexer;\n    sharedState_yy.parser = this;\n\n\n\n\n\n\n    // Does the shared state override the default `parseError` that already comes with this instance?\n    if (typeof sharedState_yy.parseError === 'function') {\n        this.parseError = function parseErrorAlt(str, hash, ExceptionClass) {\n            if (!ExceptionClass) {\n                ExceptionClass = this.JisonParserError;\n            }\n            return sharedState_yy.parseError.call(this, str, hash, ExceptionClass);\n        };\n    } else {\n        this.parseError = this.originalParseError;\n    }\n\n    // Does the shared state override the default `quoteName` that already comes with this instance?\n    if (typeof sharedState_yy.quoteName === 'function') {\n        this.quoteName = function quoteNameAlt(id_str) {\n            return sharedState_yy.quoteName.call(this, id_str);\n        };\n    } else {\n        this.quoteName = this.originalQuoteName;\n    }\n\n    // set up the cleanup function; make it an API so that external code can re-use this one in case of\n    // calamities or when the `%options no-try-catch` option has been specified for the grammar, in which\n    // case this parse() API method doesn't come with a `finally { ... }` block any more!\n    //\n    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,\n    //       or else your `sharedState`, etc. references will be *wrong*!\n    this.cleanupAfterParse = function parser_cleanupAfterParse(resultValue, invoke_post_methods, do_not_nuke_errorinfos) {\n        var rv;\n\n        if (invoke_post_methods) {\n            var hash;\n\n            if (sharedState_yy.post_parse || this.post_parse) {\n                // create an error hash info instance: we re-use this API in a **non-error situation**\n                // as this one delivers all parser internals ready for access by userland code.\n                hash = this.constructParseErrorInfo(null /* no error! */, null /* no exception! */, null, false);\n            }\n\n            if (sharedState_yy.post_parse) {\n                rv = sharedState_yy.post_parse.call(this, sharedState_yy, resultValue, hash);\n                if (typeof rv !== 'undefined') resultValue = rv;\n            }\n            if (this.post_parse) {\n                rv = this.post_parse.call(this, sharedState_yy, resultValue, hash);\n                if (typeof rv !== 'undefined') resultValue = rv;\n            }\n\n            // cleanup:\n            if (hash && hash.destroy) {\n                hash.destroy();\n            }\n        }\n\n        if (this.__reentrant_call_depth > 1) return resultValue;        // do not (yet) kill the sharedState when this is a reentrant run.\n\n        // clean up the lingering lexer structures as well:\n        if (lexer.cleanupAfterLex) {\n            lexer.cleanupAfterLex(do_not_nuke_errorinfos);\n        }\n\n        // prevent lingering circular references from causing memory leaks:\n        if (sharedState_yy) {\n            sharedState_yy.lexer = undefined;\n            sharedState_yy.parser = undefined;\n            if (lexer.yy === sharedState_yy) {\n                lexer.yy = undefined;\n            }\n        }\n        sharedState_yy = undefined;\n        this.parseError = this.originalParseError;\n        this.quoteName = this.originalQuoteName;\n\n        // nuke the vstack[] array at least as that one will still reference obsoleted user values.\n        // To be safe, we nuke the other internal stack columns as well...\n        stack.length = 0;               // fastest way to nuke an array without overly bothering the GC\n        sstack.length = 0;\n\n        vstack.length = 0;\n        sp = 0;\n\n        // nuke the error hash info instances created during this run.\n        // Userland code must COPY any data/references\n        // in the error hash instance(s) it is more permanently interested in.\n        if (!do_not_nuke_errorinfos) {\n            for (var i = this.__error_infos.length - 1; i >= 0; i--) {\n                var el = this.__error_infos[i];\n                if (el && typeof el.destroy === 'function') {\n                    el.destroy();\n                }\n            }\n            this.__error_infos.length = 0;\n\n\n        }\n\n        return resultValue;\n    };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,\n    //       or else your `lexer`, `sharedState`, etc. references will be *wrong*!\n    this.constructParseErrorInfo = function parser_constructParseErrorInfo(msg, ex, expected, recoverable) {\n        var pei = {\n            errStr: msg,\n            exception: ex,\n            text: lexer.match,\n            value: lexer.yytext,\n            token: this.describeSymbol(symbol) || symbol,\n            token_id: symbol,\n            line: lexer.yylineno,\n\n            expected: expected,\n            recoverable: recoverable,\n            state: state,\n            action: action,\n            new_state: newState,\n            symbol_stack: stack,\n            state_stack: sstack,\n            value_stack: vstack,\n\n            stack_pointer: sp,\n            yy: sharedState_yy,\n            lexer: lexer,\n            parser: this,\n\n            // and make sure the error info doesn't stay due to potential\n            // ref cycle via userland code manipulations.\n            // These would otherwise all be memory leak opportunities!\n            //\n            // Note that only array and object references are nuked as those\n            // constitute the set of elements which can produce a cyclic ref.\n            // The rest of the members is kept intact as they are harmless.\n            destroy: function destructParseErrorInfo() {\n                // remove cyclic references added to error info:\n                // info.yy = null;\n                // info.lexer = null;\n                // info.value = null;\n                // info.value_stack = null;\n                // ...\n                var rec = !!this.recoverable;\n                for (var key in this) {\n                    if (this.hasOwnProperty(key) && typeof key === 'object') {\n                        this[key] = undefined;\n                    }\n                }\n                this.recoverable = rec;\n            }\n        };\n        // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!\n        this.__error_infos.push(pei);\n        return pei;\n    };\n\n\n\n\n\n\n\n\n\n\n\n\n\n    function getNonTerminalFromCode(symbol) {\n        var tokenName = self.getSymbolName(symbol);\n        if (!tokenName) {\n            tokenName = symbol;\n        }\n        return tokenName;\n    }\n\n\n    // lex function that supports token stacks\n    function lex() {\n        var token;\n        token = tstack.pop() || lexer.lex() || EOF;\n        // if token isn't its numeric value, convert\n        if (typeof token !== 'number') {\n            if (token instanceof Array) {\n                tstack = token;\n                token = tstack.pop();\n            }\n            // if token isn't its numeric value, convert\n            if (typeof token !== 'number') {\n                token = self.symbols_[token] || token;\n            }\n        }\n\n        return token || EOF;\n    }\n\n\n    var state, action, r, t;\n    var yyval = {\n        $: true,\n        _$: undefined,\n        yy: sharedState_yy\n    };\n    var p;\n    var yyrulelen;\n    var this_production;\n    var newState;\n    var retval = false;\n\n\n    try {\n        this.__reentrant_call_depth++;\n\n        lexer.setInput(input, sharedState_yy);\n\n        // NOTE: we *assume* no lexer pre/post handlers are set up *after* \n        // this initial `setInput()` call: hence we can now check and decide\n        // whether we'll go with the standard, slower, lex() API or the\n        // `fast_lex()` one:\n        if (typeof lexer.canIUse === 'function') {\n            var lexerInfo = lexer.canIUse();\n            if (lexerInfo.fastLex && typeof fastLex === 'function') {\n                lex = fastLex;\n            }\n        } \n\n\n\n        vstack[sp] = null;\n        sstack[sp] = 0;\n        stack[sp] = 0;\n        ++sp;\n\n\n\n\n\n        if (this.pre_parse) {\n            this.pre_parse.call(this, sharedState_yy);\n        }\n        if (sharedState_yy.pre_parse) {\n            sharedState_yy.pre_parse.call(this, sharedState_yy);\n        }\n\n        newState = sstack[sp - 1];\n        for (;;) {\n            // retrieve state number from top of stack\n            state = newState;               // sstack[sp - 1];\n\n            // use default actions if available\n            if (this.defaultActions[state]) {\n                action = 2;\n                newState = this.defaultActions[state];\n            } else {\n                // The single `==` condition below covers both these `===` comparisons in a single\n                // operation:\n                //\n                //     if (symbol === null || typeof symbol === 'undefined') ...\n                if (!symbol) {\n                    symbol = lex();\n                }\n                // read action for current state and first input\n                t = (table[state] && table[state][symbol]) || NO_ACTION;\n                newState = t[1];\n                action = t[0];\n\n\n\n\n\n\n\n\n\n\n\n                // handle parse error\n                if (!action) {\n                    var errStr;\n                    var errSymbolDescr = (this.describeSymbol(symbol) || symbol);\n                    var expected = this.collect_expected_token_set(state);\n\n                    // Report error\n                    if (typeof lexer.yylineno === 'number') {\n                        errStr = 'Parse error on line ' + (lexer.yylineno + 1) + ': ';\n                    } else {\n                        errStr = 'Parse error: ';\n                    }\n                    if (typeof lexer.showPosition === 'function') {\n                        errStr += '\\n' + lexer.showPosition(79 - 10, 10) + '\\n';\n                    }\n                    if (expected.length) {\n                        errStr += 'Expecting ' + expected.join(', ') + ', got unexpected ' + errSymbolDescr;\n                    } else {\n                        errStr += 'Unexpected ' + errSymbolDescr;\n                    }\n                    // we cannot recover from the error!\n                    p = this.constructParseErrorInfo(errStr, null, expected, false);\n                    r = this.parseError(p.errStr, p, this.JisonParserError);\n                    if (typeof r !== 'undefined') {\n                        retval = r;\n                    }\n                    break;\n                }\n\n\n            }\n\n\n\n\n\n\n\n\n\n\n            switch (action) {\n            // catch misc. parse failures:\n            default:\n                // this shouldn't happen, unless resolve defaults are off\n                if (action instanceof Array) {\n                    p = this.constructParseErrorInfo('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol, null, null, false);\n                    r = this.parseError(p.errStr, p, this.JisonParserError);\n                    if (typeof r !== 'undefined') {\n                        retval = r;\n                    }\n                    break;\n                }\n                // Another case of better safe than sorry: in case state transitions come out of another error recovery process\n                // or a buggy LUT (LookUp Table):\n                p = this.constructParseErrorInfo('Parsing halted. No viable error recovery approach available due to internal system failure.', null, null, false);\n                r = this.parseError(p.errStr, p, this.JisonParserError);\n                if (typeof r !== 'undefined') {\n                    retval = r;\n                }\n                break;\n\n            // shift:\n            case 1:\n                stack[sp] = symbol;\n                vstack[sp] = lexer.yytext;\n\n                sstack[sp] = newState; // push state\n\n                ++sp;\n                symbol = 0;\n\n\n\n\n                // Pick up the lexer details for the current symbol as that one is not 'look-ahead' any more:\n\n\n\n\n                continue;\n\n            // reduce:\n            case 2:\n\n\n\n                this_production = this.productions_[newState - 1];  // `this.productions_[]` is zero-based indexed while states start from 1 upwards...\n                yyrulelen = this_production[1];\n\n\n\n\n\n\n\n\n\n\n                r = this.performAction.call(yyval, newState, sp - 1, vstack);\n\n                if (typeof r !== 'undefined') {\n                    retval = r;\n                    break;\n                }\n\n                // pop off stack\n                sp -= yyrulelen;\n\n                // don't overwrite the `symbol` variable: use a local var to speed things up:\n                var ntsymbol = this_production[0];    // push nonterminal (reduce)\n                stack[sp] = ntsymbol;\n                vstack[sp] = yyval.$;\n\n                // goto new state = table[STATE][NONTERMINAL]\n                newState = table[sstack[sp - 1]][ntsymbol];\n                sstack[sp] = newState;\n                ++sp;\n\n\n\n\n\n\n\n\n\n                continue;\n\n            // accept:\n            case 3:\n                if (sp !== -2) {\n                    retval = true;\n                    // Return the `$accept` rule's `$$` result, if available.\n                    //\n                    // Also note that JISON always adds this top-most `$accept` rule (with implicit,\n                    // default, action):\n                    //\n                    //     $accept: <startSymbol> $end\n                    //                  %{ $$ = $1; @$ = @1; %}\n                    //\n                    // which, combined with the parse kernel's `$accept` state behaviour coded below,\n                    // will produce the `$$` value output of the <startSymbol> rule as the parse result,\n                    // IFF that result is *not* `undefined`. (See also the parser kernel code.)\n                    //\n                    // In code:\n                    //\n                    //                  %{\n                    //                      @$ = @1;            // if location tracking support is included\n                    //                      if (typeof $1 !== 'undefined')\n                    //                          return $1;\n                    //                      else\n                    //                          return true;           // the default parse result if the rule actions don't produce anything\n                    //                  %}\n                    sp--;\n                    if (typeof vstack[sp] !== 'undefined') {\n                        retval = vstack[sp];\n                    }\n                }\n                break;\n            }\n\n            // break out of loop: we accept or fail with error\n            break;\n        }\n    } catch (ex) {\n        // report exceptions through the parseError callback too, but keep the exception intact\n        // if it is a known parser or lexer error which has been thrown by parseError() already:\n        if (ex instanceof this.JisonParserError) {\n            throw ex;\n        }\n        else if (lexer && typeof lexer.JisonLexerError === 'function' && ex instanceof lexer.JisonLexerError) {\n            throw ex;\n        }\n\n        p = this.constructParseErrorInfo('Parsing aborted due to exception.', ex, null, false);\n        retval = false;\n        r = this.parseError(p.errStr, p, this.JisonParserError);\n        if (typeof r !== 'undefined') {\n            retval = r;\n        }\n    } finally {\n        retval = this.cleanupAfterParse(retval, true, true);\n        this.__reentrant_call_depth--;\n    }   // /finally\n\n    return retval;\n}\n};\nparser.originalParseError = parser.parseError;\nparser.originalQuoteName = parser.quoteName;\n/* lexer generated by jison-lex 0.6.1-216 */\n\n/*\n * Returns a Lexer object of the following structure:\n *\n *  Lexer: {\n *    yy: {}     The so-called \"shared state\" or rather the *source* of it;\n *               the real \"shared state\" `yy` passed around to\n *               the rule actions, etc. is a direct reference!\n *\n *               This \"shared context\" object was passed to the lexer by way of \n *               the `lexer.setInput(str, yy)` API before you may use it.\n *\n *               This \"shared context\" object is passed to the lexer action code in `performAction()`\n *               so userland code in the lexer actions may communicate with the outside world \n *               and/or other lexer rules' actions in more or less complex ways.\n *\n *  }\n *\n *  Lexer.prototype: {\n *    EOF: 1,\n *    ERROR: 2,\n *\n *    yy:        The overall \"shared context\" object reference.\n *\n *    JisonLexerError: function(msg, hash),\n *\n *    performAction: function lexer__performAction(yy, yyrulenumber, YY_START),\n *\n *               The function parameters and `this` have the following value/meaning:\n *               - `this`    : reference to the `lexer` instance. \n *                               `yy_` is an alias for `this` lexer instance reference used internally.\n *\n *               - `yy`      : a reference to the `yy` \"shared state\" object which was passed to the lexer\n *                             by way of the `lexer.setInput(str, yy)` API before.\n *\n *                             Note:\n *                             The extra arguments you specified in the `%parse-param` statement in your\n *                             **parser** grammar definition file are passed to the lexer via this object\n *                             reference as member variables.\n *\n *               - `yyrulenumber`   : index of the matched lexer rule (regex), used internally.\n *\n *               - `YY_START`: the current lexer \"start condition\" state.\n *\n *    parseError: function(str, hash, ExceptionClass),\n *\n *    constructLexErrorInfo: function(error_message, is_recoverable),\n *               Helper function.\n *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.\n *               See it's use in this lexer kernel in many places; example usage:\n *\n *                   var infoObj = lexer.constructParseErrorInfo('fail!', true);\n *                   var retVal = lexer.parseError(infoObj.errStr, infoObj, lexer.JisonLexerError);\n *\n *    options: { ... lexer %options ... },\n *\n *    lex: function(),\n *               Produce one token of lexed input, which was passed in earlier via the `lexer.setInput()` API.\n *               You MAY use the additional `args...` parameters as per `%parse-param` spec of the **lexer** grammar:\n *               these extra `args...` are added verbatim to the `yy` object reference as member variables.\n *\n *               WARNING:\n *               Lexer's additional `args...` parameters (via lexer's `%parse-param`) MAY conflict with\n *               any attributes already added to `yy` by the **parser** or the jison run-time; \n *               when such a collision is detected an exception is thrown to prevent the generated run-time \n *               from silently accepting this confusing and potentially hazardous situation! \n *\n *    cleanupAfterLex: function(do_not_nuke_errorinfos),\n *               Helper function.\n *\n *               This helper API is invoked when the **parse process** has completed: it is the responsibility\n *               of the **parser** (or the calling userland code) to invoke this method once cleanup is desired. \n *\n *               This helper may be invoked by user code to ensure the internal lexer gets properly garbage collected.\n *\n *    setInput: function(input, [yy]),\n *\n *\n *    input: function(),\n *\n *\n *    unput: function(str),\n *\n *\n *    more: function(),\n *\n *\n *    reject: function(),\n *\n *\n *    less: function(n),\n *\n *\n *    pastInput: function(n),\n *\n *\n *    upcomingInput: function(n),\n *\n *\n *    showPosition: function(),\n *\n *\n *    test_match: function(regex_match_array, rule_index),\n *\n *\n *    next: function(),\n *\n *\n *    begin: function(condition),\n *\n *\n *    pushState: function(condition),\n *\n *\n *    popState: function(),\n *\n *\n *    topState: function(),\n *\n *\n *    _currentRules: function(),\n *\n *\n *    stateStackSize: function(),\n *\n *\n *    performAction: function(yy, yy_, yyrulenumber, YY_START),\n *\n *\n *    rules: [...],\n *\n *\n *    conditions: {associative list: name ==> set},\n *  }\n *\n *\n *  token location info (`yylloc`): {\n *    first_line: n,\n *    last_line: n,\n *    first_column: n,\n *    last_column: n,\n *    range: [start_number, end_number]\n *               (where the numbers are indexes into the input string, zero-based)\n *  }\n *\n * ---\n *\n * The `parseError` function receives a 'hash' object with these members for lexer errors:\n *\n *  {\n *    text:        (matched text)\n *    token:       (the produced terminal token, if any)\n *    token_id:    (the produced terminal token numeric ID, if any)\n *    line:        (yylineno)\n *    loc:         (yylloc)\n *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule\n *                  available for this particular error)\n *    yy:          (object: the current parser internal \"shared state\" `yy`\n *                  as is also available in the rule actions; this can be used,\n *                  for instance, for advanced error analysis and reporting)\n *    lexer:       (reference to the current lexer instance used by the parser)\n *  }\n *\n * while `this` will reference the current lexer instance.\n *\n * When `parseError` is invoked by the lexer, the default implementation will\n * attempt to invoke `yy.parser.parseError()`; when this callback is not provided\n * it will try to invoke `yy.parseError()` instead. When that callback is also not\n * provided, a `JisonLexerError` exception will be thrown containing the error\n * message and `hash`, as constructed by the `constructLexErrorInfo()` API.\n *\n * Note that the lexer's `JisonLexerError` error class is passed via the\n * `ExceptionClass` argument, which is invoked to construct the exception\n * instance to be thrown, so technically `parseError` will throw the object\n * produced by the `new ExceptionClass(str, hash)` JavaScript expression.\n *\n * ---\n *\n * You can specify lexer options by setting / modifying the `.options` object of your Lexer instance.\n * These options are available:\n *\n * (Options are permanent.)\n *  \n *  yy: {\n *      parseError: function(str, hash, ExceptionClass)\n *                 optional: overrides the default `parseError` function.\n *  }\n *\n *  lexer.options: {\n *      pre_lex:  function()\n *                 optional: is invoked before the lexer is invoked to produce another token.\n *                 `this` refers to the Lexer object.\n *      post_lex: function(token) { return token; }\n *                 optional: is invoked when the lexer has produced a token `token`;\n *                 this function can override the returned token value by returning another.\n *                 When it does not return any (truthy) value, the lexer will return\n *                 the original `token`.\n *                 `this` refers to the Lexer object.\n *\n * WARNING: the next set of options are not meant to be changed. They echo the abilities of\n * the lexer as per when it was compiled!\n *\n *      ranges: boolean\n *                 optional: `true` ==> token location info will include a .range[] member.\n *      flex: boolean\n *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested\n *                 exhaustively to find the longest match.\n *      backtrack_lexer: boolean\n *                 optional: `true` ==> lexer regexes are tested in order and for invoked;\n *                 the lexer terminates the scan when a token is returned by the action code.\n *      xregexp: boolean\n *                 optional: `true` ==> lexer rule regexes are \"extended regex format\" requiring the\n *                 `XRegExp` library. When this %option has not been specified at compile time, all lexer\n *                 rule regexes have been written as standard JavaScript RegExp expressions.\n *  }\n */\n\n\nvar lexer = function() {\n  /**\n   * See also:\n   * http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508\n   * but we keep the prototype.constructor and prototype.name assignment lines too for compatibility\n   * with userland code which might access the derived class in a 'classic' way.\n   *\n   * @public\n   * @constructor\n   * @nocollapse\n   */\n  function JisonLexerError(msg, hash) {\n    Object.defineProperty(this, 'name', {\n      enumerable: false,\n      writable: false,\n      value: 'JisonLexerError'\n    });\n\n    if (msg == null)\n      msg = '???';\n\n    Object.defineProperty(this, 'message', {\n      enumerable: false,\n      writable: true,\n      value: msg\n    });\n\n    this.hash = hash;\n    var stacktrace;\n\n    if (hash && hash.exception instanceof Error) {\n      var ex2 = hash.exception;\n      this.message = ex2.message || msg;\n      stacktrace = ex2.stack;\n    }\n\n    if (!stacktrace) {\n      if (Error.hasOwnProperty('captureStackTrace')) {\n        // V8\n        Error.captureStackTrace(this, this.constructor);\n      } else {\n        stacktrace = new Error(msg).stack;\n      }\n    }\n\n    if (stacktrace) {\n      Object.defineProperty(this, 'stack', {\n        enumerable: false,\n        writable: false,\n        value: stacktrace\n      });\n    }\n  }\n\n  if (typeof Object.setPrototypeOf === 'function') {\n    Object.setPrototypeOf(JisonLexerError.prototype, Error.prototype);\n  } else {\n    JisonLexerError.prototype = Object.create(Error.prototype);\n  }\n\n  JisonLexerError.prototype.constructor = JisonLexerError;\n  JisonLexerError.prototype.name = 'JisonLexerError';\n\n  var lexer = {\n    \n// Code Generator Information Report\n// ---------------------------------\n//\n// Options:\n//\n//   backtracking: .................... false\n//   location.ranges: ................. false\n//   location line+column tracking: ... true\n//\n//\n// Forwarded Parser Analysis flags:\n//\n//   uses yyleng: ..................... false\n//   uses yylineno: ................... false\n//   uses yytext: ..................... false\n//   uses yylloc: ..................... false\n//   uses lexer values: ............... true / true\n//   location tracking: ............... false\n//   location assignment: ............. false\n//\n//\n// Lexer Analysis flags:\n//\n//   uses yyleng: ..................... ???\n//   uses yylineno: ................... ???\n//   uses yytext: ..................... ???\n//   uses yylloc: ..................... ???\n//   uses ParseError API: ............. ???\n//   uses yyerror: .................... ???\n//   uses location tracking & editing:  ???\n//   uses more() API: ................. ???\n//   uses unput() API: ................ ???\n//   uses reject() API: ............... ???\n//   uses less() API: ................. ???\n//   uses display APIs pastInput(), upcomingInput(), showPosition():\n//        ............................. ???\n//   uses describeYYLLOC() API: ....... ???\n//\n// --------- END OF REPORT -----------\n\nEOF: 1,\n    ERROR: 2,\n\n    // JisonLexerError: JisonLexerError,        /// <-- injected by the code generator\n\n    // options: {},                             /// <-- injected by the code generator\n\n    // yy: ...,                                 /// <-- injected by setInput()\n\n    /// INTERNAL USE ONLY: internal rule set cache for the current lexer state\n    __currentRuleSet__: null,\n\n    /// INTERNAL USE ONLY: the set of lexErrorInfo objects created since the last cleanup\n    __error_infos: [],\n\n    /// INTERNAL USE ONLY: mark whether the lexer instance has been 'unfolded' completely and is now ready for use\n    __decompressed: false,\n\n    /// INTERNAL USE ONLY\n    done: false,\n\n    /// INTERNAL USE ONLY\n    _backtrack: false,\n\n    /// INTERNAL USE ONLY\n    _input: '',\n\n    /// INTERNAL USE ONLY\n    _more: false,\n\n    /// INTERNAL USE ONLY\n    _signaled_error_token: false,\n\n    /// INTERNAL USE ONLY; managed via `pushState()`, `popState()`, `topState()` and `stateStackSize()`\n    conditionStack: [],\n\n    /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction. `match` is identical to `yytext` except that this one still contains the matched input string after `lexer.performAction()` has been invoked, where userland code MAY have changed/replaced the `yytext` value entirely!\n    match: '',\n\n    /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks entire input which has been matched so far\n    matched: '',\n\n    /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks RE match result for last (successful) match attempt\n    matches: false,\n\n    /// ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction; this value is transferred to the parser as the 'token value' when the parser consumes the lexer token produced through a call to the `lex()` API.\n    yytext: '',\n\n    /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks the 'cursor position' in the input string, i.e. the number of characters matched so far\n    offset: 0,\n\n    /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: length of matched input for the token under construction (`yytext`)\n    yyleng: 0,\n\n    /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: 'line number' at which the token under construction is located\n    yylineno: 0,\n\n    /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks location info (lines + columns) for the token under construction\n    yylloc: null,\n\n    /**\n     * INTERNAL USE: construct a suitable error info hash object instance for `parseError`.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    constructLexErrorInfo: function lexer_constructLexErrorInfo(msg, recoverable, show_input_position) {\n      msg = '' + msg;\n\n      // heuristic to determine if the error message already contains a (partial) source code dump\n      // as produced by either `showPosition()` or `prettyPrintRange()`:\n      if (show_input_position == undefined) {\n        show_input_position = !(msg.indexOf('\\n') > 0 && msg.indexOf('^') > 0);\n      }\n\n      if (this.yylloc && show_input_position) {\n        if (typeof this.prettyPrintRange === 'function') {\n          var pretty_src = this.prettyPrintRange(this.yylloc);\n\n          if (!/\\n\\s*$/.test(msg)) {\n            msg += '\\n';\n          }\n\n          msg += '\\n  Erroneous area:\\n' + this.prettyPrintRange(this.yylloc);\n        } else if (typeof this.showPosition === 'function') {\n          var pos_str = this.showPosition();\n\n          if (pos_str) {\n            if (msg.length && msg[msg.length - 1] !== '\\n' && pos_str[0] !== '\\n') {\n              msg += '\\n' + pos_str;\n            } else {\n              msg += pos_str;\n            }\n          }\n        }\n      }\n\n      /** @constructor */\n      var pei = {\n        errStr: msg,\n        recoverable: !!recoverable,\n\n        // This one MAY be empty; userland code should use the `upcomingInput` API to obtain more text which follows the 'lexer cursor position'...\n        text: this.match,\n\n        token: null,\n        line: this.yylineno,\n        loc: this.yylloc,\n        yy: this.yy,\n        lexer: this,\n\n        /**\n         * and make sure the error info doesn't stay due to potential\n         * ref cycle via userland code manipulations.\n         * These would otherwise all be memory leak opportunities!\n         * \n         * Note that only array and object references are nuked as those\n         * constitute the set of elements which can produce a cyclic ref.\n         * The rest of the members is kept intact as they are harmless.\n         * \n         * @public\n         * @this {LexErrorInfo}\n         */\n        destroy: function destructLexErrorInfo() {\n          // remove cyclic references added to error info:\n          // info.yy = null;\n          // info.lexer = null;\n          // ...\n          var rec = !!this.recoverable;\n\n          for (var key in this) {\n            if (this.hasOwnProperty(key) && typeof key === 'object') {\n              this[key] = undefined;\n            }\n          }\n\n          this.recoverable = rec;\n        }\n      };\n\n      // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!\n      this.__error_infos.push(pei);\n\n      return pei;\n    },\n\n    /**\n     * handler which is invoked when a lexer error occurs.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    parseError: function lexer_parseError(str, hash, ExceptionClass) {\n      if (!ExceptionClass) {\n        ExceptionClass = this.JisonLexerError;\n      }\n\n      if (this.yy) {\n        if (this.yy.parser && typeof this.yy.parser.parseError === 'function') {\n          return this.yy.parser.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;\n        } else if (typeof this.yy.parseError === 'function') {\n          return this.yy.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;\n        }\n      }\n\n      throw new ExceptionClass(str, hash);\n    },\n\n    /**\n     * method which implements `yyerror(str, ...args)` functionality for use inside lexer actions.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    yyerror: function yyError(str /*, ...args */) {\n      var lineno_msg = '';\n\n      if (this.yylloc) {\n        lineno_msg = ' on line ' + (this.yylineno + 1);\n      }\n\n      var p = this.constructLexErrorInfo(\n        'Lexical error' + lineno_msg + ': ' + str,\n        this.options.lexerErrorsAreRecoverable\n      );\n\n      // Add any extra args to the hash under the name `extra_error_attributes`:\n      var args = Array.prototype.slice.call(arguments, 1);\n\n      if (args.length) {\n        p.extra_error_attributes = args;\n      }\n\n      return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;\n    },\n\n    /**\n     * final cleanup function for when we have completed lexing the input;\n     * make it an API so that external code can use this one once userland\n     * code has decided it's time to destroy any lingering lexer error\n     * hash object instances and the like: this function helps to clean\n     * up these constructs, which *may* carry cyclic references which would\n     * otherwise prevent the instances from being properly and timely\n     * garbage-collected, i.e. this function helps prevent memory leaks!\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    cleanupAfterLex: function lexer_cleanupAfterLex(do_not_nuke_errorinfos) {\n      // prevent lingering circular references from causing memory leaks:\n      this.setInput('', {});\n\n      // nuke the error hash info instances created during this run.\n      // Userland code must COPY any data/references\n      // in the error hash instance(s) it is more permanently interested in.\n      if (!do_not_nuke_errorinfos) {\n        for (var i = this.__error_infos.length - 1; i >= 0; i--) {\n          var el = this.__error_infos[i];\n\n          if (el && typeof el.destroy === 'function') {\n            el.destroy();\n          }\n        }\n\n        this.__error_infos.length = 0;\n      }\n\n      return this;\n    },\n\n    /**\n     * clear the lexer token context; intended for internal use only\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    clear: function lexer_clear() {\n      this.yytext = '';\n      this.yyleng = 0;\n      this.match = '';\n\n      // - DO NOT reset `this.matched`\n      this.matches = false;\n\n      this._more = false;\n      this._backtrack = false;\n      var col = (this.yylloc ? this.yylloc.last_column : 0);\n\n      this.yylloc = {\n        first_line: this.yylineno + 1,\n        first_column: col,\n        last_line: this.yylineno + 1,\n        last_column: col,\n        range: [this.offset, this.offset]\n      };\n    },\n\n    /**\n     * resets the lexer, sets new input\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    setInput: function lexer_setInput(input, yy) {\n      this.yy = yy || this.yy || {};\n\n      // also check if we've fully initialized the lexer instance,\n      // including expansion work to be done to go from a loaded\n      // lexer to a usable lexer:\n      if (!this.__decompressed) {\n        // step 1: decompress the regex list:\n        var rules = this.rules;\n\n        for (var i = 0, len = rules.length; i < len; i++) {\n          var rule_re = rules[i];\n\n          // compression: is the RE an xref to another RE slot in the rules[] table?\n          if (typeof rule_re === 'number') {\n            rules[i] = rules[rule_re];\n          }\n        }\n\n        // step 2: unfold the conditions[] set to make these ready for use:\n        var conditions = this.conditions;\n\n        for (var k in conditions) {\n          var spec = conditions[k];\n          var rule_ids = spec.rules;\n          var len = rule_ids.length;\n          var rule_regexes = new Array(len + 1);            // slot 0 is unused; we use a 1-based index approach here to keep the hottest code in `lexer_next()` fast and simple!\n          var rule_new_ids = new Array(len + 1);\n\n          for (var i = 0; i < len; i++) {\n            var idx = rule_ids[i];\n            var rule_re = rules[idx];\n            rule_regexes[i + 1] = rule_re;\n            rule_new_ids[i + 1] = idx;\n          }\n\n          spec.rules = rule_new_ids;\n          spec.__rule_regexes = rule_regexes;\n          spec.__rule_count = len;\n        }\n\n        this.__decompressed = true;\n      }\n\n      this._input = input || '';\n      this.clear();\n      this._signaled_error_token = false;\n      this.done = false;\n      this.yylineno = 0;\n      this.matched = '';\n      this.conditionStack = ['INITIAL'];\n      this.__currentRuleSet__ = null;\n\n      this.yylloc = {\n        first_line: 1,\n        first_column: 0,\n        last_line: 1,\n        last_column: 0,\n        range: [0, 0]\n      };\n\n      this.offset = 0;\n      return this;\n    },\n\n    /**\n     * edit the remaining input via user-specified callback.\n     * This can be used to forward-adjust the input-to-parse, \n     * e.g. inserting macro expansions and alike in the\n     * input which has yet to be lexed.\n     * The behaviour of this API contrasts the `unput()` et al\n     * APIs as those act on the *consumed* input, while this\n     * one allows one to manipulate the future, without impacting\n     * the current `yyloc` cursor location or any history. \n     * \n     * Use this API to help implement C-preprocessor-like\n     * `#include` statements, etc.\n     * \n     * The provided callback must be synchronous and is\n     * expected to return the edited input (string).\n     *\n     * The `cpsArg` argument value is passed to the callback\n     * as-is.\n     *\n     * `callback` interface: \n     * `function callback(input, cpsArg)`\n     * \n     * - `input` will carry the remaining-input-to-lex string\n     *   from the lexer.\n     * - `cpsArg` is `cpsArg` passed into this API.\n     * \n     * The `this` reference for the callback will be set to\n     * reference this lexer instance so that userland code\n     * in the callback can easily and quickly access any lexer\n     * API. \n     *\n     * When the callback returns a non-string-type falsey value,\n     * we assume the callback did not edit the input and we\n     * will using the input as-is.\n     *\n     * When the callback returns a non-string-type value, it\n     * is converted to a string for lexing via the `\"\" + retval`\n     * operation. (See also why: http://2ality.com/2012/03/converting-to-string.html \n     * -- that way any returned object's `toValue()` and `toString()`\n     * methods will be invoked in a proper/desirable order.)\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    editRemainingInput: function lexer_editRemainingInput(callback, cpsArg) {\n      var rv = callback.call(this, this._input, cpsArg);\n\n      if (typeof rv !== 'string') {\n        if (rv) {\n          this._input = '' + rv;\n        }\n        // else: keep `this._input` as is. \n      } else {\n        this._input = rv;\n      }\n\n      return this;\n    },\n\n    /**\n     * consumes and returns one char from the input\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    input: function lexer_input() {\n      if (!this._input) {\n        //this.done = true;    -- don't set `done` as we want the lex()/next() API to be able to produce one custom EOF token match after this anyhow. (lexer can match special <<EOF>> tokens and perform user action code for a <<EOF>> match, but only does so *once*)\n        return null;\n      }\n\n      var ch = this._input[0];\n      this.yytext += ch;\n      this.yyleng++;\n      this.offset++;\n      this.match += ch;\n      this.matched += ch;\n\n      // Count the linenumber up when we hit the LF (or a stand-alone CR).\n      // On CRLF, the linenumber is incremented when you fetch the CR or the CRLF combo\n      // and we advance immediately past the LF as well, returning both together as if\n      // it was all a single 'character' only.\n      var slice_len = 1;\n\n      var lines = false;\n\n      if (ch === '\\n') {\n        lines = true;\n      } else if (ch === '\\r') {\n        lines = true;\n        var ch2 = this._input[1];\n\n        if (ch2 === '\\n') {\n          slice_len++;\n          ch += ch2;\n          this.yytext += ch2;\n          this.yyleng++;\n          this.offset++;\n          this.match += ch2;\n          this.matched += ch2;\n          this.yylloc.range[1]++;\n        }\n      }\n\n      if (lines) {\n        this.yylineno++;\n        this.yylloc.last_line++;\n        this.yylloc.last_column = 0;\n      } else {\n        this.yylloc.last_column++;\n      }\n\n      this.yylloc.range[1]++;\n      this._input = this._input.slice(slice_len);\n      return ch;\n    },\n\n    /**\n     * unshifts one char (or an entire string) into the input\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    unput: function lexer_unput(ch) {\n      var len = ch.length;\n      var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n      this._input = ch + this._input;\n      this.yytext = this.yytext.substr(0, this.yytext.length - len);\n      this.yyleng = this.yytext.length;\n      this.offset -= len;\n      this.match = this.match.substr(0, this.match.length - len);\n      this.matched = this.matched.substr(0, this.matched.length - len);\n\n      if (lines.length > 1) {\n        this.yylineno -= lines.length - 1;\n        this.yylloc.last_line = this.yylineno + 1;\n\n        // Get last entirely matched line into the `pre_lines[]` array's\n        // last index slot; we don't mind when other previously \n        // matched lines end up in the array too. \n        var pre = this.match;\n\n        var pre_lines = pre.split(/(?:\\r\\n?|\\n)/g);\n\n        if (pre_lines.length === 1) {\n          pre = this.matched;\n          pre_lines = pre.split(/(?:\\r\\n?|\\n)/g);\n        }\n\n        this.yylloc.last_column = pre_lines[pre_lines.length - 1].length;\n      } else {\n        this.yylloc.last_column -= len;\n      }\n\n      this.yylloc.range[1] = this.yylloc.range[0] + this.yyleng;\n      this.done = false;\n      return this;\n    },\n\n    /**\n     * cache matched text and append it on next action\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    more: function lexer_more() {\n      this._more = true;\n      return this;\n    },\n\n    /**\n     * signal the lexer that this rule fails to match the input, so the\n     * next matching rule (regex) should be tested instead.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    reject: function lexer_reject() {\n      if (this.options.backtrack_lexer) {\n        this._backtrack = true;\n      } else {\n        // when the `parseError()` call returns, we MUST ensure that the error is registered.\n        // We accomplish this by signaling an 'error' token to be produced for the current\n        // `.lex()` run.\n        var lineno_msg = '';\n\n        if (this.yylloc) {\n          lineno_msg = ' on line ' + (this.yylineno + 1);\n        }\n\n        var p = this.constructLexErrorInfo(\n          'Lexical error' + lineno_msg + ': You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).',\n          false\n        );\n\n        this._signaled_error_token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;\n      }\n\n      return this;\n    },\n\n    /**\n     * retain first n characters of the match\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    less: function lexer_less(n) {\n      return this.unput(this.match.slice(n));\n    },\n\n    /**\n     * return (part of the) already matched input, i.e. for error\n     * messages.\n     * \n     * Limit the returned string length to `maxSize` (default: 20).\n     * \n     * Limit the returned string to the `maxLines` number of lines of\n     * input (default: 1).\n     * \n     * Negative limit values equal *unlimited*.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    pastInput: function lexer_pastInput(maxSize, maxLines) {\n      var past = this.matched.substring(0, this.matched.length - this.match.length);\n\n      if (maxSize < 0)\n        maxSize = past.length;\n      else if (!maxSize)\n        maxSize = 20;\n\n      if (maxLines < 0)\n        maxLines = past.length;         // can't ever have more input lines than this!;\n      else if (!maxLines)\n        maxLines = 1;\n\n      // `substr` anticipation: treat \\r\\n as a single character and take a little\n      // more than necessary so that we can still properly check against maxSize\n      // after we've transformed and limited the newLines in here:\n      past = past.substr(-maxSize * 2 - 2);\n\n      // now that we have a significantly reduced string to process, transform the newlines\n      // and chop them, then limit them:\n      var a = past.replace(/\\r\\n|\\r/g, '\\n').split('\\n');\n\n      a = a.slice(-maxLines);\n      past = a.join('\\n');\n\n      // When, after limiting to maxLines, we still have too much to return,\n      // do add an ellipsis prefix...\n      if (past.length > maxSize) {\n        past = '...' + past.substr(-maxSize);\n      }\n\n      return past;\n    },\n\n    /**\n     * return (part of the) upcoming input, i.e. for error messages.\n     * \n     * Limit the returned string length to `maxSize` (default: 20).\n     * \n     * Limit the returned string to the `maxLines` number of lines of input (default: 1).\n     * \n     * Negative limit values equal *unlimited*.\n     *\n     * > ### NOTE ###\n     * >\n     * > *\"upcoming input\"* is defined as the whole of the both\n     * > the *currently lexed* input, together with any remaining input\n     * > following that. *\"currently lexed\"* input is the input \n     * > already recognized by the lexer but not yet returned with\n     * > the lexer token. This happens when you are invoking this API\n     * > from inside any lexer rule action code block. \n     * >\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    upcomingInput: function lexer_upcomingInput(maxSize, maxLines) {\n      var next = this.match;\n\n      if (maxSize < 0)\n        maxSize = next.length + this._input.length;\n      else if (!maxSize)\n        maxSize = 20;\n\n      if (maxLines < 0)\n        maxLines = maxSize;         // can't ever have more input lines than this!;\n      else if (!maxLines)\n        maxLines = 1;\n\n      // `substring` anticipation: treat \\r\\n as a single character and take a little\n      // more than necessary so that we can still properly check against maxSize\n      // after we've transformed and limited the newLines in here:\n      if (next.length < maxSize * 2 + 2) {\n        next += this._input.substring(0, maxSize * 2 + 2);  // substring is faster on Chrome/V8\n      }\n\n      // now that we have a significantly reduced string to process, transform the newlines\n      // and chop them, then limit them:\n      var a = next.replace(/\\r\\n|\\r/g, '\\n').split('\\n');\n\n      a = a.slice(0, maxLines);\n      next = a.join('\\n');\n\n      // When, after limiting to maxLines, we still have too much to return,\n      // do add an ellipsis postfix...\n      if (next.length > maxSize) {\n        next = next.substring(0, maxSize) + '...';\n      }\n\n      return next;\n    },\n\n    /**\n     * return a string which displays the character position where the\n     * lexing error occurred, i.e. for error messages\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    showPosition: function lexer_showPosition(maxPrefix, maxPostfix) {\n      var pre = this.pastInput(maxPrefix).replace(/\\s/g, ' ');\n      var c = new Array(pre.length + 1).join('-');\n      return pre + this.upcomingInput(maxPostfix).replace(/\\s/g, ' ') + '\\n' + c + '^';\n    },\n\n    /**\n     * return an YYLLOC info object derived off the given context (actual, preceding, following, current).\n     * Use this method when the given `actual` location is not guaranteed to exist (i.e. when\n     * it MAY be NULL) and you MUST have a valid location info object anyway:\n     * then we take the given context of the `preceding` and `following` locations, IFF those are available,\n     * and reconstruct the `actual` location info from those.\n     * If this fails, the heuristic is to take the `current` location, IFF available.\n     * If this fails as well, we assume the sought location is at/around the current lexer position\n     * and then produce that one as a response. DO NOTE that these heuristic/derived location info\n     * values MAY be inaccurate!\n     *\n     * NOTE: `deriveLocationInfo()` ALWAYS produces a location info object *copy* of `actual`, not just\n     * a *reference* hence all input location objects can be assumed to be 'constant' (function has no side-effects).\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    deriveLocationInfo: function lexer_deriveYYLLOC(actual, preceding, following, current) {\n      var loc = {\n        first_line: 1,\n        first_column: 0,\n        last_line: 1,\n        last_column: 0,\n        range: [0, 0]\n      };\n\n      if (actual) {\n        loc.first_line = actual.first_line | 0;\n        loc.last_line = actual.last_line | 0;\n        loc.first_column = actual.first_column | 0;\n        loc.last_column = actual.last_column | 0;\n\n        if (actual.range) {\n          loc.range[0] = actual.range[0] | 0;\n          loc.range[1] = actual.range[1] | 0;\n        }\n      }\n\n      if (loc.first_line <= 0 || loc.last_line < loc.first_line) {\n        // plan B: heuristic using preceding and following:\n        if (loc.first_line <= 0 && preceding) {\n          loc.first_line = preceding.last_line | 0;\n          loc.first_column = preceding.last_column | 0;\n\n          if (preceding.range) {\n            loc.range[0] = actual.range[1] | 0;\n          }\n        }\n\n        if ((loc.last_line <= 0 || loc.last_line < loc.first_line) && following) {\n          loc.last_line = following.first_line | 0;\n          loc.last_column = following.first_column | 0;\n\n          if (following.range) {\n            loc.range[1] = actual.range[0] | 0;\n          }\n        }\n\n        // plan C?: see if the 'current' location is useful/sane too:\n        if (loc.first_line <= 0 && current && (loc.last_line <= 0 || current.last_line <= loc.last_line)) {\n          loc.first_line = current.first_line | 0;\n          loc.first_column = current.first_column | 0;\n\n          if (current.range) {\n            loc.range[0] = current.range[0] | 0;\n          }\n        }\n\n        if (loc.last_line <= 0 && current && (loc.first_line <= 0 || current.first_line >= loc.first_line)) {\n          loc.last_line = current.last_line | 0;\n          loc.last_column = current.last_column | 0;\n\n          if (current.range) {\n            loc.range[1] = current.range[1] | 0;\n          }\n        }\n      }\n\n      // sanitize: fix last_line BEFORE we fix first_line as we use the 'raw' value of the latter\n      // or plan D heuristics to produce a 'sensible' last_line value:\n      if (loc.last_line <= 0) {\n        if (loc.first_line <= 0) {\n          loc.first_line = this.yylloc.first_line;\n          loc.last_line = this.yylloc.last_line;\n          loc.first_column = this.yylloc.first_column;\n          loc.last_column = this.yylloc.last_column;\n          loc.range[0] = this.yylloc.range[0];\n          loc.range[1] = this.yylloc.range[1];\n        } else {\n          loc.last_line = this.yylloc.last_line;\n          loc.last_column = this.yylloc.last_column;\n          loc.range[1] = this.yylloc.range[1];\n        }\n      }\n\n      if (loc.first_line <= 0) {\n        loc.first_line = loc.last_line;\n        loc.first_column = 0; // loc.last_column;\n        loc.range[1] = loc.range[0];\n      }\n\n      if (loc.first_column < 0) {\n        loc.first_column = 0;\n      }\n\n      if (loc.last_column < 0) {\n        loc.last_column = (loc.first_column > 0 ? loc.first_column : 80);\n      }\n\n      return loc;\n    },\n\n    /**\n     * return a string which displays the lines & columns of input which are referenced \n     * by the given location info range, plus a few lines of context.\n     * \n     * This function pretty-prints the indicated section of the input, with line numbers \n     * and everything!\n     * \n     * This function is very useful to provide highly readable error reports, while\n     * the location range may be specified in various flexible ways:\n     * \n     * - `loc` is the location info object which references the area which should be\n     *   displayed and 'marked up': these lines & columns of text are marked up by `^`\n     *   characters below each character in the entire input range.\n     * \n     * - `context_loc` is the *optional* location info object which instructs this\n     *   pretty-printer how much *leading* context should be displayed alongside\n     *   the area referenced by `loc`. This can help provide context for the displayed\n     *   error, etc.\n     * \n     *   When this location info is not provided, a default context of 3 lines is\n     *   used.\n     * \n     * - `context_loc2` is another *optional* location info object, which serves\n     *   a similar purpose to `context_loc`: it specifies the amount of *trailing*\n     *   context lines to display in the pretty-print output.\n     * \n     *   When this location info is not provided, a default context of 1 line only is\n     *   used.\n     * \n     * Special Notes:\n     * \n     * - when the `loc`-indicated range is very large (about 5 lines or more), then\n     *   only the first and last few lines of this block are printed while a\n     *   `...continued...` message will be printed between them.\n     * \n     *   This serves the purpose of not printing a huge amount of text when the `loc`\n     *   range happens to be huge: this way a manageable & readable output results\n     *   for arbitrary large ranges.\n     * \n     * - this function can display lines of input which whave not yet been lexed.\n     *   `prettyPrintRange()` can access the entire input!\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    prettyPrintRange: function lexer_prettyPrintRange(loc, context_loc, context_loc2) {\n      loc = this.deriveLocationInfo(loc, context_loc, context_loc2);\n      const CONTEXT = 3;\n      const CONTEXT_TAIL = 1;\n      const MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT = 2;\n      var input = this.matched + this._input;\n      var lines = input.split('\\n');\n      var l0 = Math.max(1, (context_loc ? context_loc.first_line : loc.first_line - CONTEXT));\n      var l1 = Math.max(1, (context_loc2 ? context_loc2.last_line : loc.last_line + CONTEXT_TAIL));\n      var lineno_display_width = 1 + Math.log10(l1 | 1) | 0;\n      var ws_prefix = new Array(lineno_display_width).join(' ');\n      var nonempty_line_indexes = [[], [], []];\n\n      var rv = lines.slice(l0 - 1, l1 + 1).map(function injectLineNumber(line, index) {\n        var lno = index + l0;\n        var lno_pfx = (ws_prefix + lno).substr(-lineno_display_width);\n        var rv = lno_pfx + ': ' + line;\n        var errpfx = new Array(lineno_display_width + 1).join('^');\n        var offset = 2 + 1;\n        var len = 0;\n\n        if (lno === loc.first_line) {\n          offset += loc.first_column;\n\n          len = Math.max(\n            2,\n            ((lno === loc.last_line ? loc.last_column : line.length)) - loc.first_column + 1\n          );\n        } else if (lno === loc.last_line) {\n          len = Math.max(2, loc.last_column + 1);\n        } else if (lno > loc.first_line && lno < loc.last_line) {\n          len = Math.max(2, line.length + 1);\n        }\n\n        var nli;\n\n        if (len) {\n          var lead = new Array(offset).join('.');\n          var mark = new Array(len).join('^');\n          rv += '\\n' + errpfx + lead + mark;\n          nli = 1;\n        } else if (lno < loc.first_line) {\n          nli = 0;\n        } else if (lno > loc.last_line) {\n          nli = 2;\n        }\n\n        if (line.trim().length > 0) {\n          nonempty_line_indexes[nli].push(index);\n        }\n\n        rv = rv.replace(/\\t/g, ' ');\n        return rv;\n      });\n\n      // now make sure we don't print an overly large amount of lead/error/tail area: limit it \n      // to the top and bottom line count:\n      for (var i = 0; i <= 2; i++) {\n        var line_arr = nonempty_line_indexes[i];\n\n        if (line_arr.length > 2 * MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT) {\n          var clip_start = line_arr[MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT - 1] + 1;\n          var clip_end = line_arr[line_arr.length - MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT] - 1;\n          var intermediate_line = new Array(lineno_display_width + 1).join(' ') + '  (...continued...)';\n\n          if (i === 1) {\n            intermediate_line += '\\n' + new Array(lineno_display_width + 1).join('-') + '  (---------------)';\n          }\n\n          rv.splice(clip_start, clip_end - clip_start + 1, intermediate_line);\n        }\n      }\n\n      return rv.join('\\n');\n    },\n\n    /**\n     * helper function, used to produce a human readable description as a string, given\n     * the input `yylloc` location object.\n     * \n     * Set `display_range_too` to TRUE to include the string character index position(s)\n     * in the description if the `yylloc.range` is available.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    describeYYLLOC: function lexer_describe_yylloc(yylloc, display_range_too) {\n      var l1 = yylloc.first_line;\n      var l2 = yylloc.last_line;\n      var c1 = yylloc.first_column;\n      var c2 = yylloc.last_column;\n      var dl = l2 - l1;\n      var dc = c2 - c1;\n      var rv;\n\n      if (dl === 0) {\n        rv = 'line ' + l1 + ', ';\n\n        if (dc <= 1) {\n          rv += 'column ' + c1;\n        } else {\n          rv += 'columns ' + c1 + ' .. ' + c2;\n        }\n      } else {\n        rv = 'lines ' + l1 + '(column ' + c1 + ') .. ' + l2 + '(column ' + c2 + ')';\n      }\n\n      if (yylloc.range && display_range_too) {\n        var r1 = yylloc.range[0];\n        var r2 = yylloc.range[1] - 1;\n\n        if (r2 <= r1) {\n          rv += ' {String Offset: ' + r1 + '}';\n        } else {\n          rv += ' {String Offset range: ' + r1 + ' .. ' + r2 + '}';\n        }\n      }\n\n      return rv;\n    },\n\n    /**\n     * test the lexed token: return FALSE when not a match, otherwise return token.\n     * \n     * `match` is supposed to be an array coming out of a regex match, i.e. `match[0]`\n     * contains the actually matched text string.\n     * \n     * Also move the input cursor forward and update the match collectors:\n     * \n     * - `yytext`\n     * - `yyleng`\n     * - `match`\n     * - `matches`\n     * - `yylloc`\n     * - `offset`\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    test_match: function lexer_test_match(match, indexed_rule) {\n      var token, lines, backup, match_str, match_str_len;\n\n      if (this.options.backtrack_lexer) {\n        // save context\n        backup = {\n          yylineno: this.yylineno,\n\n          yylloc: {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylloc.last_line,\n            first_column: this.yylloc.first_column,\n            last_column: this.yylloc.last_column,\n            range: this.yylloc.range.slice(0)\n          },\n\n          yytext: this.yytext,\n          match: this.match,\n          matches: this.matches,\n          matched: this.matched,\n          yyleng: this.yyleng,\n          offset: this.offset,\n          _more: this._more,\n          _input: this._input,\n\n          //_signaled_error_token: this._signaled_error_token,\n          yy: this.yy,\n\n          conditionStack: this.conditionStack.slice(0),\n          done: this.done\n        };\n      }\n\n      match_str = match[0];\n      match_str_len = match_str.length;\n\n      // if (match_str.indexOf('\\n') !== -1 || match_str.indexOf('\\r') !== -1) {\n      lines = match_str.split(/(?:\\r\\n?|\\n)/g);\n\n      if (lines.length > 1) {\n        this.yylineno += lines.length - 1;\n        this.yylloc.last_line = this.yylineno + 1;\n        this.yylloc.last_column = lines[lines.length - 1].length;\n      } else {\n        this.yylloc.last_column += match_str_len;\n      }\n\n      // }\n      this.yytext += match_str;\n\n      this.match += match_str;\n      this.matched += match_str;\n      this.matches = match;\n      this.yyleng = this.yytext.length;\n      this.yylloc.range[1] += match_str_len;\n\n      // previous lex rules MAY have invoked the `more()` API rather than producing a token:\n      // those rules will already have moved this `offset` forward matching their match lengths,\n      // hence we must only add our own match length now:\n      this.offset += match_str_len;\n\n      this._more = false;\n      this._backtrack = false;\n      this._input = this._input.slice(match_str_len);\n\n      // calling this method:\n      //\n      //   function lexer__performAction(yy, yyrulenumber, YY_START) {...}\n      token = this.performAction.call(\n        this,\n        this.yy,\n        indexed_rule,\n        this.conditionStack[this.conditionStack.length - 1] /* = YY_START */\n      );\n\n      // otherwise, when the action codes are all simple return token statements:\n      //token = this.simpleCaseActionClusters[indexed_rule];\n\n      if (this.done && this._input) {\n        this.done = false;\n      }\n\n      if (token) {\n        return token;\n      } else if (this._backtrack) {\n        // recover context\n        for (var k in backup) {\n          this[k] = backup[k];\n        }\n\n        this.__currentRuleSet__ = null;\n        return false; // rule action called reject() implying the next rule should be tested instead.\n      } else if (this._signaled_error_token) {\n        // produce one 'error' token as `.parseError()` in `reject()`\n        // did not guarantee a failure signal by throwing an exception!\n        token = this._signaled_error_token;\n\n        this._signaled_error_token = false;\n        return token;\n      }\n\n      return false;\n    },\n\n    /**\n     * return next match in input\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    next: function lexer_next() {\n      if (this.done) {\n        this.clear();\n        return this.EOF;\n      }\n\n      if (!this._input) {\n        this.done = true;\n      }\n\n      var token, match, tempMatch, index;\n\n      if (!this._more) {\n        this.clear();\n      }\n\n      var spec = this.__currentRuleSet__;\n\n      if (!spec) {\n        // Update the ruleset cache as we apparently encountered a state change or just started lexing.\n        // The cache is set up for fast lookup -- we assume a lexer will switch states much less often than it will\n        // invoke the `lex()` token-producing API and related APIs, hence caching the set for direct access helps\n        // speed up those activities a tiny bit.\n        spec = this.__currentRuleSet__ = this._currentRules();\n\n        // Check whether a *sane* condition has been pushed before: this makes the lexer robust against\n        // user-programmer bugs such as https://github.com/zaach/jison-lex/issues/19\n        if (!spec || !spec.rules) {\n          var lineno_msg = '';\n\n          if (this.options.trackPosition) {\n            lineno_msg = ' on line ' + (this.yylineno + 1);\n          }\n\n          var p = this.constructLexErrorInfo(\n            'Internal lexer engine error' + lineno_msg + ': The lex grammar programmer pushed a non-existing condition name \"' + this.topState() + '\"; this is a fatal error and should be reported to the application programmer team!',\n            false\n          );\n\n          // produce one 'error' token until this situation has been resolved, most probably by parse termination!\n          return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;\n        }\n      }\n\n      var rule_ids = spec.rules;\n      var regexes = spec.__rule_regexes;\n      var len = spec.__rule_count;\n\n      // Note: the arrays are 1-based, while `len` itself is a valid index,\n      // hence the non-standard less-or-equal check in the next loop condition!\n      for (var i = 1; i <= len; i++) {\n        tempMatch = this._input.match(regexes[i]);\n\n        if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n          match = tempMatch;\n          index = i;\n\n          if (this.options.backtrack_lexer) {\n            token = this.test_match(tempMatch, rule_ids[i]);\n\n            if (token !== false) {\n              return token;\n            } else if (this._backtrack) {\n              match = undefined;\n              continue; // rule action called reject() implying a rule MISmatch.\n            } else {\n              // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n              return false;\n            }\n          } else if (!this.options.flex) {\n            break;\n          }\n        }\n      }\n\n      if (match) {\n        token = this.test_match(match, rule_ids[index]);\n\n        if (token !== false) {\n          return token;\n        }\n\n        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n        return false;\n      }\n\n      if (!this._input) {\n        this.done = true;\n        this.clear();\n        return this.EOF;\n      } else {\n        var lineno_msg = '';\n\n        if (this.options.trackPosition) {\n          lineno_msg = ' on line ' + (this.yylineno + 1);\n        }\n\n        var p = this.constructLexErrorInfo(\n          'Lexical error' + lineno_msg + ': Unrecognized text.',\n          this.options.lexerErrorsAreRecoverable\n        );\n\n        var pendingInput = this._input;\n        var activeCondition = this.topState();\n        var conditionStackDepth = this.conditionStack.length;\n        token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;\n\n        if (token === this.ERROR) {\n          // we can try to recover from a lexer error that `parseError()` did not 'recover' for us\n          // by moving forward at least one character at a time IFF the (user-specified?) `parseError()`\n          // has not consumed/modified any pending input or changed state in the error handler:\n          if (!this.matches && // and make sure the input has been modified/consumed ...\n          pendingInput === this._input && // ...or the lexer state has been modified significantly enough\n          // to merit a non-consuming error handling action right now.\n          activeCondition === this.topState() && conditionStackDepth === this.conditionStack.length) {\n            this.input();\n          }\n        }\n\n        return token;\n      }\n    },\n\n    /**\n     * return next match that has a token\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    lex: function lexer_lex() {\n      var r;\n\n      // allow the PRE/POST handlers set/modify the return token for maximum flexibility of the generated lexer:\n      if (typeof this.pre_lex === 'function') {\n        r = this.pre_lex.call(this, 0);\n      }\n\n      if (typeof this.options.pre_lex === 'function') {\n        // (also account for a userdef function which does not return any value: keep the token as is)\n        r = this.options.pre_lex.call(this, r) || r;\n      }\n\n      if (this.yy && typeof this.yy.pre_lex === 'function') {\n        // (also account for a userdef function which does not return any value: keep the token as is)\n        r = this.yy.pre_lex.call(this, r) || r;\n      }\n\n      while (!r) {\n        r = this.next();\n      }\n\n      if (this.yy && typeof this.yy.post_lex === 'function') {\n        // (also account for a userdef function which does not return any value: keep the token as is)\n        r = this.yy.post_lex.call(this, r) || r;\n      }\n\n      if (typeof this.options.post_lex === 'function') {\n        // (also account for a userdef function which does not return any value: keep the token as is)\n        r = this.options.post_lex.call(this, r) || r;\n      }\n\n      if (typeof this.post_lex === 'function') {\n        // (also account for a userdef function which does not return any value: keep the token as is)\n        r = this.post_lex.call(this, r) || r;\n      }\n\n      return r;\n    },\n\n    /**\n     * return next match that has a token. Identical to the `lex()` API but does not invoke any of the \n     * `pre_lex()` nor any of the `post_lex()` callbacks.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    fastLex: function lexer_fastLex() {\n      var r;\n\n      while (!r) {\n        r = this.next();\n      }\n\n      return r;\n    },\n\n    /**\n     * return info about the lexer state that can help a parser or other lexer API user to use the\n     * most efficient means available. This API is provided to aid run-time performance for larger\n     * systems which employ this lexer.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    canIUse: function lexer_canIUse() {\n      var rv = {\n        fastLex: !(typeof this.pre_lex === 'function' || typeof this.options.pre_lex === 'function' || this.yy && typeof this.yy.pre_lex === 'function' || this.yy && typeof this.yy.post_lex === 'function' || typeof this.options.post_lex === 'function' || typeof this.post_lex === 'function') && typeof this.fastLex === 'function'\n      };\n\n      return rv;\n    },\n\n    /**\n     * backwards compatible alias for `pushState()`;\n     * the latter is symmetrical with `popState()` and we advise to use\n     * those APIs in any modern lexer code, rather than `begin()`.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    begin: function lexer_begin(condition) {\n      return this.pushState(condition);\n    },\n\n    /**\n     * activates a new lexer condition state (pushes the new lexer\n     * condition state onto the condition stack)\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    pushState: function lexer_pushState(condition) {\n      this.conditionStack.push(condition);\n      this.__currentRuleSet__ = null;\n      return this;\n    },\n\n    /**\n     * pop the previously active lexer condition state off the condition\n     * stack\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    popState: function lexer_popState() {\n      var n = this.conditionStack.length - 1;\n\n      if (n > 0) {\n        this.__currentRuleSet__ = null;\n        return this.conditionStack.pop();\n      } else {\n        return this.conditionStack[0];\n      }\n    },\n\n    /**\n     * return the currently active lexer condition state; when an index\n     * argument is provided it produces the N-th previous condition state,\n     * if available\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    topState: function lexer_topState(n) {\n      n = this.conditionStack.length - 1 - Math.abs(n || 0);\n\n      if (n >= 0) {\n        return this.conditionStack[n];\n      } else {\n        return 'INITIAL';\n      }\n    },\n\n    /**\n     * (internal) determine the lexer rule set which is active for the\n     * currently active lexer condition state\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    _currentRules: function lexer__currentRules() {\n      if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n        return this.conditions[this.conditionStack[this.conditionStack.length - 1]];\n      } else {\n        return this.conditions['INITIAL'];\n      }\n    },\n\n    /**\n     * return the number of states currently on the stack\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    stateStackSize: function lexer_stateStackSize() {\n      return this.conditionStack.length;\n    },\n\n    options: {\n      trackPosition: true,\n      caseInsensitive: true\n    },\n\n    JisonLexerError: JisonLexerError,\n\n    performAction: function lexer__performAction(yy, yyrulenumber, YY_START) {\n      var yy_ = this;\n      var YYSTATE = YY_START;\n\n      switch (yyrulenumber) {\n      case 1:\n        /*! Conditions:: INITIAL */\n        /*! Rule::       \\\\{interp} */\n        debug('matches', this.matches);\n\n        yy_.yytext = yy_.yytext.substring(2, yy_.yytext.length - 1);\n        return 'INTERPOLATION_WRONG';\n        break;\n\n      case 2:\n        /*! Conditions:: INITIAL */\n        /*! Rule::       {interp} */\n        debug('matches', this.matches);\n\n        yy_.yytext = yy_.yytext.substring(2, yy_.yytext.length - 1);\n        return 9;\n        break;\n\n      case 3:\n        /*! Conditions:: INITIAL */\n        /*! Rule::       {interp_start}\\w+ */\n        this.pushState('INTERP_START');\n\n        break;\n\n      case 4:\n        /*! Conditions:: INTERP_START */\n        /*! Rule::       . */\n        if (yy_.yytext == '{') {\n          interpStack.push('}');\n          // this.unput('}')\n        } else if (yy_.yytext == '}') {\n          if (interpStack.length == 0) {\n            // return 9\n          } else if (interpStack.pop() == yy_.yytext) {\n            return 9;\n          } else {\n            throw new Error('Mismatching curly braces');\n          }\n        }\n\n        break;\n\n      case 9:\n        /*! Conditions:: INITIAL */\n        /*! Rule::       (?:#\\[\\s*){tag_name} */\n        '])';\n\n        debug('(?:\\'#[\\'s*){tag_name}');\n        yy_.yytext = this.matches[1];\n        this.pushState('TAG_STARTED');\n        return 4;\n        break;\n\n      case 10:\n        /*! Conditions:: INITIAL */\n        /*! Rule::       (?:#\\[\\s*):{filter_name} */\n        '])';\n\n        yy_.yytext = this.matches[1];\n        this.pushState('TAG_STARTED');\n        return 6;\n        break;\n\n      case 12:\n        /*! Conditions:: TAG_STARTED */\n        /*! Rule::       \\. */\n        this.pushState('CLASSNAME_STARTED');\n\n        return 10;\n        break;\n\n      case 13:\n        /*! Conditions:: TAG_STARTED */\n        /*! Rule::       = */\n        this.popState();\n\n        this.pushState('ASSIGNMENT_STARTED');\n        return 7;\n        break;\n\n      case 15:\n        /*! Conditions:: ASSIGNMENT_STARTED */\n        /*! Rule::       \\[ */\n        ']';\n\n        this.pushState('ASSIGNMENT_STARTED_BRACKET_ADDED');\n        return 13;\n        break;\n\n      case 16:\n        /*! Conditions:: ASSIGNMENT_STARTED_BRACKET_ADDED */\n        /*! Rule::       \\] */\n        this.popState();\n\n        return 13;\n        break;\n\n      case 18:\n        /*! Conditions:: ASSIGNMENT_STARTED */\n        /*! Rule::       \\] */\n        this.popState();\n\n        return 5;\n        break;\n\n      case 19:\n        /*! Conditions:: TAG_STARTED BODY_STARTED */\n        /*! Rule::       \\[ */\n        '])';\n\n        this.pushState('BRACKET_ADDED');\n        return 12;\n        break;\n\n      case 20:\n        /*! Conditions:: TAG_STARTED BODY_STARTED */\n        /*! Rule::       \\[ */\n        '])';\n\n        this.pushState('BRACKET_ADDED');\n        return 'LBRACKET';\n        break;\n\n      case 21:\n        /*! Conditions:: BRACKET_ADDED */\n        /*! Rule::       \\] */\n        this.popState();\n\n        return 'RBRACKET';\n        break;\n\n      case 22:\n        /*! Conditions:: ATTRS_STARTED */\n        /*! Rule::       \\( */\n        '])';\n\n        this.pushState('PARENS_ADDED');\n        return 'LPAREN';\n        break;\n\n      case 23:\n        /*! Conditions:: PARENS_ADDED */\n        /*! Rule::       \\) */\n        this.popState();\n\n        return 'RPAREN';\n        break;\n\n      case 25:\n        /*! Conditions:: TAG_STARTED */\n        /*! Rule::       \\( */\n        ')';\n\n        this.popState();\n        this.pushState('ATTRS_STARTED');\n        break;\n\n      case 26:\n        /*! Conditions:: TAG_STARTED */\n        /*! Rule::       {space} */\n        this.popState();\n\n        this.pushState('BODY_STARTED');\n        break;\n\n      case 27:\n        /*! Conditions:: ATTRS_STARTED */\n        /*! Rule::       \\w+ */\n        debug('<ATTRS_STARTED>\\\\w+');\n\n        debug('yy_.yytext', yy_.yytext);\n        return 12;\n        break;\n\n      case 30:\n        /*! Conditions:: ATTRS_STARTED */\n        /*! Rule::       \\) ? */\n        this.popState();\n\n        this.pushState('BODY_STARTED');\n        break;\n\n      case 33:\n        /*! Conditions:: BODY_STARTED */\n        /*! Rule::       \\] */\n        this.popState();\n\n        return 5;\n        break;\n\n      case 35:\n        /*! Conditions:: CLASSNAME_STARTED */\n        /*! Rule::       {classname} */\n        this.popState();\n\n        return 14;\n        break;\n\n      default:\n        return this.simpleCaseActionClusters[yyrulenumber];\n      }\n    },\n\n    simpleCaseActionClusters: {\n      /*! Conditions:: INITIAL */\n      /*! Rule::       \\\\#\\{ */\n      0: 'BACKSLASH',\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       .+\\\\#\\{.+\\} */\n      5: 8,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       #\\{.+\\} */\n      6: 9,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       .*\\\\# */\n      7: 8,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       {interp} */\n      8: 9,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       (\\w|{space}|[^#])+ */\n      11: 8,\n\n      /*! Conditions:: ASSIGNMENT_STARTED */\n      /*! Rule::       [ '] */\n      14: 13,\n\n      /*! Conditions:: ASSIGNMENT_STARTED ASSIGNMENT_STARTED_BRACKET_ADDED */\n      /*! Rule::       \\w+ */\n      17: 13,\n\n      /*! Conditions:: TAG_STARTED */\n      /*! Rule::       \\] */\n      24: 5,\n\n      /*! Conditions:: ATTRS_STARTED */\n      /*! Rule::       {space}+ */\n      28: 12,\n\n      /*! Conditions:: ATTRS_STARTED */\n      /*! Rule::       [^()\\]]+ */\n      29: 12,\n\n      /*! Conditions:: BODY_STARTED ATTRS_STARTED */\n      /*! Rule::       \\w+ */\n      31: 11,\n\n      /*! Conditions:: BODY_STARTED ATTRS_STARTED */\n      /*! Rule::       {space}+ */\n      32: 11,\n\n      /*! Conditions:: BODY_STARTED */\n      /*! Rule::       .+ */\n      34: 11,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       # */\n      36: 8,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       $ */\n      37: 1\n    },\n\n    rules: [\n      /*  0: */  /^(?:\\\\#\\{)/i,\n      /*  1: */  /^(?:\\\\(#\\{(.+)\\}))/i,\n      /*  2: */  /^(?:(#\\{(.+)\\}))/i,\n      /*  3: */  /^(?:(#\\{)\\w+)/i,\n      /*  4: */  /^(?:.)/i,\n      /*  5: */  /^(?:.+\\\\#\\{.+\\})/i,\n      /*  6: */  /^(?:#\\{.+\\})/i,\n      /*  7: */  /^(?:.*\\\\#)/i,\n      /*  8: */  /^(?:(#\\{(.+)\\}))/i,\n      /*  9: */  /^(?:(?:#\\[\\s*)((a|abbr|acronym|address|applet|area|article|aside|audio|b|base|basefont|bdi|bdo|bgsound|big|blink|blockquote|body|br|button|canvas|caption|center|cite|code|col|colgroup|content|data|datalist|dd|del|details|dfn|dialog|dir|div|dl|dt|em|embed|fieldset|figcaption|figure|font|foo|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hgroup|hr|html|i|iframe|image|img|input|ins|kbd|keygen|label|legend|li|link|main|map|mark|marquee|math|menu|menuitem|meta|meter|nav|nobr|noembed|noframes|noscript|object|ol|optgroup|option|output|p|param|picture|plaintext|portal|pre|progress|q|rb|rp|rt|rtc|ruby|s|samp|section|select|shadow|slot|small|source|spacer|span|strike|strong|sub|summary|sup|svg|table|tbody|td|template|textarea|tfoot|th|thead|time|title|tr|track|tt|u|ul|var|video|wbr|xmp)\\b))/i,\n      /* 10: */  /^(?:(?:#\\[\\s*):((cdata)\\b))/i,\n      /* 11: */  /^(?:(\\w|([   -​\\u2028\\u2029　])|[^#])+)/i,\n      /* 12: */  /^(?:\\.)/i,\n      /* 13: */  /^(?:=)/i,\n      /* 14: */  /^(?:[ '])/i,\n      /* 15: */  /^(?:\\[)/i,\n      /* 16: */  /^(?:\\])/i,\n      /* 17: */  /^(?:\\w+)/i,\n      /* 18: */  /^(?:\\])/i,\n      /* 19: */  /^(?:\\[)/i,\n      /* 20: */  /^(?:\\[)/i,\n      /* 21: */  /^(?:\\])/i,\n      /* 22: */  /^(?:\\()/i,\n      /* 23: */  /^(?:\\))/i,\n      /* 24: */  /^(?:\\])/i,\n      /* 25: */  /^(?:\\()/i,\n      /* 26: */  /^(?:([   -​\\u2028\\u2029　]))/i,\n      /* 27: */  /^(?:\\w+)/i,\n      /* 28: */  /^(?:([   -​\\u2028\\u2029　])+)/i,\n      /* 29: */  /^(?:[^()\\]]+)/i,\n      /* 30: */  /^(?:\\) ?)/i,\n      /* 31: */  /^(?:\\w+)/i,\n      /* 32: */  /^(?:([   -​\\u2028\\u2029　])+)/i,\n      /* 33: */  /^(?:\\])/i,\n      /* 34: */  /^(?:.+)/i,\n      /* 35: */  /^(?:([^\\W\\d]+[\\w\\-]*))/i,\n      /* 36: */  /^(?:#)/i,\n      /* 37: */  /^(?:$)/i\n    ],\n\n    conditions: {\n      'AFTER_TAG_START': {\n        rules: [],\n        inclusive: false\n      },\n\n      'AFTER_TAG_START_END': {\n        rules: [],\n        inclusive: false\n      },\n\n      'ASSIGNMENT_STARTED': {\n        rules: [14, 15, 17, 18],\n        inclusive: false\n      },\n\n      'INITIAL': {\n        rules: [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 36, 37],\n        inclusive: true\n      },\n\n      'INTERP_START': {\n        rules: [4],\n        inclusive: false\n      },\n\n      'TAG_STARTED': {\n        rules: [12, 13, 19, 20, 24, 25, 26],\n        inclusive: false\n      },\n\n      'ASSIGNMENT_STARTED_BRACKET_ADDED': {\n        rules: [16, 17],\n        inclusive: false\n      },\n\n      'BODY_STARTED': {\n        rules: [19, 20, 31, 32, 33, 34],\n        inclusive: false\n      },\n\n      'BRACKET_ADDED': {\n        rules: [21],\n        inclusive: false\n      },\n\n      'ATTRS_STARTED': {\n        rules: [22, 27, 28, 29, 30, 31, 32],\n        inclusive: false\n      },\n\n      'PARENS_ADDED': {\n        rules: [23],\n        inclusive: false\n      },\n\n      'CLASSNAME_STARTED': {\n        rules: [35],\n        inclusive: false\n      }\n    }\n  };\n\n  return lexer;\n}();\nparser.lexer = lexer;\n\nimport assert from \"assert\"\nimport util from \"util\"\nimport {} from \"@foo-dog/utils\"\nimport _ from \"lodash\"\nimport debugFunc from 'debug'\nimport parseAttrs from './attrs.js'\nimport parseInline from './inline.js'\nimport { AttrResolver } from '@foo-dog/attrs'\n\nconst TEXT_TAGS_ALLOW_SUB_TAGS = true\n\nconst debug = debugFunc('pug-line-lexer:inline')\n\nlet tagAlreadyFound = false\nlet obj\nvar lparenOpen = false\nconst keysToMergeText = ['therest']\nconst tags = []\nconst interpStack = []\n\nconst adam = \"div\"\nvar recursive = 1\n\nfunction rank(type1, type2) {\n  if (type2 === 'text') {\n    return type1\n  }\n  else if (type1 === type2) {\n    return type1\n  }\n  else if (type1 == 'tag' && type2 == 'tag_with_multiline_attrs') {\n    return type2\n  }\n  else if (type1 == 'tag_with_multiline_attrs' && type2 == 'tag') {\n    return type1\n  }\n  else {\n    return type1.concat(type2)\n  }\n} \n\nfunction merge(obj, src) {\n  debug('merging', obj, src)\n\n  if (Array.isArray(src) && src.length > 0)\n    src = src.reduce(merge)\n\n  if (util.isDeepStrictEqual(src, [ { therest: '' } ]))\n     return obj\n\n  const ret = _.mergeWith(obj, src, function (objValue, srcValue, key, object, source, stack) {\n    debug('merging', 'inside _mergeWith', key, objValue, srcValue)\n    if (objValue == undefined && srcValue == undefined) {\n       return {}\n    }\n    if (objValue == undefined) {\n       return srcValue\n    }\n    if (srcValue == undefined) {\n       return objValue\n    }\n    if (objValue != undefined && srcValue != undefined) {\n      if (keysToMergeText.includes(key)) {\n         return objValue + srcValue\n      }\n      else {\n         return rank(objValue, srcValue)\n      }\n    }\n  })\n  debug('merging', ' returning', ret)\n  return ret\n  //  return Object.assign(obj, src);\n}\n\nparser.main = function () {\n  \n  tagAlreadyFound = false\n  lparenOpen = false\n\n  function test(input, expected, strict = true ) {\n    tagAlreadyFound = false\n    lparenOpen = false\n    debug(`\\nTesting '${input}'...`)\n    var actual = parser.parse(input)\n    debug(input + ' ==> ', util.inspect(actual, false, 8))\n    \n    let compareFunc\n    if (strict)\n      compareFunc = assert.deepEqual\n    else \n      compareFunc = dyp\n\n    // fs.writeFileSync('actual.json', JSON.stringify(actual))\n    // fs.writeFileSync('expected.json', JSON.stringify(expected))\n\n    compareFunc.call({}, actual, expected)\n  }\n\n\n// TODO:\ntest(\"#[a.rho(href='#', class='rho--modifier') with inline link]\", [\n  {\n    type: 'tag',\n    name: 'a',\n    classes: [ 'rho' ],\n    attrs: [\n      { name: 'href', val: \"'#'\" },\n      { name: 'class', val: \"'rho--modifier'\" }\n    ],\n    val: 'with inline link'\n  }\n])\ntest(\"Some text #[a.rho(href='#', class='rho--modifier')]\", [\n  { type: 'text', val: 'Some text ' },\n  {\n    type: 'tag',\n    name: 'a',\n    classes: [ 'rho' ],\n    attrs: [\n      { name: 'href', val: \"'#'\" },\n      { name: 'class', val: \"'rho--modifier'\" }\n    ],\n    val: ''\n  }\n])\ntest(\"Some text #[a.rho(href='#', class='rho--modifier') with inline link]\", [\n  { type: 'text', val: 'Some text ' },\n  {\n    type: 'tag',\n    name: 'a',\n    classes: [ 'rho' ],\n    attrs: [\n      { name: 'href', val: \"'#'\" },\n      { name: 'class', val: \"'rho--modifier'\" }\n    ],\n    val: 'with inline link'\n  }\n])\n\n\n\ntest('Written with love by #{author}', [\n  { type: 'text', val: 'Written with love by ' },\n  { type: 'interp', val: 'author' }\n])\ntest('This will be safe: #{theGreat}', [\n  { type: 'text', val: 'This will be safe: ' },\n  { type: 'interp', val: 'theGreat' }\n])\ntest('No escaping for #{\\'}\\'}!', [\n  { type: 'text', val: 'No escaping for ' },\n  { type: 'interp', val: \"'}'\" },\n  { type: 'text', val: '!' }\n])\ntest('Escaping works with \\\\#{interpolation}', [ { type: 'text', val: 'Escaping works with \\\\#{interpolation}' }])\n\n\ntest('#[br]', [{ type: 'tag', name: 'br' }])\ntest('#[strong mighty]', [{ type: 'tag', name: 'strong', val: 'mighty' }])\ntest('A #[strong strongly worded phrase] that cannot be #[em ignored].', [\n  { type: 'text', val: 'A ' },\n  { type: 'tag', name: 'strong', val: 'strongly worded phrase' },\n  { type: 'text', val: ' that cannot be ' },\n  { type: 'tag', name: 'em', val: 'ignored' },\n  { type: 'text', val: '.' }\n])\ntest('This is a very long and boring paragraph that spans multiple lines. Suddenly there is a #[strong strongly worded phrase] that cannot be #[em ignored].', [\n  {\n    type: 'text',\n    val: 'This is a very long and boring paragraph that spans multiple lines. Suddenly there is a '\n  },\n  { type: 'tag', name: 'strong', val: 'strongly worded phrase' },\n  { type: 'text', val: ' that cannot be ' },\n  { type: 'tag', name: 'em', val: 'ignored' },\n  { type: 'text', val: '.' }\n])\n// test('And here\\'s an example of an interpolated tag with an attribute: #[q(lang=\"es\") ¡Hola Mundo!]', [\n//   {\n//     type: 'text',\n//     val: \"And here's an example of an interpolated tag with an attribute: \"\n//   },\n//   { type: 'tag', name: 'q', attrs: [ { name: 'lang', val: '\"es\"' } ] },\n//   { type: 'text', val: ' ¡Hola Mundo!]' }\n// ])\n\ntry {\n  test('#[strong a}', {})\n  fail('expected exception')\n} catch (expected) {}\n\ntest('before #[:cdata inside] after', [\n  { type: 'text', val: 'before ' },\n  { type: 'filter', name: 'cdata', val: 'inside' },\n  { type: 'text', val: ' after' }\n])\ntest('bing #[strong foo] bong', [\n  { type: 'text', val: 'bing ' },\n  { type: 'tag', name: 'strong', val: 'foo' },\n  { type: 'text', val: ' bong' }\n])\n\ntest(\"bing #[strong foo] #[strong= '[foo]'] bong\",  [\n  { type: 'text', val: 'bing ' },\n  { type: 'tag', name: 'strong', val: 'foo' },\n  { type: 'text', val: ' ' },\n  { type: 'tag', name: 'strong', assignment: \" '[foo]'\" },\n  { type: 'text', val: ' bong' }\n])\n\n// TODO:\n// test(\"bing #[- var foo = 'foo]'] bong\", {})\n\ntest('\\\\#[strong escaped]', [ { type: 'text', val: '\\\\#[strong escaped]' } ])\ntest('\\\\#[#[strong escaped]', [\n  { type: 'text', val: '\\\\#[' },\n  { type: 'tag', name: 'strong', val: 'escaped' }\n])\n\n\n// TODO: \n// test(\"This also works #[+linkit('http://www.bing.com')] so hurrah for Pug\", {})\n\n\n};\n\n\nfunction Parser() {\n    this.yy = {};\n}\nParser.prototype = parser;\nparser.Parser = Parser;\n\nfunction yyparse() {\n    return parser.parse.apply(parser, arguments);\n}\n\n\n\nexport default {\n    parser,\n    Parser,\n    parse: yyparse,\n    \n};\n\n","\n/* parser generated by jison 0.6.1-216 */\n\n/*\n * Returns a Parser object of the following structure:\n *\n *  Parser: {\n *    yy: {}     The so-called \"shared state\" or rather the *source* of it;\n *               the real \"shared state\" `yy` passed around to\n *               the rule actions, etc. is a derivative/copy of this one,\n *               not a direct reference!\n *  }\n *\n *  Parser.prototype: {\n *    yy: {},\n *    EOF: 1,\n *    TERROR: 2,\n *\n *    trace: function(errorMessage, ...),\n *\n *    JisonParserError: function(msg, hash),\n *\n *    quoteName: function(name),\n *               Helper function which can be overridden by user code later on: put suitable\n *               quotes around literal IDs in a description string.\n *\n *    originalQuoteName: function(name),\n *               The basic quoteName handler provided by JISON.\n *               `cleanupAfterParse()` will clean up and reset `quoteName()` to reference this function\n *               at the end of the `parse()`.\n *\n *    describeSymbol: function(symbol),\n *               Return a more-or-less human-readable description of the given symbol, when\n *               available, or the symbol itself, serving as its own 'description' for lack\n *               of something better to serve up.\n *\n *               Return NULL when the symbol is unknown to the parser.\n *\n *    symbols_: {associative list: name ==> number},\n *    terminals_: {associative list: number ==> name},\n *    nonterminals: {associative list: rule-name ==> {associative list: number ==> rule-alt}},\n *    terminal_descriptions_: (if there are any) {associative list: number ==> description},\n *    productions_: [...],\n *\n *    performAction: function parser__performAction(yytext, yyleng, yylineno, yyloc, yystate, yysp, yyvstack, yylstack, yystack, yysstack),\n *\n *               The function parameters and `this` have the following value/meaning:\n *               - `this`    : reference to the `yyval` internal object, which has members (`$` and `_$`)\n *                             to store/reference the rule value `$$` and location info `@$`.\n *\n *                 One important thing to note about `this` a.k.a. `yyval`: every *reduce* action gets\n *                 to see the same object via the `this` reference, i.e. if you wish to carry custom\n *                 data from one reduce action through to the next within a single parse run, then you\n *                 may get nasty and use `yyval` a.k.a. `this` for storing you own semi-permanent data.\n *\n *                 `this.yy` is a direct reference to the `yy` shared state object.\n *\n *                 `%parse-param`-specified additional `parse()` arguments have been added to this `yy`\n *                 object at `parse()` start and are therefore available to the action code via the\n *                 same named `yy.xxxx` attributes (where `xxxx` represents a identifier name from\n *                 the %parse-param` list.\n *\n *               - `yytext`  : reference to the lexer value which belongs to the last lexer token used\n *                             to match this rule. This is *not* the look-ahead token, but the last token\n *                             that's actually part of this rule.\n *\n *                 Formulated another way, `yytext` is the value of the token immediately preceeding\n *                 the current look-ahead token.\n *                 Caveats apply for rules which don't require look-ahead, such as epsilon rules.\n *\n *               - `yyleng`  : ditto as `yytext`, only now for the lexer.yyleng value.\n *\n *               - `yylineno`: ditto as `yytext`, only now for the lexer.yylineno value.\n *\n *               - `yyloc`   : ditto as `yytext`, only now for the lexer.yylloc lexer token location info.\n *\n *                               WARNING: since jison 0.4.18-186 this entry may be NULL/UNDEFINED instead\n *                               of an empty object when no suitable location info can be provided.\n *\n *               - `yystate` : the current parser state number, used internally for dispatching and\n *                               executing the action code chunk matching the rule currently being reduced.\n *\n *               - `yysp`    : the current state stack position (a.k.a. 'stack pointer')\n *\n *                 This one comes in handy when you are going to do advanced things to the parser\n *                 stacks, all of which are accessible from your action code (see the next entries below).\n *\n *                 Also note that you can access this and other stack index values using the new double-hash\n *                 syntax, i.e. `##$ === ##0 === yysp`, while `##1` is the stack index for all things\n *                 related to the first rule term, just like you have `$1`, `@1` and `#1`.\n *                 This is made available to write very advanced grammar action rules, e.g. when you want\n *                 to investigate the parse state stack in your action code, which would, for example,\n *                 be relevant when you wish to implement error diagnostics and reporting schemes similar\n *                 to the work described here:\n *\n *                 + Pottier, F., 2016. Reachability and error diagnosis in LR(1) automata.\n *                   In Journées Francophones des Languages Applicatifs.\n *\n *                 + Jeffery, C.L., 2003. Generating LR syntax error messages from examples.\n *                   ACM Transactions on Programming Languages and Systems (TOPLAS), 25(5), pp.631–640.\n *\n *               - `yyrulelength`: the current rule's term count, i.e. the number of entries occupied on the stack.\n *\n *                 This one comes in handy when you are going to do advanced things to the parser\n *                 stacks, all of which are accessible from your action code (see the next entries below).\n *\n *               - `yyvstack`: reference to the parser value stack. Also accessed via the `$1` etc.\n *                             constructs.\n *\n *               - `yylstack`: reference to the parser token location stack. Also accessed via\n *                             the `@1` etc. constructs.\n *\n *                             WARNING: since jison 0.4.18-186 this array MAY contain slots which are\n *                             UNDEFINED rather than an empty (location) object, when the lexer/parser\n *                             action code did not provide a suitable location info object when such a\n *                             slot was filled!\n *\n *               - `yystack` : reference to the parser token id stack. Also accessed via the\n *                             `#1` etc. constructs.\n *\n *                 Note: this is a bit of a **white lie** as we can statically decode any `#n` reference to\n *                 its numeric token id value, hence that code wouldn't need the `yystack` but *you* might\n *                 want access this array for your own purposes, such as error analysis as mentioned above!\n *\n *                 Note that this stack stores the current stack of *tokens*, that is the sequence of\n *                 already parsed=reduced *nonterminals* (tokens representing rules) and *terminals*\n *                 (lexer tokens *shifted* onto the stack until the rule they belong to is found and\n *                 *reduced*.\n *\n *               - `yysstack`: reference to the parser state stack. This one carries the internal parser\n *                             *states* such as the one in `yystate`, which are used to represent\n *                             the parser state machine in the *parse table*. *Very* *internal* stuff,\n *                             what can I say? If you access this one, you're clearly doing wicked things\n *\n *               - `...`     : the extra arguments you specified in the `%parse-param` statement in your\n *                             grammar definition file.\n *\n *    table: [...],\n *               State transition table\n *               ----------------------\n *\n *               index levels are:\n *               - `state`  --> hash table\n *               - `symbol` --> action (number or array)\n *\n *                 If the `action` is an array, these are the elements' meaning:\n *                 - index [0]: 1 = shift, 2 = reduce, 3 = accept\n *                 - index [1]: GOTO `state`\n *\n *                 If the `action` is a number, it is the GOTO `state`\n *\n *    defaultActions: {...},\n *\n *    parseError: function(str, hash, ExceptionClass),\n *    yyError: function(str, ...),\n *    yyRecovering: function(),\n *    yyErrOk: function(),\n *    yyClearIn: function(),\n *\n *    constructParseErrorInfo: function(error_message, exception_object, expected_token_set, is_recoverable),\n *               Helper function **which will be set up during the first invocation of the `parse()` method**.\n *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.\n *               See it's use in this parser kernel in many places; example usage:\n *\n *                   var infoObj = parser.constructParseErrorInfo('fail!', null,\n *                                     parser.collect_expected_token_set(state), true);\n *                   var retVal = parser.parseError(infoObj.errStr, infoObj, parser.JisonParserError);\n *\n *    originalParseError: function(str, hash, ExceptionClass),\n *               The basic `parseError` handler provided by JISON.\n *               `cleanupAfterParse()` will clean up and reset `parseError()` to reference this function\n *               at the end of the `parse()`.\n *\n *    options: { ... parser %options ... },\n *\n *    parse: function(input[, args...]),\n *               Parse the given `input` and return the parsed value (or `true` when none was provided by\n *               the root action, in which case the parser is acting as a *matcher*).\n *               You MAY use the additional `args...` parameters as per `%parse-param` spec of this grammar:\n *               these extra `args...` are added verbatim to the `yy` object reference as member variables.\n *\n *               WARNING:\n *               Parser's additional `args...` parameters (via `%parse-param`) MAY conflict with\n *               any attributes already added to `yy` by the jison run-time;\n *               when such a collision is detected an exception is thrown to prevent the generated run-time\n *               from silently accepting this confusing and potentially hazardous situation!\n *\n *               The lexer MAY add its own set of additional parameters (via the `%parse-param` line in\n *               the lexer section of the grammar spec): these will be inserted in the `yy` shared state\n *               object and any collision with those will be reported by the lexer via a thrown exception.\n *\n *    cleanupAfterParse: function(resultValue, invoke_post_methods, do_not_nuke_errorinfos),\n *               Helper function **which will be set up during the first invocation of the `parse()` method**.\n *               This helper API is invoked at the end of the `parse()` call, unless an exception was thrown\n *               and `%options no-try-catch` has been defined for this grammar: in that case this helper MAY\n *               be invoked by calling user code to ensure the `post_parse` callbacks are invoked and\n *               the internal parser gets properly garbage collected under these particular circumstances.\n *\n *    yyMergeLocationInfo: function(first_index, last_index, first_yylloc, last_yylloc, dont_look_back),\n *               Helper function **which will be set up during the first invocation of the `parse()` method**.\n *               This helper API can be invoked to calculate a spanning `yylloc` location info object.\n *\n *               Note: %epsilon rules MAY specify no `first_index` and `first_yylloc`, in which case\n *               this function will attempt to obtain a suitable location marker by inspecting the location stack\n *               backwards.\n *\n *               For more info see the documentation comment further below, immediately above this function's\n *               implementation.\n *\n *    lexer: {\n *        yy: {...},           A reference to the so-called \"shared state\" `yy` once\n *                             received via a call to the `.setInput(input, yy)` lexer API.\n *        EOF: 1,\n *        ERROR: 2,\n *        JisonLexerError: function(msg, hash),\n *        parseError: function(str, hash, ExceptionClass),\n *        setInput: function(input, [yy]),\n *        input: function(),\n *        unput: function(str),\n *        more: function(),\n *        reject: function(),\n *        less: function(n),\n *        pastInput: function(n),\n *        upcomingInput: function(n),\n *        showPosition: function(),\n *        test_match: function(regex_match_array, rule_index, ...),\n *        next: function(...),\n *        lex: function(...),\n *        begin: function(condition),\n *        pushState: function(condition),\n *        popState: function(),\n *        topState: function(),\n *        _currentRules: function(),\n *        stateStackSize: function(),\n *        cleanupAfterLex: function()\n *\n *        options: { ... lexer %options ... },\n *\n *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START, ...),\n *        rules: [...],\n *        conditions: {associative list: name ==> set},\n *    }\n *  }\n *\n *\n *  token location info (@$, _$, etc.): {\n *    first_line: n,\n *    last_line: n,\n *    first_column: n,\n *    last_column: n,\n *    range: [start_number, end_number]\n *               (where the numbers are indexes into the input string, zero-based)\n *  }\n *\n * ---\n *\n * The `parseError` function receives a 'hash' object with these members for lexer and\n * parser errors:\n *\n *  {\n *    text:        (matched text)\n *    token:       (the produced terminal token, if any)\n *    token_id:    (the produced terminal token numeric ID, if any)\n *    line:        (yylineno)\n *    loc:         (yylloc)\n *  }\n *\n * parser (grammar) errors will also provide these additional members:\n *\n *  {\n *    expected:    (array describing the set of expected tokens;\n *                  may be UNDEFINED when we cannot easily produce such a set)\n *    state:       (integer (or array when the table includes grammar collisions);\n *                  represents the current internal state of the parser kernel.\n *                  can, for example, be used to pass to the `collect_expected_token_set()`\n *                  API to obtain the expected token set)\n *    action:      (integer; represents the current internal action which will be executed)\n *    new_state:   (integer; represents the next/planned internal state, once the current\n *                  action has executed)\n *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule\n *                  available for this particular error)\n *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used,\n *                  for instance, for advanced error analysis and reporting)\n *    value_stack: (array: the current parser LALR/LR internal `$$` value stack; this can be used,\n *                  for instance, for advanced error analysis and reporting)\n *    location_stack: (array: the current parser LALR/LR internal location stack; this can be used,\n *                  for instance, for advanced error analysis and reporting)\n *    yy:          (object: the current parser internal \"shared state\" `yy`\n *                  as is also available in the rule actions; this can be used,\n *                  for instance, for advanced error analysis and reporting)\n *    lexer:       (reference to the current lexer instance used by the parser)\n *    parser:      (reference to the current parser instance)\n *  }\n *\n * while `this` will reference the current parser instance.\n *\n * When `parseError` is invoked by the lexer, `this` will still reference the related *parser*\n * instance, while these additional `hash` fields will also be provided:\n *\n *  {\n *    lexer:       (reference to the current lexer instance which reported the error)\n *  }\n *\n * When `parseError` is invoked by the parser due to a **JavaScript exception** being fired\n * from either the parser or lexer, `this` will still reference the related *parser*\n * instance, while these additional `hash` fields will also be provided:\n *\n *  {\n *    exception:   (reference to the exception thrown)\n *  }\n *\n * Please do note that in the latter situation, the `expected` field will be omitted as\n * this type of failure is assumed not to be due to *parse errors* but rather due to user\n * action code in either parser or lexer failing unexpectedly.\n *\n * ---\n *\n * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.\n * These options are available:\n *\n * ### options which are global for all parser instances\n *\n *  Parser.pre_parse: function(yy)\n *                 optional: you can specify a pre_parse() function in the chunk following\n *                 the grammar, i.e. after the last `%%`.\n *  Parser.post_parse: function(yy, retval, parseInfo) { return retval; }\n *                 optional: you can specify a post_parse() function in the chunk following\n *                 the grammar, i.e. after the last `%%`. When it does not return any value,\n *                 the parser will return the original `retval`.\n *\n * ### options which can be set up per parser instance\n *\n *  yy: {\n *      pre_parse:  function(yy)\n *                 optional: is invoked before the parse cycle starts (and before the first\n *                 invocation of `lex()`) but immediately after the invocation of\n *                 `parser.pre_parse()`).\n *      post_parse: function(yy, retval, parseInfo) { return retval; }\n *                 optional: is invoked when the parse terminates due to success ('accept')\n *                 or failure (even when exceptions are thrown).\n *                 `retval` contains the return value to be produced by `Parser.parse()`;\n *                 this function can override the return value by returning another.\n *                 When it does not return any value, the parser will return the original\n *                 `retval`.\n *                 This function is invoked immediately before `parser.post_parse()`.\n *\n *      parseError: function(str, hash, ExceptionClass)\n *                 optional: overrides the default `parseError` function.\n *      quoteName: function(name),\n *                 optional: overrides the default `quoteName` function.\n *  }\n *\n *  parser.lexer.options: {\n *      pre_lex:  function()\n *                 optional: is invoked before the lexer is invoked to produce another token.\n *                 `this` refers to the Lexer object.\n *      post_lex: function(token) { return token; }\n *                 optional: is invoked when the lexer has produced a token `token`;\n *                 this function can override the returned token value by returning another.\n *                 When it does not return any (truthy) value, the lexer will return\n *                 the original `token`.\n *                 `this` refers to the Lexer object.\n *\n *      ranges: boolean\n *                 optional: `true` ==> token location info will include a .range[] member.\n *      flex: boolean\n *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested\n *                 exhaustively to find the longest match.\n *      backtrack_lexer: boolean\n *                 optional: `true` ==> lexer regexes are tested in order and for invoked;\n *                 the lexer terminates the scan when a token is returned by the action code.\n *      xregexp: boolean\n *                 optional: `true` ==> lexer rule regexes are \"extended regex format\" requiring the\n *                 `XRegExp` library. When this `%option` has not been specified at compile time, all lexer\n *                 rule regexes have been written as standard JavaScript RegExp expressions.\n *  }\n */\n\n\n\n\n\n// See also:\n// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508\n// but we keep the prototype.constructor and prototype.name assignment lines too for compatibility\n// with userland code which might access the derived class in a 'classic' way.\nfunction JisonParserError(msg, hash) {\n    Object.defineProperty(this, 'name', {\n        enumerable: false,\n        writable: false,\n        value: 'JisonParserError'\n    });\n\n    if (msg == null) msg = '???';\n\n    Object.defineProperty(this, 'message', {\n        enumerable: false,\n        writable: true,\n        value: msg\n    });\n\n    this.hash = hash;\n\n    var stacktrace;\n    if (hash && hash.exception instanceof Error) {\n        var ex2 = hash.exception;\n        this.message = ex2.message || msg;\n        stacktrace = ex2.stack;\n    }\n    if (!stacktrace) {\n        if (Error.hasOwnProperty('captureStackTrace')) {        // V8/Chrome engine\n            Error.captureStackTrace(this, this.constructor);\n        } else {\n            stacktrace = (new Error(msg)).stack;\n        }\n    }\n    if (stacktrace) {\n        Object.defineProperty(this, 'stack', {\n            enumerable: false,\n            writable: false,\n            value: stacktrace\n        });\n    }\n}\n\nif (typeof Object.setPrototypeOf === 'function') {\n    Object.setPrototypeOf(JisonParserError.prototype, Error.prototype);\n} else {\n    JisonParserError.prototype = Object.create(Error.prototype);\n}\nJisonParserError.prototype.constructor = JisonParserError;\nJisonParserError.prototype.name = 'JisonParserError';\n\n\n\n\n        // helper: reconstruct the productions[] table\n        function bp(s) {\n            var rv = [];\n            var p = s.pop;\n            var r = s.rule;\n            for (var i = 0, l = p.length; i < l; i++) {\n                rv.push([\n                    p[i],\n                    r[i]\n                ]);\n            }\n            return rv;\n        }\n    \n\n\n\n\n        // helper: reconstruct the 'goto' table\n        function bt(s) {\n            var rv = [];\n            var d = s.len;\n            var y = s.symbol;\n            var t = s.type;\n            var a = s.state;\n            var m = s.mode;\n            var g = s.goto;\n            for (var i = 0, l = d.length; i < l; i++) {\n                var n = d[i];\n                var q = {};\n                for (var j = 0; j < n; j++) {\n                    var z = y.shift();\n                    switch (t.shift()) {\n                    case 2:\n                        q[z] = [\n                            m.shift(),\n                            g.shift()\n                        ];\n                        break;\n\n                    case 0:\n                        q[z] = a.shift();\n                        break;\n\n                    default:\n                        // type === 1: accept\n                        q[z] = [\n                            3\n                        ];\n                    }\n                }\n                rv.push(q);\n            }\n            return rv;\n        }\n    \n\n\n        // helper: runlength encoding with increment step: code, length: step (default step = 0)\n        // `this` references an array\n        function s(c, l, a) {\n            a = a || 0;\n            for (var i = 0; i < l; i++) {\n                this.push(c);\n                c += a;\n            }\n        }\n\n        // helper: duplicate sequence from *relative* offset and length.\n        // `this` references an array\n        function c(i, l) {\n            i = this.length - i;\n            for (l += i; i < l; i++) {\n                this.push(this[i]);\n            }\n        }\n\n        // helper: unpack an array using helpers and data, all passed in an array argument 'a'.\n        function u(a) {\n            var rv = [];\n            for (var i = 0, l = a.length; i < l; i++) {\n                var e = a[i];\n                // Is this entry a helper function?\n                if (typeof e === 'function') {\n                    i++;\n                    e.apply(rv, a[i]);\n                } else {\n                    rv.push(e);\n                }\n            }\n            return rv;\n        }\n    \n\nvar parser = {\n    // Code Generator Information Report\n    // ---------------------------------\n    //\n    // Options:\n    //\n    //   default action mode: ............. [\"classic\",\"merge\"]\n    //   test-compile action mode: ........ \"parser:*,lexer:*\"\n    //   try..catch: ...................... true\n    //   default resolve on conflict: ..... true\n    //   on-demand look-ahead: ............ false\n    //   error recovery token skip maximum: 3\n    //   yyerror in parse actions is: ..... NOT recoverable,\n    //   yyerror in lexer actions and other non-fatal lexer are:\n    //   .................................. NOT recoverable,\n    //   debug grammar/output: ............ false\n    //   has partial LR conflict upgrade:   true\n    //   rudimentary token-stack support:   true\n    //   parser table compression mode: ... 2\n    //   export debug tables: ............. false\n    //   export *all* tables: ............. false\n    //   module type: ..................... es\n    //   parser engine type: .............. lalr\n    //   output main() in the module: ..... true\n    //   has user-specified main(): ....... false\n    //   has user-specified require()/import modules for main():\n    //   .................................. false\n    //   number of expected conflicts: .... 0\n    //\n    //\n    // Parser Analysis flags:\n    //\n    //   no significant actions (parser is a language matcher only):\n    //   .................................. false\n    //   uses yyleng: ..................... false\n    //   uses yylineno: ................... false\n    //   uses yytext: ..................... false\n    //   uses yylloc: ..................... false\n    //   uses ParseError API: ............. false\n    //   uses YYERROR: .................... false\n    //   uses YYRECOVERING: ............... false\n    //   uses YYERROK: .................... false\n    //   uses YYCLEARIN: .................. false\n    //   tracks rule values: .............. true\n    //   assigns rule values: ............. true\n    //   uses location tracking: .......... false\n    //   assigns location: ................ false\n    //   uses yystack: .................... false\n    //   uses yysstack: ................... false\n    //   uses yysp: ....................... true\n    //   uses yyrulelength: ............... false\n    //   uses yyMergeLocationInfo API: .... false\n    //   has error recovery: .............. false\n    //   has error reporting: ............. false\n    //\n    // --------- END OF REPORT -----------\n\ntrace: function no_op_trace() { },\nJisonParserError: JisonParserError,\nyy: {},\noptions: {\n  type: \"lalr\",\n  hasPartialLrUpgradeOnConflict: true,\n  errorRecoveryTokenDiscardCount: 3,\n  tokenStack: true,\n  ebnf: true\n},\nsymbols_: {\n  \"$accept\": 0,\n  \"$end\": 1,\n  \"COMMA\": 10,\n  \"EOF\": 1,\n  \"EQ\": 4,\n  \"NAME\": 3,\n  \"PLUS\": 8,\n  \"SPACE\": 9,\n  \"SPREAD\": 5,\n  \"VAL\": 6,\n  \"VAR\": 7,\n  \"attr\": 13,\n  \"attrs\": 12,\n  \"attrs_group\": 15,\n  \"attrs_group2\": 16,\n  \"error\": 2,\n  \"start\": 11,\n  \"val\": 14\n},\nterminals_: {\n  1: \"EOF\",\n  2: \"error\",\n  3: \"NAME\",\n  4: \"EQ\",\n  5: \"SPREAD\",\n  6: \"VAL\",\n  7: \"VAR\",\n  8: \"PLUS\",\n  9: \"SPACE\",\n  10: \"COMMA\"\n},\nTERROR: 2,\n    EOF: 1,\n\n    // internals: defined here so the object *structure* doesn't get modified by parse() et al,\n    // thus helping JIT compilers like Chrome V8.\n    originalQuoteName: null,\n    originalParseError: null,\n    cleanupAfterParse: null,\n    constructParseErrorInfo: null,\n    yyMergeLocationInfo: null,\n\n    __reentrant_call_depth: 0,      // INTERNAL USE ONLY\n    __error_infos: [],              // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup\n    __error_recovery_infos: [],     // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup\n\n    // APIs which will be set up depending on user action code analysis:\n    //yyRecovering: 0,\n    //yyErrOk: 0,\n    //yyClearIn: 0,\n\n    // Helper APIs\n    // -----------\n\n    // Helper function which can be overridden by user code later on: put suitable quotes around\n    // literal IDs in a description string.\n    quoteName: function parser_quoteName(id_str) {\n        return '\"' + id_str + '\"';\n    },\n\n    // Return the name of the given symbol (terminal or non-terminal) as a string, when available.\n    //\n    // Return NULL when the symbol is unknown to the parser.\n    getSymbolName: function parser_getSymbolName(symbol) {\n        if (this.terminals_[symbol]) {\n            return this.terminals_[symbol];\n        }\n\n        // Otherwise... this might refer to a RULE token i.e. a non-terminal: see if we can dig that one up.\n        //\n        // An example of this may be where a rule's action code contains a call like this:\n        //\n        //      parser.getSymbolName(#$)\n        //\n        // to obtain a human-readable name of the current grammar rule.\n        var s = this.symbols_;\n        for (var key in s) {\n            if (s[key] === symbol) {\n                return key;\n            }\n        }\n        return null;\n    },\n\n    // Return a more-or-less human-readable description of the given symbol, when available,\n    // or the symbol itself, serving as its own 'description' for lack of something better to serve up.\n    //\n    // Return NULL when the symbol is unknown to the parser.\n    describeSymbol: function parser_describeSymbol(symbol) {\n        if (symbol !== this.EOF && this.terminal_descriptions_ && this.terminal_descriptions_[symbol]) {\n            return this.terminal_descriptions_[symbol];\n        }\n        else if (symbol === this.EOF) {\n            return 'end of input';\n        }\n        var id = this.getSymbolName(symbol);\n        if (id) {\n            return this.quoteName(id);\n        }\n        return null;\n    },\n\n    // Produce a (more or less) human-readable list of expected tokens at the point of failure.\n    //\n    // The produced list may contain token or token set descriptions instead of the tokens\n    // themselves to help turning this output into something that easier to read by humans\n    // unless `do_not_describe` parameter is set, in which case a list of the raw, *numeric*,\n    // expected terminals and nonterminals is produced.\n    //\n    // The returned list (array) will not contain any duplicate entries.\n    collect_expected_token_set: function parser_collect_expected_token_set(state, do_not_describe) {\n        var TERROR = this.TERROR;\n        var tokenset = [];\n        var check = {};\n        // Has this (error?) state been outfitted with a custom expectations description text for human consumption?\n        // If so, use that one instead of the less palatable token set.\n        if (!do_not_describe && this.state_descriptions_ && this.state_descriptions_[state]) {\n            return [\n                this.state_descriptions_[state]\n            ];\n        }\n        for (var p in this.table[state]) {\n            p = +p;\n            if (p !== TERROR) {\n                var d = do_not_describe ? p : this.describeSymbol(p);\n                if (d && !check[d]) {\n                    tokenset.push(d);\n                    check[d] = true;        // Mark this token description as already mentioned to prevent outputting duplicate entries.\n                }\n            }\n        }\n        return tokenset;\n    },\nproductions_: bp({\n  pop: u([\n  11,\n  11,\n  s,\n  [12, 3],\n  s,\n  [13, 3],\n  s,\n  [14, 3],\n  15,\n  15,\n  16,\n  16\n]),\n  rule: u([\n  1,\n  2,\n  3,\n  2,\n  1,\n  3,\n  s,\n  [1, 4],\n  c,\n  [5, 5]\n])\n}),\nperformAction: function parser__PerformAction(yystate /* action[1] */, yysp, yyvstack) {\n\n          /* this == yyval */\n\n          // the JS engine itself can go and remove these statements when `yy` turns out to be unused in any action code!\n          var yy = this.yy;\n          var yyparser = yy.parser;\n          var yylexer = yy.lexer;\n\n          \n\n          switch (yystate) {\ncase 0:\n    /*! Production::    $accept : start $end */\n\n    // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-):\n    this.$ = yyvstack[yysp - 1];\n    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-)\n    break;\n\ncase 1:\n    /*! Production::    start : EOF */\ncase 9:\n    /*! Production::    val : VAL */\ncase 10:\n    /*! Production::    val : VAR */\n\n    // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-):\n    this.$ = yyvstack[yysp];\n    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-)\n    break;\n\ncase 2:\n    /*! Production::    start : attrs EOF */\n\n    // default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-):\n    this.$ = yyvstack[yysp - 1];\n    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-)\n    break;\n\ncase 3:\n    /*! Production::    attrs : attrs attrs_group attr */\n\n    yyvstack[yysp - 2].push(yyvstack[yysp])\n    this.$ = yyvstack[yysp - 2]\n    break;\n\ncase 4:\n    /*! Production::    attrs : attrs attrs_group2 */\n\n    this.$ = yyvstack[yysp - 1]\n    break;\n\ncase 5:\n    /*! Production::    attrs : attr */\n\n    this.$ = [yyvstack[yysp]]\n    break;\n\ncase 6:\n    /*! Production::    attr : NAME EQ val */\n\n    debug('attr: NAME EQ val: NAME=', yyvstack[yysp - 2], ', val=', yyvstack[yysp])\n    this.$ = { name: yyvstack[yysp - 2].trim(), val: yyvstack[yysp] }\n    break;\n\ncase 7:\n    /*! Production::    attr : SPREAD */\n\n    this.$ = { name: yyvstack[yysp], val: yyvstack[yysp] }\n    break;\n\ncase 8:\n    /*! Production::    attr : NAME */\n\n    debug('attr: NAME: $NAME=', yyvstack[yysp])\n    // $$ = $1.map( function(id2) {\n    //   return { name: id2 }\n    // })\n    this.$ = { name: yyvstack[yysp] }\n    break;\n\ncase 11:\n    /*! Production::    val : val PLUS VAR */\n\n    this.$ = yyvstack[yysp - 2] + yyvstack[yysp]\n    break;\n\ncase 12:\n    /*! Production::    attrs_group : SPACE */\ncase 13:\n    /*! Production::    attrs_group : COMMA */\ncase 14:\n    /*! Production::    attrs_group2 : SPACE */\ncase 15:\n    /*! Production::    attrs_group2 : COMMA */\n\n    this.$ = yyvstack[yysp];\n    break;\n\n}\n},\ntable: bt({\n  len: u([\n  6,\n  1,\n  0,\n  5,\n  0,\n  4,\n  0,\n  0,\n  3,\n  0,\n  5,\n  5,\n  3,\n  c,\n  [9, 4],\n  1,\n  0\n]),\n  symbol: u([\n  1,\n  3,\n  5,\n  11,\n  12,\n  13,\n  1,\n  1,\n  9,\n  10,\n  15,\n  16,\n  1,\n  4,\n  9,\n  10,\n  3,\n  5,\n  13,\n  c,\n  [19, 3],\n  9,\n  10,\n  c,\n  [5, 5],\n  6,\n  7,\n  14,\n  1,\n  8,\n  9,\n  10,\n  7\n]),\n  type: u([\n  s,\n  [2, 3],\n  s,\n  [0, 3],\n  1,\n  c,\n  [7, 5],\n  s,\n  [2, 6],\n  c,\n  [7, 7],\n  c,\n  [13, 12]\n]),\n  state: u([\n  1,\n  3,\n  4,\n  8,\n  9,\n  13,\n  14\n]),\n  mode: u([\n  s,\n  [1, 6],\n  2,\n  1,\n  2,\n  2,\n  c,\n  [6, 3],\n  s,\n  [2, 9],\n  c,\n  [18, 7]\n]),\n  goto: u([\n  2,\n  5,\n  6,\n  7,\n  10,\n  11,\n  8,\n  12,\n  8,\n  8,\n  5,\n  6,\n  14,\n  12,\n  12,\n  14,\n  14,\n  15,\n  13,\n  13,\n  s,\n  [15, 3],\n  16,\n  6,\n  17,\n  6,\n  6,\n  18\n])\n}),\ndefaultActions: {\n  2: 1,\n  4: 5,\n  6: 7,\n  7: 2,\n  9: 4,\n  13: 3,\n  15: 9,\n  16: 10,\n  18: 11\n},\nparseError: function parseError(str, hash, ExceptionClass) {\n    if (hash.recoverable) {\n        if (typeof this.trace === 'function') {\n            this.trace(str);\n        }\n        hash.destroy();             // destroy... well, *almost*!\n    } else {\n        if (typeof this.trace === 'function') {\n            this.trace(str);\n        }\n        if (!ExceptionClass) {\n            ExceptionClass = this.JisonParserError;\n        }\n        throw new ExceptionClass(str, hash);\n    }\n},\nparse: function parse(input) {\n    var self = this;\n    var stack = new Array(128);         // token stack: stores token which leads to state at the same index (column storage)\n    var sstack = new Array(128);        // state stack: stores states (column storage)\n    var tstack = [];                    // token stack (only used when `%options token_stack` support has been enabled)\n    var vstack = new Array(128);        // semantic value stack\n\n    var table = this.table;\n    var sp = 0;                         // 'stack pointer': index into the stacks\n\n\n    \n\n\n    var symbol = 0;\n\n\n\n    var TERROR = this.TERROR;\n    var EOF = this.EOF;\n    var ERROR_RECOVERY_TOKEN_DISCARD_COUNT = (this.options.errorRecoveryTokenDiscardCount | 0) || 3;\n    var NO_ACTION = [0, 19 /* === table.length :: ensures that anyone using this new state will fail dramatically! */];\n\n    var lexer;\n    if (this.__lexer__) {\n        lexer = this.__lexer__;\n    } else {\n        lexer = this.__lexer__ = Object.create(this.lexer);\n    }\n\n    var sharedState_yy = {\n        parseError: undefined,\n        quoteName: undefined,\n        lexer: undefined,\n        parser: undefined,\n        pre_parse: undefined,\n        post_parse: undefined,\n        pre_lex: undefined,\n        post_lex: undefined      // WARNING: must be written this way for the code expanders to work correctly in both ES5 and ES6 modes!\n    };\n\n    var ASSERT;\n    if (typeof assert !== 'function') {\n        ASSERT = function JisonAssert(cond, msg) {\n            if (!cond) {\n                throw new Error('assertion failed: ' + (msg || '***'));\n            }\n        };\n    } else {\n        ASSERT = assert;\n    }\n\n    this.yyGetSharedState = function yyGetSharedState() {\n        return sharedState_yy;\n    };\n\n\n\n\n\n\n\n\n    function shallow_copy_noclobber(dst, src) {\n        for (var k in src) {\n            if (typeof dst[k] === 'undefined' && Object.prototype.hasOwnProperty.call(src, k)) {\n                dst[k] = src[k];\n            }\n        }\n    }\n\n    // copy state\n    shallow_copy_noclobber(sharedState_yy, this.yy);\n\n    sharedState_yy.lexer = lexer;\n    sharedState_yy.parser = this;\n\n\n\n\n\n\n    // Does the shared state override the default `parseError` that already comes with this instance?\n    if (typeof sharedState_yy.parseError === 'function') {\n        this.parseError = function parseErrorAlt(str, hash, ExceptionClass) {\n            if (!ExceptionClass) {\n                ExceptionClass = this.JisonParserError;\n            }\n            return sharedState_yy.parseError.call(this, str, hash, ExceptionClass);\n        };\n    } else {\n        this.parseError = this.originalParseError;\n    }\n\n    // Does the shared state override the default `quoteName` that already comes with this instance?\n    if (typeof sharedState_yy.quoteName === 'function') {\n        this.quoteName = function quoteNameAlt(id_str) {\n            return sharedState_yy.quoteName.call(this, id_str);\n        };\n    } else {\n        this.quoteName = this.originalQuoteName;\n    }\n\n    // set up the cleanup function; make it an API so that external code can re-use this one in case of\n    // calamities or when the `%options no-try-catch` option has been specified for the grammar, in which\n    // case this parse() API method doesn't come with a `finally { ... }` block any more!\n    //\n    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,\n    //       or else your `sharedState`, etc. references will be *wrong*!\n    this.cleanupAfterParse = function parser_cleanupAfterParse(resultValue, invoke_post_methods, do_not_nuke_errorinfos) {\n        var rv;\n\n        if (invoke_post_methods) {\n            var hash;\n\n            if (sharedState_yy.post_parse || this.post_parse) {\n                // create an error hash info instance: we re-use this API in a **non-error situation**\n                // as this one delivers all parser internals ready for access by userland code.\n                hash = this.constructParseErrorInfo(null /* no error! */, null /* no exception! */, null, false);\n            }\n\n            if (sharedState_yy.post_parse) {\n                rv = sharedState_yy.post_parse.call(this, sharedState_yy, resultValue, hash);\n                if (typeof rv !== 'undefined') resultValue = rv;\n            }\n            if (this.post_parse) {\n                rv = this.post_parse.call(this, sharedState_yy, resultValue, hash);\n                if (typeof rv !== 'undefined') resultValue = rv;\n            }\n\n            // cleanup:\n            if (hash && hash.destroy) {\n                hash.destroy();\n            }\n        }\n\n        if (this.__reentrant_call_depth > 1) return resultValue;        // do not (yet) kill the sharedState when this is a reentrant run.\n\n        // clean up the lingering lexer structures as well:\n        if (lexer.cleanupAfterLex) {\n            lexer.cleanupAfterLex(do_not_nuke_errorinfos);\n        }\n\n        // prevent lingering circular references from causing memory leaks:\n        if (sharedState_yy) {\n            sharedState_yy.lexer = undefined;\n            sharedState_yy.parser = undefined;\n            if (lexer.yy === sharedState_yy) {\n                lexer.yy = undefined;\n            }\n        }\n        sharedState_yy = undefined;\n        this.parseError = this.originalParseError;\n        this.quoteName = this.originalQuoteName;\n\n        // nuke the vstack[] array at least as that one will still reference obsoleted user values.\n        // To be safe, we nuke the other internal stack columns as well...\n        stack.length = 0;               // fastest way to nuke an array without overly bothering the GC\n        sstack.length = 0;\n\n        vstack.length = 0;\n        sp = 0;\n\n        // nuke the error hash info instances created during this run.\n        // Userland code must COPY any data/references\n        // in the error hash instance(s) it is more permanently interested in.\n        if (!do_not_nuke_errorinfos) {\n            for (var i = this.__error_infos.length - 1; i >= 0; i--) {\n                var el = this.__error_infos[i];\n                if (el && typeof el.destroy === 'function') {\n                    el.destroy();\n                }\n            }\n            this.__error_infos.length = 0;\n\n\n        }\n\n        return resultValue;\n    };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,\n    //       or else your `lexer`, `sharedState`, etc. references will be *wrong*!\n    this.constructParseErrorInfo = function parser_constructParseErrorInfo(msg, ex, expected, recoverable) {\n        var pei = {\n            errStr: msg,\n            exception: ex,\n            text: lexer.match,\n            value: lexer.yytext,\n            token: this.describeSymbol(symbol) || symbol,\n            token_id: symbol,\n            line: lexer.yylineno,\n\n            expected: expected,\n            recoverable: recoverable,\n            state: state,\n            action: action,\n            new_state: newState,\n            symbol_stack: stack,\n            state_stack: sstack,\n            value_stack: vstack,\n\n            stack_pointer: sp,\n            yy: sharedState_yy,\n            lexer: lexer,\n            parser: this,\n\n            // and make sure the error info doesn't stay due to potential\n            // ref cycle via userland code manipulations.\n            // These would otherwise all be memory leak opportunities!\n            //\n            // Note that only array and object references are nuked as those\n            // constitute the set of elements which can produce a cyclic ref.\n            // The rest of the members is kept intact as they are harmless.\n            destroy: function destructParseErrorInfo() {\n                // remove cyclic references added to error info:\n                // info.yy = null;\n                // info.lexer = null;\n                // info.value = null;\n                // info.value_stack = null;\n                // ...\n                var rec = !!this.recoverable;\n                for (var key in this) {\n                    if (this.hasOwnProperty(key) && typeof key === 'object') {\n                        this[key] = undefined;\n                    }\n                }\n                this.recoverable = rec;\n            }\n        };\n        // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!\n        this.__error_infos.push(pei);\n        return pei;\n    };\n\n\n\n\n\n\n\n\n\n\n\n\n\n    function getNonTerminalFromCode(symbol) {\n        var tokenName = self.getSymbolName(symbol);\n        if (!tokenName) {\n            tokenName = symbol;\n        }\n        return tokenName;\n    }\n\n\n    // lex function that supports token stacks\n    function lex() {\n        var token;\n        token = tstack.pop() || lexer.lex() || EOF;\n        // if token isn't its numeric value, convert\n        if (typeof token !== 'number') {\n            if (token instanceof Array) {\n                tstack = token;\n                token = tstack.pop();\n            }\n            // if token isn't its numeric value, convert\n            if (typeof token !== 'number') {\n                token = self.symbols_[token] || token;\n            }\n        }\n\n        return token || EOF;\n    }\n\n\n    var state, action, r, t;\n    var yyval = {\n        $: true,\n        _$: undefined,\n        yy: sharedState_yy\n    };\n    var p;\n    var yyrulelen;\n    var this_production;\n    var newState;\n    var retval = false;\n\n\n    try {\n        this.__reentrant_call_depth++;\n\n        lexer.setInput(input, sharedState_yy);\n\n        // NOTE: we *assume* no lexer pre/post handlers are set up *after* \n        // this initial `setInput()` call: hence we can now check and decide\n        // whether we'll go with the standard, slower, lex() API or the\n        // `fast_lex()` one:\n        if (typeof lexer.canIUse === 'function') {\n            var lexerInfo = lexer.canIUse();\n            if (lexerInfo.fastLex && typeof fastLex === 'function') {\n                lex = fastLex;\n            }\n        } \n\n\n\n        vstack[sp] = null;\n        sstack[sp] = 0;\n        stack[sp] = 0;\n        ++sp;\n\n\n\n\n\n        if (this.pre_parse) {\n            this.pre_parse.call(this, sharedState_yy);\n        }\n        if (sharedState_yy.pre_parse) {\n            sharedState_yy.pre_parse.call(this, sharedState_yy);\n        }\n\n        newState = sstack[sp - 1];\n        for (;;) {\n            // retrieve state number from top of stack\n            state = newState;               // sstack[sp - 1];\n\n            // use default actions if available\n            if (this.defaultActions[state]) {\n                action = 2;\n                newState = this.defaultActions[state];\n            } else {\n                // The single `==` condition below covers both these `===` comparisons in a single\n                // operation:\n                //\n                //     if (symbol === null || typeof symbol === 'undefined') ...\n                if (!symbol) {\n                    symbol = lex();\n                }\n                // read action for current state and first input\n                t = (table[state] && table[state][symbol]) || NO_ACTION;\n                newState = t[1];\n                action = t[0];\n\n\n\n\n\n\n\n\n\n\n\n                // handle parse error\n                if (!action) {\n                    var errStr;\n                    var errSymbolDescr = (this.describeSymbol(symbol) || symbol);\n                    var expected = this.collect_expected_token_set(state);\n\n                    // Report error\n                    if (typeof lexer.yylineno === 'number') {\n                        errStr = 'Parse error on line ' + (lexer.yylineno + 1) + ': ';\n                    } else {\n                        errStr = 'Parse error: ';\n                    }\n                    if (typeof lexer.showPosition === 'function') {\n                        errStr += '\\n' + lexer.showPosition(79 - 10, 10) + '\\n';\n                    }\n                    if (expected.length) {\n                        errStr += 'Expecting ' + expected.join(', ') + ', got unexpected ' + errSymbolDescr;\n                    } else {\n                        errStr += 'Unexpected ' + errSymbolDescr;\n                    }\n                    // we cannot recover from the error!\n                    p = this.constructParseErrorInfo(errStr, null, expected, false);\n                    r = this.parseError(p.errStr, p, this.JisonParserError);\n                    if (typeof r !== 'undefined') {\n                        retval = r;\n                    }\n                    break;\n                }\n\n\n            }\n\n\n\n\n\n\n\n\n\n\n            switch (action) {\n            // catch misc. parse failures:\n            default:\n                // this shouldn't happen, unless resolve defaults are off\n                if (action instanceof Array) {\n                    p = this.constructParseErrorInfo('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol, null, null, false);\n                    r = this.parseError(p.errStr, p, this.JisonParserError);\n                    if (typeof r !== 'undefined') {\n                        retval = r;\n                    }\n                    break;\n                }\n                // Another case of better safe than sorry: in case state transitions come out of another error recovery process\n                // or a buggy LUT (LookUp Table):\n                p = this.constructParseErrorInfo('Parsing halted. No viable error recovery approach available due to internal system failure.', null, null, false);\n                r = this.parseError(p.errStr, p, this.JisonParserError);\n                if (typeof r !== 'undefined') {\n                    retval = r;\n                }\n                break;\n\n            // shift:\n            case 1:\n                stack[sp] = symbol;\n                vstack[sp] = lexer.yytext;\n\n                sstack[sp] = newState; // push state\n\n                ++sp;\n                symbol = 0;\n\n\n\n\n                // Pick up the lexer details for the current symbol as that one is not 'look-ahead' any more:\n\n\n\n\n                continue;\n\n            // reduce:\n            case 2:\n\n\n\n                this_production = this.productions_[newState - 1];  // `this.productions_[]` is zero-based indexed while states start from 1 upwards...\n                yyrulelen = this_production[1];\n\n\n\n\n\n\n\n\n\n\n                r = this.performAction.call(yyval, newState, sp - 1, vstack);\n\n                if (typeof r !== 'undefined') {\n                    retval = r;\n                    break;\n                }\n\n                // pop off stack\n                sp -= yyrulelen;\n\n                // don't overwrite the `symbol` variable: use a local var to speed things up:\n                var ntsymbol = this_production[0];    // push nonterminal (reduce)\n                stack[sp] = ntsymbol;\n                vstack[sp] = yyval.$;\n\n                // goto new state = table[STATE][NONTERMINAL]\n                newState = table[sstack[sp - 1]][ntsymbol];\n                sstack[sp] = newState;\n                ++sp;\n\n\n\n\n\n\n\n\n\n                continue;\n\n            // accept:\n            case 3:\n                if (sp !== -2) {\n                    retval = true;\n                    // Return the `$accept` rule's `$$` result, if available.\n                    //\n                    // Also note that JISON always adds this top-most `$accept` rule (with implicit,\n                    // default, action):\n                    //\n                    //     $accept: <startSymbol> $end\n                    //                  %{ $$ = $1; @$ = @1; %}\n                    //\n                    // which, combined with the parse kernel's `$accept` state behaviour coded below,\n                    // will produce the `$$` value output of the <startSymbol> rule as the parse result,\n                    // IFF that result is *not* `undefined`. (See also the parser kernel code.)\n                    //\n                    // In code:\n                    //\n                    //                  %{\n                    //                      @$ = @1;            // if location tracking support is included\n                    //                      if (typeof $1 !== 'undefined')\n                    //                          return $1;\n                    //                      else\n                    //                          return true;           // the default parse result if the rule actions don't produce anything\n                    //                  %}\n                    sp--;\n                    if (typeof vstack[sp] !== 'undefined') {\n                        retval = vstack[sp];\n                    }\n                }\n                break;\n            }\n\n            // break out of loop: we accept or fail with error\n            break;\n        }\n    } catch (ex) {\n        // report exceptions through the parseError callback too, but keep the exception intact\n        // if it is a known parser or lexer error which has been thrown by parseError() already:\n        if (ex instanceof this.JisonParserError) {\n            throw ex;\n        }\n        else if (lexer && typeof lexer.JisonLexerError === 'function' && ex instanceof lexer.JisonLexerError) {\n            throw ex;\n        }\n\n        p = this.constructParseErrorInfo('Parsing aborted due to exception.', ex, null, false);\n        retval = false;\n        r = this.parseError(p.errStr, p, this.JisonParserError);\n        if (typeof r !== 'undefined') {\n            retval = r;\n        }\n    } finally {\n        retval = this.cleanupAfterParse(retval, true, true);\n        this.__reentrant_call_depth--;\n    }   // /finally\n\n    return retval;\n}\n};\nparser.originalParseError = parser.parseError;\nparser.originalQuoteName = parser.quoteName;\n/* lexer generated by jison-lex 0.6.1-216 */\n\n/*\n * Returns a Lexer object of the following structure:\n *\n *  Lexer: {\n *    yy: {}     The so-called \"shared state\" or rather the *source* of it;\n *               the real \"shared state\" `yy` passed around to\n *               the rule actions, etc. is a direct reference!\n *\n *               This \"shared context\" object was passed to the lexer by way of \n *               the `lexer.setInput(str, yy)` API before you may use it.\n *\n *               This \"shared context\" object is passed to the lexer action code in `performAction()`\n *               so userland code in the lexer actions may communicate with the outside world \n *               and/or other lexer rules' actions in more or less complex ways.\n *\n *  }\n *\n *  Lexer.prototype: {\n *    EOF: 1,\n *    ERROR: 2,\n *\n *    yy:        The overall \"shared context\" object reference.\n *\n *    JisonLexerError: function(msg, hash),\n *\n *    performAction: function lexer__performAction(yy, yyrulenumber, YY_START),\n *\n *               The function parameters and `this` have the following value/meaning:\n *               - `this`    : reference to the `lexer` instance. \n *                               `yy_` is an alias for `this` lexer instance reference used internally.\n *\n *               - `yy`      : a reference to the `yy` \"shared state\" object which was passed to the lexer\n *                             by way of the `lexer.setInput(str, yy)` API before.\n *\n *                             Note:\n *                             The extra arguments you specified in the `%parse-param` statement in your\n *                             **parser** grammar definition file are passed to the lexer via this object\n *                             reference as member variables.\n *\n *               - `yyrulenumber`   : index of the matched lexer rule (regex), used internally.\n *\n *               - `YY_START`: the current lexer \"start condition\" state.\n *\n *    parseError: function(str, hash, ExceptionClass),\n *\n *    constructLexErrorInfo: function(error_message, is_recoverable),\n *               Helper function.\n *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.\n *               See it's use in this lexer kernel in many places; example usage:\n *\n *                   var infoObj = lexer.constructParseErrorInfo('fail!', true);\n *                   var retVal = lexer.parseError(infoObj.errStr, infoObj, lexer.JisonLexerError);\n *\n *    options: { ... lexer %options ... },\n *\n *    lex: function(),\n *               Produce one token of lexed input, which was passed in earlier via the `lexer.setInput()` API.\n *               You MAY use the additional `args...` parameters as per `%parse-param` spec of the **lexer** grammar:\n *               these extra `args...` are added verbatim to the `yy` object reference as member variables.\n *\n *               WARNING:\n *               Lexer's additional `args...` parameters (via lexer's `%parse-param`) MAY conflict with\n *               any attributes already added to `yy` by the **parser** or the jison run-time; \n *               when such a collision is detected an exception is thrown to prevent the generated run-time \n *               from silently accepting this confusing and potentially hazardous situation! \n *\n *    cleanupAfterLex: function(do_not_nuke_errorinfos),\n *               Helper function.\n *\n *               This helper API is invoked when the **parse process** has completed: it is the responsibility\n *               of the **parser** (or the calling userland code) to invoke this method once cleanup is desired. \n *\n *               This helper may be invoked by user code to ensure the internal lexer gets properly garbage collected.\n *\n *    setInput: function(input, [yy]),\n *\n *\n *    input: function(),\n *\n *\n *    unput: function(str),\n *\n *\n *    more: function(),\n *\n *\n *    reject: function(),\n *\n *\n *    less: function(n),\n *\n *\n *    pastInput: function(n),\n *\n *\n *    upcomingInput: function(n),\n *\n *\n *    showPosition: function(),\n *\n *\n *    test_match: function(regex_match_array, rule_index),\n *\n *\n *    next: function(),\n *\n *\n *    begin: function(condition),\n *\n *\n *    pushState: function(condition),\n *\n *\n *    popState: function(),\n *\n *\n *    topState: function(),\n *\n *\n *    _currentRules: function(),\n *\n *\n *    stateStackSize: function(),\n *\n *\n *    performAction: function(yy, yy_, yyrulenumber, YY_START),\n *\n *\n *    rules: [...],\n *\n *\n *    conditions: {associative list: name ==> set},\n *  }\n *\n *\n *  token location info (`yylloc`): {\n *    first_line: n,\n *    last_line: n,\n *    first_column: n,\n *    last_column: n,\n *    range: [start_number, end_number]\n *               (where the numbers are indexes into the input string, zero-based)\n *  }\n *\n * ---\n *\n * The `parseError` function receives a 'hash' object with these members for lexer errors:\n *\n *  {\n *    text:        (matched text)\n *    token:       (the produced terminal token, if any)\n *    token_id:    (the produced terminal token numeric ID, if any)\n *    line:        (yylineno)\n *    loc:         (yylloc)\n *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule\n *                  available for this particular error)\n *    yy:          (object: the current parser internal \"shared state\" `yy`\n *                  as is also available in the rule actions; this can be used,\n *                  for instance, for advanced error analysis and reporting)\n *    lexer:       (reference to the current lexer instance used by the parser)\n *  }\n *\n * while `this` will reference the current lexer instance.\n *\n * When `parseError` is invoked by the lexer, the default implementation will\n * attempt to invoke `yy.parser.parseError()`; when this callback is not provided\n * it will try to invoke `yy.parseError()` instead. When that callback is also not\n * provided, a `JisonLexerError` exception will be thrown containing the error\n * message and `hash`, as constructed by the `constructLexErrorInfo()` API.\n *\n * Note that the lexer's `JisonLexerError` error class is passed via the\n * `ExceptionClass` argument, which is invoked to construct the exception\n * instance to be thrown, so technically `parseError` will throw the object\n * produced by the `new ExceptionClass(str, hash)` JavaScript expression.\n *\n * ---\n *\n * You can specify lexer options by setting / modifying the `.options` object of your Lexer instance.\n * These options are available:\n *\n * (Options are permanent.)\n *  \n *  yy: {\n *      parseError: function(str, hash, ExceptionClass)\n *                 optional: overrides the default `parseError` function.\n *  }\n *\n *  lexer.options: {\n *      pre_lex:  function()\n *                 optional: is invoked before the lexer is invoked to produce another token.\n *                 `this` refers to the Lexer object.\n *      post_lex: function(token) { return token; }\n *                 optional: is invoked when the lexer has produced a token `token`;\n *                 this function can override the returned token value by returning another.\n *                 When it does not return any (truthy) value, the lexer will return\n *                 the original `token`.\n *                 `this` refers to the Lexer object.\n *\n * WARNING: the next set of options are not meant to be changed. They echo the abilities of\n * the lexer as per when it was compiled!\n *\n *      ranges: boolean\n *                 optional: `true` ==> token location info will include a .range[] member.\n *      flex: boolean\n *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested\n *                 exhaustively to find the longest match.\n *      backtrack_lexer: boolean\n *                 optional: `true` ==> lexer regexes are tested in order and for invoked;\n *                 the lexer terminates the scan when a token is returned by the action code.\n *      xregexp: boolean\n *                 optional: `true` ==> lexer rule regexes are \"extended regex format\" requiring the\n *                 `XRegExp` library. When this %option has not been specified at compile time, all lexer\n *                 rule regexes have been written as standard JavaScript RegExp expressions.\n *  }\n */\n\n\nvar lexer = function() {\n  /**\n   * See also:\n   * http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508\n   * but we keep the prototype.constructor and prototype.name assignment lines too for compatibility\n   * with userland code which might access the derived class in a 'classic' way.\n   *\n   * @public\n   * @constructor\n   * @nocollapse\n   */\n  function JisonLexerError(msg, hash) {\n    Object.defineProperty(this, 'name', {\n      enumerable: false,\n      writable: false,\n      value: 'JisonLexerError'\n    });\n\n    if (msg == null)\n      msg = '???';\n\n    Object.defineProperty(this, 'message', {\n      enumerable: false,\n      writable: true,\n      value: msg\n    });\n\n    this.hash = hash;\n    var stacktrace;\n\n    if (hash && hash.exception instanceof Error) {\n      var ex2 = hash.exception;\n      this.message = ex2.message || msg;\n      stacktrace = ex2.stack;\n    }\n\n    if (!stacktrace) {\n      if (Error.hasOwnProperty('captureStackTrace')) {\n        // V8\n        Error.captureStackTrace(this, this.constructor);\n      } else {\n        stacktrace = new Error(msg).stack;\n      }\n    }\n\n    if (stacktrace) {\n      Object.defineProperty(this, 'stack', {\n        enumerable: false,\n        writable: false,\n        value: stacktrace\n      });\n    }\n  }\n\n  if (typeof Object.setPrototypeOf === 'function') {\n    Object.setPrototypeOf(JisonLexerError.prototype, Error.prototype);\n  } else {\n    JisonLexerError.prototype = Object.create(Error.prototype);\n  }\n\n  JisonLexerError.prototype.constructor = JisonLexerError;\n  JisonLexerError.prototype.name = 'JisonLexerError';\n\n  var lexer = {\n    \n// Code Generator Information Report\n// ---------------------------------\n//\n// Options:\n//\n//   backtracking: .................... false\n//   location.ranges: ................. false\n//   location line+column tracking: ... true\n//\n//\n// Forwarded Parser Analysis flags:\n//\n//   uses yyleng: ..................... false\n//   uses yylineno: ................... false\n//   uses yytext: ..................... false\n//   uses yylloc: ..................... false\n//   uses lexer values: ............... true / true\n//   location tracking: ............... false\n//   location assignment: ............. false\n//\n//\n// Lexer Analysis flags:\n//\n//   uses yyleng: ..................... ???\n//   uses yylineno: ................... ???\n//   uses yytext: ..................... ???\n//   uses yylloc: ..................... ???\n//   uses ParseError API: ............. ???\n//   uses yyerror: .................... ???\n//   uses location tracking & editing:  ???\n//   uses more() API: ................. ???\n//   uses unput() API: ................ ???\n//   uses reject() API: ............... ???\n//   uses less() API: ................. ???\n//   uses display APIs pastInput(), upcomingInput(), showPosition():\n//        ............................. ???\n//   uses describeYYLLOC() API: ....... ???\n//\n// --------- END OF REPORT -----------\n\nEOF: 1,\n    ERROR: 2,\n\n    // JisonLexerError: JisonLexerError,        /// <-- injected by the code generator\n\n    // options: {},                             /// <-- injected by the code generator\n\n    // yy: ...,                                 /// <-- injected by setInput()\n\n    /// INTERNAL USE ONLY: internal rule set cache for the current lexer state\n    __currentRuleSet__: null,\n\n    /// INTERNAL USE ONLY: the set of lexErrorInfo objects created since the last cleanup\n    __error_infos: [],\n\n    /// INTERNAL USE ONLY: mark whether the lexer instance has been 'unfolded' completely and is now ready for use\n    __decompressed: false,\n\n    /// INTERNAL USE ONLY\n    done: false,\n\n    /// INTERNAL USE ONLY\n    _backtrack: false,\n\n    /// INTERNAL USE ONLY\n    _input: '',\n\n    /// INTERNAL USE ONLY\n    _more: false,\n\n    /// INTERNAL USE ONLY\n    _signaled_error_token: false,\n\n    /// INTERNAL USE ONLY; managed via `pushState()`, `popState()`, `topState()` and `stateStackSize()`\n    conditionStack: [],\n\n    /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction. `match` is identical to `yytext` except that this one still contains the matched input string after `lexer.performAction()` has been invoked, where userland code MAY have changed/replaced the `yytext` value entirely!\n    match: '',\n\n    /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks entire input which has been matched so far\n    matched: '',\n\n    /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks RE match result for last (successful) match attempt\n    matches: false,\n\n    /// ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction; this value is transferred to the parser as the 'token value' when the parser consumes the lexer token produced through a call to the `lex()` API.\n    yytext: '',\n\n    /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks the 'cursor position' in the input string, i.e. the number of characters matched so far\n    offset: 0,\n\n    /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: length of matched input for the token under construction (`yytext`)\n    yyleng: 0,\n\n    /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: 'line number' at which the token under construction is located\n    yylineno: 0,\n\n    /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks location info (lines + columns) for the token under construction\n    yylloc: null,\n\n    /**\n     * INTERNAL USE: construct a suitable error info hash object instance for `parseError`.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    constructLexErrorInfo: function lexer_constructLexErrorInfo(msg, recoverable, show_input_position) {\n      msg = '' + msg;\n\n      // heuristic to determine if the error message already contains a (partial) source code dump\n      // as produced by either `showPosition()` or `prettyPrintRange()`:\n      if (show_input_position == undefined) {\n        show_input_position = !(msg.indexOf('\\n') > 0 && msg.indexOf('^') > 0);\n      }\n\n      if (this.yylloc && show_input_position) {\n        if (typeof this.prettyPrintRange === 'function') {\n          var pretty_src = this.prettyPrintRange(this.yylloc);\n\n          if (!/\\n\\s*$/.test(msg)) {\n            msg += '\\n';\n          }\n\n          msg += '\\n  Erroneous area:\\n' + this.prettyPrintRange(this.yylloc);\n        } else if (typeof this.showPosition === 'function') {\n          var pos_str = this.showPosition();\n\n          if (pos_str) {\n            if (msg.length && msg[msg.length - 1] !== '\\n' && pos_str[0] !== '\\n') {\n              msg += '\\n' + pos_str;\n            } else {\n              msg += pos_str;\n            }\n          }\n        }\n      }\n\n      /** @constructor */\n      var pei = {\n        errStr: msg,\n        recoverable: !!recoverable,\n\n        // This one MAY be empty; userland code should use the `upcomingInput` API to obtain more text which follows the 'lexer cursor position'...\n        text: this.match,\n\n        token: null,\n        line: this.yylineno,\n        loc: this.yylloc,\n        yy: this.yy,\n        lexer: this,\n\n        /**\n         * and make sure the error info doesn't stay due to potential\n         * ref cycle via userland code manipulations.\n         * These would otherwise all be memory leak opportunities!\n         * \n         * Note that only array and object references are nuked as those\n         * constitute the set of elements which can produce a cyclic ref.\n         * The rest of the members is kept intact as they are harmless.\n         * \n         * @public\n         * @this {LexErrorInfo}\n         */\n        destroy: function destructLexErrorInfo() {\n          // remove cyclic references added to error info:\n          // info.yy = null;\n          // info.lexer = null;\n          // ...\n          var rec = !!this.recoverable;\n\n          for (var key in this) {\n            if (this.hasOwnProperty(key) && typeof key === 'object') {\n              this[key] = undefined;\n            }\n          }\n\n          this.recoverable = rec;\n        }\n      };\n\n      // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!\n      this.__error_infos.push(pei);\n\n      return pei;\n    },\n\n    /**\n     * handler which is invoked when a lexer error occurs.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    parseError: function lexer_parseError(str, hash, ExceptionClass) {\n      if (!ExceptionClass) {\n        ExceptionClass = this.JisonLexerError;\n      }\n\n      if (this.yy) {\n        if (this.yy.parser && typeof this.yy.parser.parseError === 'function') {\n          return this.yy.parser.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;\n        } else if (typeof this.yy.parseError === 'function') {\n          return this.yy.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;\n        }\n      }\n\n      throw new ExceptionClass(str, hash);\n    },\n\n    /**\n     * method which implements `yyerror(str, ...args)` functionality for use inside lexer actions.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    yyerror: function yyError(str /*, ...args */) {\n      var lineno_msg = '';\n\n      if (this.yylloc) {\n        lineno_msg = ' on line ' + (this.yylineno + 1);\n      }\n\n      var p = this.constructLexErrorInfo(\n        'Lexical error' + lineno_msg + ': ' + str,\n        this.options.lexerErrorsAreRecoverable\n      );\n\n      // Add any extra args to the hash under the name `extra_error_attributes`:\n      var args = Array.prototype.slice.call(arguments, 1);\n\n      if (args.length) {\n        p.extra_error_attributes = args;\n      }\n\n      return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;\n    },\n\n    /**\n     * final cleanup function for when we have completed lexing the input;\n     * make it an API so that external code can use this one once userland\n     * code has decided it's time to destroy any lingering lexer error\n     * hash object instances and the like: this function helps to clean\n     * up these constructs, which *may* carry cyclic references which would\n     * otherwise prevent the instances from being properly and timely\n     * garbage-collected, i.e. this function helps prevent memory leaks!\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    cleanupAfterLex: function lexer_cleanupAfterLex(do_not_nuke_errorinfos) {\n      // prevent lingering circular references from causing memory leaks:\n      this.setInput('', {});\n\n      // nuke the error hash info instances created during this run.\n      // Userland code must COPY any data/references\n      // in the error hash instance(s) it is more permanently interested in.\n      if (!do_not_nuke_errorinfos) {\n        for (var i = this.__error_infos.length - 1; i >= 0; i--) {\n          var el = this.__error_infos[i];\n\n          if (el && typeof el.destroy === 'function') {\n            el.destroy();\n          }\n        }\n\n        this.__error_infos.length = 0;\n      }\n\n      return this;\n    },\n\n    /**\n     * clear the lexer token context; intended for internal use only\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    clear: function lexer_clear() {\n      this.yytext = '';\n      this.yyleng = 0;\n      this.match = '';\n\n      // - DO NOT reset `this.matched`\n      this.matches = false;\n\n      this._more = false;\n      this._backtrack = false;\n      var col = (this.yylloc ? this.yylloc.last_column : 0);\n\n      this.yylloc = {\n        first_line: this.yylineno + 1,\n        first_column: col,\n        last_line: this.yylineno + 1,\n        last_column: col,\n        range: [this.offset, this.offset]\n      };\n    },\n\n    /**\n     * resets the lexer, sets new input\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    setInput: function lexer_setInput(input, yy) {\n      this.yy = yy || this.yy || {};\n\n      // also check if we've fully initialized the lexer instance,\n      // including expansion work to be done to go from a loaded\n      // lexer to a usable lexer:\n      if (!this.__decompressed) {\n        // step 1: decompress the regex list:\n        var rules = this.rules;\n\n        for (var i = 0, len = rules.length; i < len; i++) {\n          var rule_re = rules[i];\n\n          // compression: is the RE an xref to another RE slot in the rules[] table?\n          if (typeof rule_re === 'number') {\n            rules[i] = rules[rule_re];\n          }\n        }\n\n        // step 2: unfold the conditions[] set to make these ready for use:\n        var conditions = this.conditions;\n\n        for (var k in conditions) {\n          var spec = conditions[k];\n          var rule_ids = spec.rules;\n          var len = rule_ids.length;\n          var rule_regexes = new Array(len + 1);            // slot 0 is unused; we use a 1-based index approach here to keep the hottest code in `lexer_next()` fast and simple!\n          var rule_new_ids = new Array(len + 1);\n\n          for (var i = 0; i < len; i++) {\n            var idx = rule_ids[i];\n            var rule_re = rules[idx];\n            rule_regexes[i + 1] = rule_re;\n            rule_new_ids[i + 1] = idx;\n          }\n\n          spec.rules = rule_new_ids;\n          spec.__rule_regexes = rule_regexes;\n          spec.__rule_count = len;\n        }\n\n        this.__decompressed = true;\n      }\n\n      this._input = input || '';\n      this.clear();\n      this._signaled_error_token = false;\n      this.done = false;\n      this.yylineno = 0;\n      this.matched = '';\n      this.conditionStack = ['INITIAL'];\n      this.__currentRuleSet__ = null;\n\n      this.yylloc = {\n        first_line: 1,\n        first_column: 0,\n        last_line: 1,\n        last_column: 0,\n        range: [0, 0]\n      };\n\n      this.offset = 0;\n      return this;\n    },\n\n    /**\n     * edit the remaining input via user-specified callback.\n     * This can be used to forward-adjust the input-to-parse, \n     * e.g. inserting macro expansions and alike in the\n     * input which has yet to be lexed.\n     * The behaviour of this API contrasts the `unput()` et al\n     * APIs as those act on the *consumed* input, while this\n     * one allows one to manipulate the future, without impacting\n     * the current `yyloc` cursor location or any history. \n     * \n     * Use this API to help implement C-preprocessor-like\n     * `#include` statements, etc.\n     * \n     * The provided callback must be synchronous and is\n     * expected to return the edited input (string).\n     *\n     * The `cpsArg` argument value is passed to the callback\n     * as-is.\n     *\n     * `callback` interface: \n     * `function callback(input, cpsArg)`\n     * \n     * - `input` will carry the remaining-input-to-lex string\n     *   from the lexer.\n     * - `cpsArg` is `cpsArg` passed into this API.\n     * \n     * The `this` reference for the callback will be set to\n     * reference this lexer instance so that userland code\n     * in the callback can easily and quickly access any lexer\n     * API. \n     *\n     * When the callback returns a non-string-type falsey value,\n     * we assume the callback did not edit the input and we\n     * will using the input as-is.\n     *\n     * When the callback returns a non-string-type value, it\n     * is converted to a string for lexing via the `\"\" + retval`\n     * operation. (See also why: http://2ality.com/2012/03/converting-to-string.html \n     * -- that way any returned object's `toValue()` and `toString()`\n     * methods will be invoked in a proper/desirable order.)\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    editRemainingInput: function lexer_editRemainingInput(callback, cpsArg) {\n      var rv = callback.call(this, this._input, cpsArg);\n\n      if (typeof rv !== 'string') {\n        if (rv) {\n          this._input = '' + rv;\n        }\n        // else: keep `this._input` as is. \n      } else {\n        this._input = rv;\n      }\n\n      return this;\n    },\n\n    /**\n     * consumes and returns one char from the input\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    input: function lexer_input() {\n      if (!this._input) {\n        //this.done = true;    -- don't set `done` as we want the lex()/next() API to be able to produce one custom EOF token match after this anyhow. (lexer can match special <<EOF>> tokens and perform user action code for a <<EOF>> match, but only does so *once*)\n        return null;\n      }\n\n      var ch = this._input[0];\n      this.yytext += ch;\n      this.yyleng++;\n      this.offset++;\n      this.match += ch;\n      this.matched += ch;\n\n      // Count the linenumber up when we hit the LF (or a stand-alone CR).\n      // On CRLF, the linenumber is incremented when you fetch the CR or the CRLF combo\n      // and we advance immediately past the LF as well, returning both together as if\n      // it was all a single 'character' only.\n      var slice_len = 1;\n\n      var lines = false;\n\n      if (ch === '\\n') {\n        lines = true;\n      } else if (ch === '\\r') {\n        lines = true;\n        var ch2 = this._input[1];\n\n        if (ch2 === '\\n') {\n          slice_len++;\n          ch += ch2;\n          this.yytext += ch2;\n          this.yyleng++;\n          this.offset++;\n          this.match += ch2;\n          this.matched += ch2;\n          this.yylloc.range[1]++;\n        }\n      }\n\n      if (lines) {\n        this.yylineno++;\n        this.yylloc.last_line++;\n        this.yylloc.last_column = 0;\n      } else {\n        this.yylloc.last_column++;\n      }\n\n      this.yylloc.range[1]++;\n      this._input = this._input.slice(slice_len);\n      return ch;\n    },\n\n    /**\n     * unshifts one char (or an entire string) into the input\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    unput: function lexer_unput(ch) {\n      var len = ch.length;\n      var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n      this._input = ch + this._input;\n      this.yytext = this.yytext.substr(0, this.yytext.length - len);\n      this.yyleng = this.yytext.length;\n      this.offset -= len;\n      this.match = this.match.substr(0, this.match.length - len);\n      this.matched = this.matched.substr(0, this.matched.length - len);\n\n      if (lines.length > 1) {\n        this.yylineno -= lines.length - 1;\n        this.yylloc.last_line = this.yylineno + 1;\n\n        // Get last entirely matched line into the `pre_lines[]` array's\n        // last index slot; we don't mind when other previously \n        // matched lines end up in the array too. \n        var pre = this.match;\n\n        var pre_lines = pre.split(/(?:\\r\\n?|\\n)/g);\n\n        if (pre_lines.length === 1) {\n          pre = this.matched;\n          pre_lines = pre.split(/(?:\\r\\n?|\\n)/g);\n        }\n\n        this.yylloc.last_column = pre_lines[pre_lines.length - 1].length;\n      } else {\n        this.yylloc.last_column -= len;\n      }\n\n      this.yylloc.range[1] = this.yylloc.range[0] + this.yyleng;\n      this.done = false;\n      return this;\n    },\n\n    /**\n     * cache matched text and append it on next action\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    more: function lexer_more() {\n      this._more = true;\n      return this;\n    },\n\n    /**\n     * signal the lexer that this rule fails to match the input, so the\n     * next matching rule (regex) should be tested instead.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    reject: function lexer_reject() {\n      if (this.options.backtrack_lexer) {\n        this._backtrack = true;\n      } else {\n        // when the `parseError()` call returns, we MUST ensure that the error is registered.\n        // We accomplish this by signaling an 'error' token to be produced for the current\n        // `.lex()` run.\n        var lineno_msg = '';\n\n        if (this.yylloc) {\n          lineno_msg = ' on line ' + (this.yylineno + 1);\n        }\n\n        var p = this.constructLexErrorInfo(\n          'Lexical error' + lineno_msg + ': You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).',\n          false\n        );\n\n        this._signaled_error_token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;\n      }\n\n      return this;\n    },\n\n    /**\n     * retain first n characters of the match\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    less: function lexer_less(n) {\n      return this.unput(this.match.slice(n));\n    },\n\n    /**\n     * return (part of the) already matched input, i.e. for error\n     * messages.\n     * \n     * Limit the returned string length to `maxSize` (default: 20).\n     * \n     * Limit the returned string to the `maxLines` number of lines of\n     * input (default: 1).\n     * \n     * Negative limit values equal *unlimited*.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    pastInput: function lexer_pastInput(maxSize, maxLines) {\n      var past = this.matched.substring(0, this.matched.length - this.match.length);\n\n      if (maxSize < 0)\n        maxSize = past.length;\n      else if (!maxSize)\n        maxSize = 20;\n\n      if (maxLines < 0)\n        maxLines = past.length;         // can't ever have more input lines than this!;\n      else if (!maxLines)\n        maxLines = 1;\n\n      // `substr` anticipation: treat \\r\\n as a single character and take a little\n      // more than necessary so that we can still properly check against maxSize\n      // after we've transformed and limited the newLines in here:\n      past = past.substr(-maxSize * 2 - 2);\n\n      // now that we have a significantly reduced string to process, transform the newlines\n      // and chop them, then limit them:\n      var a = past.replace(/\\r\\n|\\r/g, '\\n').split('\\n');\n\n      a = a.slice(-maxLines);\n      past = a.join('\\n');\n\n      // When, after limiting to maxLines, we still have too much to return,\n      // do add an ellipsis prefix...\n      if (past.length > maxSize) {\n        past = '...' + past.substr(-maxSize);\n      }\n\n      return past;\n    },\n\n    /**\n     * return (part of the) upcoming input, i.e. for error messages.\n     * \n     * Limit the returned string length to `maxSize` (default: 20).\n     * \n     * Limit the returned string to the `maxLines` number of lines of input (default: 1).\n     * \n     * Negative limit values equal *unlimited*.\n     *\n     * > ### NOTE ###\n     * >\n     * > *\"upcoming input\"* is defined as the whole of the both\n     * > the *currently lexed* input, together with any remaining input\n     * > following that. *\"currently lexed\"* input is the input \n     * > already recognized by the lexer but not yet returned with\n     * > the lexer token. This happens when you are invoking this API\n     * > from inside any lexer rule action code block. \n     * >\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    upcomingInput: function lexer_upcomingInput(maxSize, maxLines) {\n      var next = this.match;\n\n      if (maxSize < 0)\n        maxSize = next.length + this._input.length;\n      else if (!maxSize)\n        maxSize = 20;\n\n      if (maxLines < 0)\n        maxLines = maxSize;         // can't ever have more input lines than this!;\n      else if (!maxLines)\n        maxLines = 1;\n\n      // `substring` anticipation: treat \\r\\n as a single character and take a little\n      // more than necessary so that we can still properly check against maxSize\n      // after we've transformed and limited the newLines in here:\n      if (next.length < maxSize * 2 + 2) {\n        next += this._input.substring(0, maxSize * 2 + 2);  // substring is faster on Chrome/V8\n      }\n\n      // now that we have a significantly reduced string to process, transform the newlines\n      // and chop them, then limit them:\n      var a = next.replace(/\\r\\n|\\r/g, '\\n').split('\\n');\n\n      a = a.slice(0, maxLines);\n      next = a.join('\\n');\n\n      // When, after limiting to maxLines, we still have too much to return,\n      // do add an ellipsis postfix...\n      if (next.length > maxSize) {\n        next = next.substring(0, maxSize) + '...';\n      }\n\n      return next;\n    },\n\n    /**\n     * return a string which displays the character position where the\n     * lexing error occurred, i.e. for error messages\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    showPosition: function lexer_showPosition(maxPrefix, maxPostfix) {\n      var pre = this.pastInput(maxPrefix).replace(/\\s/g, ' ');\n      var c = new Array(pre.length + 1).join('-');\n      return pre + this.upcomingInput(maxPostfix).replace(/\\s/g, ' ') + '\\n' + c + '^';\n    },\n\n    /**\n     * return an YYLLOC info object derived off the given context (actual, preceding, following, current).\n     * Use this method when the given `actual` location is not guaranteed to exist (i.e. when\n     * it MAY be NULL) and you MUST have a valid location info object anyway:\n     * then we take the given context of the `preceding` and `following` locations, IFF those are available,\n     * and reconstruct the `actual` location info from those.\n     * If this fails, the heuristic is to take the `current` location, IFF available.\n     * If this fails as well, we assume the sought location is at/around the current lexer position\n     * and then produce that one as a response. DO NOTE that these heuristic/derived location info\n     * values MAY be inaccurate!\n     *\n     * NOTE: `deriveLocationInfo()` ALWAYS produces a location info object *copy* of `actual`, not just\n     * a *reference* hence all input location objects can be assumed to be 'constant' (function has no side-effects).\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    deriveLocationInfo: function lexer_deriveYYLLOC(actual, preceding, following, current) {\n      var loc = {\n        first_line: 1,\n        first_column: 0,\n        last_line: 1,\n        last_column: 0,\n        range: [0, 0]\n      };\n\n      if (actual) {\n        loc.first_line = actual.first_line | 0;\n        loc.last_line = actual.last_line | 0;\n        loc.first_column = actual.first_column | 0;\n        loc.last_column = actual.last_column | 0;\n\n        if (actual.range) {\n          loc.range[0] = actual.range[0] | 0;\n          loc.range[1] = actual.range[1] | 0;\n        }\n      }\n\n      if (loc.first_line <= 0 || loc.last_line < loc.first_line) {\n        // plan B: heuristic using preceding and following:\n        if (loc.first_line <= 0 && preceding) {\n          loc.first_line = preceding.last_line | 0;\n          loc.first_column = preceding.last_column | 0;\n\n          if (preceding.range) {\n            loc.range[0] = actual.range[1] | 0;\n          }\n        }\n\n        if ((loc.last_line <= 0 || loc.last_line < loc.first_line) && following) {\n          loc.last_line = following.first_line | 0;\n          loc.last_column = following.first_column | 0;\n\n          if (following.range) {\n            loc.range[1] = actual.range[0] | 0;\n          }\n        }\n\n        // plan C?: see if the 'current' location is useful/sane too:\n        if (loc.first_line <= 0 && current && (loc.last_line <= 0 || current.last_line <= loc.last_line)) {\n          loc.first_line = current.first_line | 0;\n          loc.first_column = current.first_column | 0;\n\n          if (current.range) {\n            loc.range[0] = current.range[0] | 0;\n          }\n        }\n\n        if (loc.last_line <= 0 && current && (loc.first_line <= 0 || current.first_line >= loc.first_line)) {\n          loc.last_line = current.last_line | 0;\n          loc.last_column = current.last_column | 0;\n\n          if (current.range) {\n            loc.range[1] = current.range[1] | 0;\n          }\n        }\n      }\n\n      // sanitize: fix last_line BEFORE we fix first_line as we use the 'raw' value of the latter\n      // or plan D heuristics to produce a 'sensible' last_line value:\n      if (loc.last_line <= 0) {\n        if (loc.first_line <= 0) {\n          loc.first_line = this.yylloc.first_line;\n          loc.last_line = this.yylloc.last_line;\n          loc.first_column = this.yylloc.first_column;\n          loc.last_column = this.yylloc.last_column;\n          loc.range[0] = this.yylloc.range[0];\n          loc.range[1] = this.yylloc.range[1];\n        } else {\n          loc.last_line = this.yylloc.last_line;\n          loc.last_column = this.yylloc.last_column;\n          loc.range[1] = this.yylloc.range[1];\n        }\n      }\n\n      if (loc.first_line <= 0) {\n        loc.first_line = loc.last_line;\n        loc.first_column = 0; // loc.last_column;\n        loc.range[1] = loc.range[0];\n      }\n\n      if (loc.first_column < 0) {\n        loc.first_column = 0;\n      }\n\n      if (loc.last_column < 0) {\n        loc.last_column = (loc.first_column > 0 ? loc.first_column : 80);\n      }\n\n      return loc;\n    },\n\n    /**\n     * return a string which displays the lines & columns of input which are referenced \n     * by the given location info range, plus a few lines of context.\n     * \n     * This function pretty-prints the indicated section of the input, with line numbers \n     * and everything!\n     * \n     * This function is very useful to provide highly readable error reports, while\n     * the location range may be specified in various flexible ways:\n     * \n     * - `loc` is the location info object which references the area which should be\n     *   displayed and 'marked up': these lines & columns of text are marked up by `^`\n     *   characters below each character in the entire input range.\n     * \n     * - `context_loc` is the *optional* location info object which instructs this\n     *   pretty-printer how much *leading* context should be displayed alongside\n     *   the area referenced by `loc`. This can help provide context for the displayed\n     *   error, etc.\n     * \n     *   When this location info is not provided, a default context of 3 lines is\n     *   used.\n     * \n     * - `context_loc2` is another *optional* location info object, which serves\n     *   a similar purpose to `context_loc`: it specifies the amount of *trailing*\n     *   context lines to display in the pretty-print output.\n     * \n     *   When this location info is not provided, a default context of 1 line only is\n     *   used.\n     * \n     * Special Notes:\n     * \n     * - when the `loc`-indicated range is very large (about 5 lines or more), then\n     *   only the first and last few lines of this block are printed while a\n     *   `...continued...` message will be printed between them.\n     * \n     *   This serves the purpose of not printing a huge amount of text when the `loc`\n     *   range happens to be huge: this way a manageable & readable output results\n     *   for arbitrary large ranges.\n     * \n     * - this function can display lines of input which whave not yet been lexed.\n     *   `prettyPrintRange()` can access the entire input!\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    prettyPrintRange: function lexer_prettyPrintRange(loc, context_loc, context_loc2) {\n      loc = this.deriveLocationInfo(loc, context_loc, context_loc2);\n      const CONTEXT = 3;\n      const CONTEXT_TAIL = 1;\n      const MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT = 2;\n      var input = this.matched + this._input;\n      var lines = input.split('\\n');\n      var l0 = Math.max(1, (context_loc ? context_loc.first_line : loc.first_line - CONTEXT));\n      var l1 = Math.max(1, (context_loc2 ? context_loc2.last_line : loc.last_line + CONTEXT_TAIL));\n      var lineno_display_width = 1 + Math.log10(l1 | 1) | 0;\n      var ws_prefix = new Array(lineno_display_width).join(' ');\n      var nonempty_line_indexes = [[], [], []];\n\n      var rv = lines.slice(l0 - 1, l1 + 1).map(function injectLineNumber(line, index) {\n        var lno = index + l0;\n        var lno_pfx = (ws_prefix + lno).substr(-lineno_display_width);\n        var rv = lno_pfx + ': ' + line;\n        var errpfx = new Array(lineno_display_width + 1).join('^');\n        var offset = 2 + 1;\n        var len = 0;\n\n        if (lno === loc.first_line) {\n          offset += loc.first_column;\n\n          len = Math.max(\n            2,\n            ((lno === loc.last_line ? loc.last_column : line.length)) - loc.first_column + 1\n          );\n        } else if (lno === loc.last_line) {\n          len = Math.max(2, loc.last_column + 1);\n        } else if (lno > loc.first_line && lno < loc.last_line) {\n          len = Math.max(2, line.length + 1);\n        }\n\n        var nli;\n\n        if (len) {\n          var lead = new Array(offset).join('.');\n          var mark = new Array(len).join('^');\n          rv += '\\n' + errpfx + lead + mark;\n          nli = 1;\n        } else if (lno < loc.first_line) {\n          nli = 0;\n        } else if (lno > loc.last_line) {\n          nli = 2;\n        }\n\n        if (line.trim().length > 0) {\n          nonempty_line_indexes[nli].push(index);\n        }\n\n        rv = rv.replace(/\\t/g, ' ');\n        return rv;\n      });\n\n      // now make sure we don't print an overly large amount of lead/error/tail area: limit it \n      // to the top and bottom line count:\n      for (var i = 0; i <= 2; i++) {\n        var line_arr = nonempty_line_indexes[i];\n\n        if (line_arr.length > 2 * MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT) {\n          var clip_start = line_arr[MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT - 1] + 1;\n          var clip_end = line_arr[line_arr.length - MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT] - 1;\n          var intermediate_line = new Array(lineno_display_width + 1).join(' ') + '  (...continued...)';\n\n          if (i === 1) {\n            intermediate_line += '\\n' + new Array(lineno_display_width + 1).join('-') + '  (---------------)';\n          }\n\n          rv.splice(clip_start, clip_end - clip_start + 1, intermediate_line);\n        }\n      }\n\n      return rv.join('\\n');\n    },\n\n    /**\n     * helper function, used to produce a human readable description as a string, given\n     * the input `yylloc` location object.\n     * \n     * Set `display_range_too` to TRUE to include the string character index position(s)\n     * in the description if the `yylloc.range` is available.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    describeYYLLOC: function lexer_describe_yylloc(yylloc, display_range_too) {\n      var l1 = yylloc.first_line;\n      var l2 = yylloc.last_line;\n      var c1 = yylloc.first_column;\n      var c2 = yylloc.last_column;\n      var dl = l2 - l1;\n      var dc = c2 - c1;\n      var rv;\n\n      if (dl === 0) {\n        rv = 'line ' + l1 + ', ';\n\n        if (dc <= 1) {\n          rv += 'column ' + c1;\n        } else {\n          rv += 'columns ' + c1 + ' .. ' + c2;\n        }\n      } else {\n        rv = 'lines ' + l1 + '(column ' + c1 + ') .. ' + l2 + '(column ' + c2 + ')';\n      }\n\n      if (yylloc.range && display_range_too) {\n        var r1 = yylloc.range[0];\n        var r2 = yylloc.range[1] - 1;\n\n        if (r2 <= r1) {\n          rv += ' {String Offset: ' + r1 + '}';\n        } else {\n          rv += ' {String Offset range: ' + r1 + ' .. ' + r2 + '}';\n        }\n      }\n\n      return rv;\n    },\n\n    /**\n     * test the lexed token: return FALSE when not a match, otherwise return token.\n     * \n     * `match` is supposed to be an array coming out of a regex match, i.e. `match[0]`\n     * contains the actually matched text string.\n     * \n     * Also move the input cursor forward and update the match collectors:\n     * \n     * - `yytext`\n     * - `yyleng`\n     * - `match`\n     * - `matches`\n     * - `yylloc`\n     * - `offset`\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    test_match: function lexer_test_match(match, indexed_rule) {\n      var token, lines, backup, match_str, match_str_len;\n\n      if (this.options.backtrack_lexer) {\n        // save context\n        backup = {\n          yylineno: this.yylineno,\n\n          yylloc: {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylloc.last_line,\n            first_column: this.yylloc.first_column,\n            last_column: this.yylloc.last_column,\n            range: this.yylloc.range.slice(0)\n          },\n\n          yytext: this.yytext,\n          match: this.match,\n          matches: this.matches,\n          matched: this.matched,\n          yyleng: this.yyleng,\n          offset: this.offset,\n          _more: this._more,\n          _input: this._input,\n\n          //_signaled_error_token: this._signaled_error_token,\n          yy: this.yy,\n\n          conditionStack: this.conditionStack.slice(0),\n          done: this.done\n        };\n      }\n\n      match_str = match[0];\n      match_str_len = match_str.length;\n\n      // if (match_str.indexOf('\\n') !== -1 || match_str.indexOf('\\r') !== -1) {\n      lines = match_str.split(/(?:\\r\\n?|\\n)/g);\n\n      if (lines.length > 1) {\n        this.yylineno += lines.length - 1;\n        this.yylloc.last_line = this.yylineno + 1;\n        this.yylloc.last_column = lines[lines.length - 1].length;\n      } else {\n        this.yylloc.last_column += match_str_len;\n      }\n\n      // }\n      this.yytext += match_str;\n\n      this.match += match_str;\n      this.matched += match_str;\n      this.matches = match;\n      this.yyleng = this.yytext.length;\n      this.yylloc.range[1] += match_str_len;\n\n      // previous lex rules MAY have invoked the `more()` API rather than producing a token:\n      // those rules will already have moved this `offset` forward matching their match lengths,\n      // hence we must only add our own match length now:\n      this.offset += match_str_len;\n\n      this._more = false;\n      this._backtrack = false;\n      this._input = this._input.slice(match_str_len);\n\n      // calling this method:\n      //\n      //   function lexer__performAction(yy, yyrulenumber, YY_START) {...}\n      token = this.performAction.call(\n        this,\n        this.yy,\n        indexed_rule,\n        this.conditionStack[this.conditionStack.length - 1] /* = YY_START */\n      );\n\n      // otherwise, when the action codes are all simple return token statements:\n      //token = this.simpleCaseActionClusters[indexed_rule];\n\n      if (this.done && this._input) {\n        this.done = false;\n      }\n\n      if (token) {\n        return token;\n      } else if (this._backtrack) {\n        // recover context\n        for (var k in backup) {\n          this[k] = backup[k];\n        }\n\n        this.__currentRuleSet__ = null;\n        return false; // rule action called reject() implying the next rule should be tested instead.\n      } else if (this._signaled_error_token) {\n        // produce one 'error' token as `.parseError()` in `reject()`\n        // did not guarantee a failure signal by throwing an exception!\n        token = this._signaled_error_token;\n\n        this._signaled_error_token = false;\n        return token;\n      }\n\n      return false;\n    },\n\n    /**\n     * return next match in input\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    next: function lexer_next() {\n      if (this.done) {\n        this.clear();\n        return this.EOF;\n      }\n\n      if (!this._input) {\n        this.done = true;\n      }\n\n      var token, match, tempMatch, index;\n\n      if (!this._more) {\n        this.clear();\n      }\n\n      var spec = this.__currentRuleSet__;\n\n      if (!spec) {\n        // Update the ruleset cache as we apparently encountered a state change or just started lexing.\n        // The cache is set up for fast lookup -- we assume a lexer will switch states much less often than it will\n        // invoke the `lex()` token-producing API and related APIs, hence caching the set for direct access helps\n        // speed up those activities a tiny bit.\n        spec = this.__currentRuleSet__ = this._currentRules();\n\n        // Check whether a *sane* condition has been pushed before: this makes the lexer robust against\n        // user-programmer bugs such as https://github.com/zaach/jison-lex/issues/19\n        if (!spec || !spec.rules) {\n          var lineno_msg = '';\n\n          if (this.options.trackPosition) {\n            lineno_msg = ' on line ' + (this.yylineno + 1);\n          }\n\n          var p = this.constructLexErrorInfo(\n            'Internal lexer engine error' + lineno_msg + ': The lex grammar programmer pushed a non-existing condition name \"' + this.topState() + '\"; this is a fatal error and should be reported to the application programmer team!',\n            false\n          );\n\n          // produce one 'error' token until this situation has been resolved, most probably by parse termination!\n          return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;\n        }\n      }\n\n      var rule_ids = spec.rules;\n      var regexes = spec.__rule_regexes;\n      var len = spec.__rule_count;\n\n      // Note: the arrays are 1-based, while `len` itself is a valid index,\n      // hence the non-standard less-or-equal check in the next loop condition!\n      for (var i = 1; i <= len; i++) {\n        tempMatch = this._input.match(regexes[i]);\n\n        if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n          match = tempMatch;\n          index = i;\n\n          if (this.options.backtrack_lexer) {\n            token = this.test_match(tempMatch, rule_ids[i]);\n\n            if (token !== false) {\n              return token;\n            } else if (this._backtrack) {\n              match = undefined;\n              continue; // rule action called reject() implying a rule MISmatch.\n            } else {\n              // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n              return false;\n            }\n          } else if (!this.options.flex) {\n            break;\n          }\n        }\n      }\n\n      if (match) {\n        token = this.test_match(match, rule_ids[index]);\n\n        if (token !== false) {\n          return token;\n        }\n\n        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n        return false;\n      }\n\n      if (!this._input) {\n        this.done = true;\n        this.clear();\n        return this.EOF;\n      } else {\n        var lineno_msg = '';\n\n        if (this.options.trackPosition) {\n          lineno_msg = ' on line ' + (this.yylineno + 1);\n        }\n\n        var p = this.constructLexErrorInfo(\n          'Lexical error' + lineno_msg + ': Unrecognized text.',\n          this.options.lexerErrorsAreRecoverable\n        );\n\n        var pendingInput = this._input;\n        var activeCondition = this.topState();\n        var conditionStackDepth = this.conditionStack.length;\n        token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;\n\n        if (token === this.ERROR) {\n          // we can try to recover from a lexer error that `parseError()` did not 'recover' for us\n          // by moving forward at least one character at a time IFF the (user-specified?) `parseError()`\n          // has not consumed/modified any pending input or changed state in the error handler:\n          if (!this.matches && // and make sure the input has been modified/consumed ...\n          pendingInput === this._input && // ...or the lexer state has been modified significantly enough\n          // to merit a non-consuming error handling action right now.\n          activeCondition === this.topState() && conditionStackDepth === this.conditionStack.length) {\n            this.input();\n          }\n        }\n\n        return token;\n      }\n    },\n\n    /**\n     * return next match that has a token\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    lex: function lexer_lex() {\n      var r;\n\n      // allow the PRE/POST handlers set/modify the return token for maximum flexibility of the generated lexer:\n      if (typeof this.pre_lex === 'function') {\n        r = this.pre_lex.call(this, 0);\n      }\n\n      if (typeof this.options.pre_lex === 'function') {\n        // (also account for a userdef function which does not return any value: keep the token as is)\n        r = this.options.pre_lex.call(this, r) || r;\n      }\n\n      if (this.yy && typeof this.yy.pre_lex === 'function') {\n        // (also account for a userdef function which does not return any value: keep the token as is)\n        r = this.yy.pre_lex.call(this, r) || r;\n      }\n\n      while (!r) {\n        r = this.next();\n      }\n\n      if (this.yy && typeof this.yy.post_lex === 'function') {\n        // (also account for a userdef function which does not return any value: keep the token as is)\n        r = this.yy.post_lex.call(this, r) || r;\n      }\n\n      if (typeof this.options.post_lex === 'function') {\n        // (also account for a userdef function which does not return any value: keep the token as is)\n        r = this.options.post_lex.call(this, r) || r;\n      }\n\n      if (typeof this.post_lex === 'function') {\n        // (also account for a userdef function which does not return any value: keep the token as is)\n        r = this.post_lex.call(this, r) || r;\n      }\n\n      return r;\n    },\n\n    /**\n     * return next match that has a token. Identical to the `lex()` API but does not invoke any of the \n     * `pre_lex()` nor any of the `post_lex()` callbacks.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    fastLex: function lexer_fastLex() {\n      var r;\n\n      while (!r) {\n        r = this.next();\n      }\n\n      return r;\n    },\n\n    /**\n     * return info about the lexer state that can help a parser or other lexer API user to use the\n     * most efficient means available. This API is provided to aid run-time performance for larger\n     * systems which employ this lexer.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    canIUse: function lexer_canIUse() {\n      var rv = {\n        fastLex: !(typeof this.pre_lex === 'function' || typeof this.options.pre_lex === 'function' || this.yy && typeof this.yy.pre_lex === 'function' || this.yy && typeof this.yy.post_lex === 'function' || typeof this.options.post_lex === 'function' || typeof this.post_lex === 'function') && typeof this.fastLex === 'function'\n      };\n\n      return rv;\n    },\n\n    /**\n     * backwards compatible alias for `pushState()`;\n     * the latter is symmetrical with `popState()` and we advise to use\n     * those APIs in any modern lexer code, rather than `begin()`.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    begin: function lexer_begin(condition) {\n      return this.pushState(condition);\n    },\n\n    /**\n     * activates a new lexer condition state (pushes the new lexer\n     * condition state onto the condition stack)\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    pushState: function lexer_pushState(condition) {\n      this.conditionStack.push(condition);\n      this.__currentRuleSet__ = null;\n      return this;\n    },\n\n    /**\n     * pop the previously active lexer condition state off the condition\n     * stack\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    popState: function lexer_popState() {\n      var n = this.conditionStack.length - 1;\n\n      if (n > 0) {\n        this.__currentRuleSet__ = null;\n        return this.conditionStack.pop();\n      } else {\n        return this.conditionStack[0];\n      }\n    },\n\n    /**\n     * return the currently active lexer condition state; when an index\n     * argument is provided it produces the N-th previous condition state,\n     * if available\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    topState: function lexer_topState(n) {\n      n = this.conditionStack.length - 1 - Math.abs(n || 0);\n\n      if (n >= 0) {\n        return this.conditionStack[n];\n      } else {\n        return 'INITIAL';\n      }\n    },\n\n    /**\n     * (internal) determine the lexer rule set which is active for the\n     * currently active lexer condition state\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    _currentRules: function lexer__currentRules() {\n      if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n        return this.conditions[this.conditionStack[this.conditionStack.length - 1]];\n      } else {\n        return this.conditions['INITIAL'];\n      }\n    },\n\n    /**\n     * return the number of states currently on the stack\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    stateStackSize: function lexer_stateStackSize() {\n      return this.conditionStack.length;\n    },\n\n    options: {\n      trackPosition: true\n    },\n\n    JisonLexerError: JisonLexerError,\n\n    performAction: function lexer__performAction(yy, yyrulenumber, YY_START) {\n      var yy_ = this;\n      var YYSTATE = YY_START;\n\n      switch (yyrulenumber) {\n      case 1:\n        /*! Conditions:: INITIAL */\n        /*! Rule::       \\.\\.\\.\\w+ */\n        debug('spread');\n\n        return 5;\n        break;\n\n      case 3:\n        /*! Conditions:: INITIAL */\n        /*! Rule::       \\s*[^= ,]+ */\n        this.pushState('AFTER_NAME');\n\n        return 3;\n        break;\n\n      case 4:\n        /*! Conditions:: AFTER_NAME */\n        /*! Rule::       \\s*=\\s* */\n        this.popState();\n\n        this.pushState('AFTER_EQ');\n        return 4;\n        break;\n\n      case 5:\n        /*! Conditions:: AFTER_EQ */\n        /*! Rule::       \\[[^\\]]+\\] */\n        this.popState();\n\n        return 6;\n        break;\n\n      case 6:\n        /*! Conditions:: AFTER_EQ */\n        /*! Rule::       \\{[^\\}]+\\} */\n        this.popState();\n\n        return 6;\n        break;\n\n      case 7:\n        /*! Conditions:: AFTER_EQ */\n        /*! Rule::       \"[^\"]+\" */\n        this.popState();\n\n        return 6;\n        break;\n\n      case 8:\n        /*! Conditions:: AFTER_EQ */\n        /*! Rule::       '([^']|\\\\')+'\\s*$ */\n        this.popState();\n\n        this.pushState('VARS');\n        return 7;\n        break;\n\n      case 9:\n        /*! Conditions:: AFTER_EQ */\n        /*! Rule::       '([^']|\\\\')+' */\n        this.popState();\n\n        this.pushState('VARS');\n        return 7;\n        break;\n\n      case 10:\n        /*! Conditions:: AFTER_EQ */\n        /*! Rule::       \\w+\\(\\) */\n        this.popState();\n\n        return 6;\n        break;\n\n      case 11:\n        /*! Conditions:: AFTER_EQ */\n        /*! Rule::       [^=]+=(?!>) */\n        debug('<AFTER_EQ>[^=]+\\'=\\'');\n\n        debug('1 yy_.yytext=', yy_.yytext);\n        const lastSepIndex = findLastSeparatorIndex(yy_.yytext);\n        debug('lastSepIndex=', lastSepIndex);\n        debug('yy_.yytext.length=', yy_.yytext.length);\n        const nextToken = yy_.yytext.substring(lastSepIndex);\n        debug('nextToken=', nextToken);\n        this.unput(nextToken);\n        yy_.yytext = yy_.yytext.substring(0, lastSepIndex);\n        yy_.yytext = yy_.yytext.removeFromEnd(' ');\n        yy_.yytext = yy_.yytext.removeFromEnd(',');\n        debug('2 yy_.yytext=' + yy_.yytext);\n\n        // debug('this.matches=', this.matches)\n\n        // if (yy_.yytext.includes('=')) {\n        //   debug('\"=\" was found')\n        //   // oh, great\n        //   // TODO:\n        // }\n        // else {\n        //   debug('\"=\" NOT found')\n        // }\n        this.popState();\n\n        this.popState();\n        return 6;\n        break;\n\n      case 12:\n        /*! Conditions:: VARS */\n        /*! Rule::       \\s*\\+\\s*\\w+ */\n        return ['VAR', 'PLUS'];\n\n        break;\n\n      case 13:\n        /*! Conditions:: VARS */\n        /*! Rule::       ,\\s* */\n        this.popState();\n\n        return 10;\n        break;\n\n      case 14:\n        /*! Conditions:: VARS */\n        /*! Rule::       {space} */\n        this.popState();\n\n        return 9;\n        break;\n\n      case 15:\n        /*! Conditions:: AFTER_EQ */\n        /*! Rule::       .+ */\n        // id=id\n        this.popState();\n\n        return 6;\n        break;\n\n      case 16:\n        /*! Conditions:: AFTER_NAME */\n        /*! Rule::       ,{space}* */\n        debug('<AFTER_NAME>\\',\\'');\n\n        this.popState();\n        return 10;\n        break;\n\n      case 17:\n        /*! Conditions:: AFTER_NAME */\n        /*! Rule::       {space} */\n        debug('<AFTER_NAME>{space}');\n\n        this.popState();\n        return 9;\n        break;\n\n      default:\n        return this.simpleCaseActionClusters[yyrulenumber];\n      }\n    },\n\n    simpleCaseActionClusters: {\n      /*! Conditions:: INITIAL */\n      /*! Rule::       ,\\s* */\n      0: 10,\n\n      /*! Conditions:: INITIAL */\n      /*! Rule::       {space} */\n      2: 9\n    },\n\n    rules: [\n      /*  0: */  /^(?:,\\s*)/,\n      /*  1: */  /^(?:\\.\\.\\.\\w+)/,\n      /*  2: */  /^(?:([   -​\\u2028\\u2029　]))/,\n      /*  3: */  /^(?:\\s*[^= ,]+)/,\n      /*  4: */  /^(?:\\s*=\\s*)/,\n      /*  5: */  /^(?:\\[[^\\]]+\\])/,\n      /*  6: */  /^(?:\\{[^}]+\\})/,\n      /*  7: */  /^(?:\"[^\"]+\")/,\n      /*  8: */  /^(?:'([^']|\\\\')+'\\s*$)/,\n      /*  9: */  /^(?:'([^']|\\\\')+')/,\n      /* 10: */  /^(?:\\w+\\(\\))/,\n      /* 11: */  /^(?:[^=]+=(?!>))/,\n      /* 12: */  /^(?:\\s*\\+\\s*\\w+)/,\n      /* 13: */  /^(?:,\\s*)/,\n      /* 14: */  /^(?:([   -​\\u2028\\u2029　]))/,\n      /* 15: */  /^(?:.+)/,\n      /* 16: */  /^(?:,([   -​\\u2028\\u2029　])*)/,\n      /* 17: */  /^(?:([   -​\\u2028\\u2029　]))/\n    ],\n\n    conditions: {\n      'AFTER_NAME': {\n        rules: [4, 16, 17],\n        inclusive: false\n      },\n\n      'AFTER_EQ': {\n        rules: [5, 6, 7, 8, 9, 10, 11, 15],\n        inclusive: false\n      },\n\n      'VARS': {\n        rules: [12, 13, 14],\n        inclusive: false\n      },\n\n      'INITIAL': {\n        rules: [0, 1, 2, 3],\n        inclusive: true\n      }\n    }\n  };\n\n  return lexer;\n}();\nparser.lexer = lexer;\n\nimport assert from \"assert\"\nimport util from \"util\"\nimport {} from \"@foo-dog/utils\"\nimport _ from \"lodash\"\nimport debugFunc from 'debug'\nimport parseAttrs from './attrs.js'\nimport parseInline from './inline.js'\nimport { AttrResolver } from '@foo-dog/attrs'\n\nconst TEXT_TAGS_ALLOW_SUB_TAGS = true\n\nconst debug = debugFunc('pug-line-lexer:attrs')\n\nlet tagAlreadyFound = false\nlet obj, name, value\nvar lparenOpen = false\nconst keysToMergeText = ['therest']\nconst quoteStack = []\nconst parens = []\n\nfunction findLastSeparatorIndex(str) {\n  let index = str.length - 2\n  let letterFoundIndex = -1\n  while(letterFoundIndex == -1 && index > -1) {\n    const c = str.charAt(index)\n    if (/\\w/.test(c)) {\n      letterFoundIndex = index\n    }\n    index--\n  }\n  const substr = str.substring(0, letterFoundIndex)\n  return Math.max(substr.lastIndexOf(' '), substr.lastIndexOf(','))\n}\n\nfunction parseNumber(str) {\n  try {\n    if (str.includes('.')) {\n      return parseFloat(str)\n    }\n    else {\n      return parseInt(str)\n    }\n  } catch (e) {\n    console.error('Unparseable string \"' + str + '\"')\n    return NaN\n  }\n}\n\nparser.main = function () {\n  \n  tagAlreadyFound = false\n  lparenOpen = false\n\n\n\n  function test(input, expected, strict = true ) {\n    tagAlreadyFound = false\n    lparenOpen = false\n    debug(`\\nTesting '${input}'...`)\n    var actual = parser.parse(input)\n    debug(input + ' ==> ', util.inspect(actual))\n    \n    let compareFunc\n    if (strict)\n      compareFunc = assert.deepEqual\n    else \n      compareFunc = dyp\n\n    compareFunc.call({}, actual, expected)\n  }\n\ntest('abc,', [{name: 'abc'}])\ntest('foo, bar, baz', [{name: 'foo'}, {name: 'bar'}, {name: 'baz'}])\ntest(\"value='foo' selected\", [{name: 'value', val: \"'foo'\"}, {name: 'selected'}])\ntest(\"selected value='bar'\", [ { name: 'selected' }, { name: 'value', val: \"'bar'\" } ])\n\ntest(\"name='viewport' content='width=device-width'\", [{name: 'name', val: \"'viewport'\"}, {name: 'content', val: \"'width=device-width'\"}])\ntest(\"content='I came across a problem in Internet Explorer (it wasn\\\\'t a problem with Firefox) when I...'\", [{ name: 'content', val: \"'I came across a problem in Internet Explorer (it wasn\\\\'t a problem with Firefox) when I...'\" }])\ntest(\"property='og:description' content='I came across a problem in Internet Explorer (it wasn\\\\'t a problem with Firefox) when I...'\", [{ name: 'property', val: \"'og:description'\" }, { name: 'content', val: \"'I came across a problem in Internet Explorer (it wasn\\\\'t a problem with Firefox) when I...'\" }])\ntest(`foo=null bar=bar`, [{ name: 'foo', val: 'null' }, { name: 'bar', val: 'bar' }])\ntest(`data-epoc=new Date(0)`, [{ name: 'data-epoc', val: 'new Date(0)' }])\ntest(`class= (tags || []).map((tag) => tag.replaceAll(\" \", \"_\")).join(\" \")`, [{ name: 'class', val: '(tags || []).map((tag) => tag.replaceAll(\" \", \"_\")).join(\" \")'}])\ntest('id=id', [{ name: 'id', val: 'id'}])\n\ntest(`class=['foo', 'bar', 'baz']`, [{ name: 'class', val: \"['foo', 'bar', 'baz']\" }])\n\n// commenting this all out for now while I test pug-attr {\ntest(`class='bar'`, [{ name: 'class', val: \"'bar'\" }])\n// test(`class={foo: true, bar: false, baz: true}`, [{ name: 'class', val: \"[ 'foo', 'baz' ]\" }])\n// test(`v-for=\"item in items\" :name=\"item.id\" :value=\"item.name\"`, [{\n//   name: \"v-for\",\n//   val: \"item in items\"\n// }, {\n//   name: \":name\",\n//   val: \"item.id\"\n// }, {\n//   name: \":value\",\n//   val: \"item.name\"\n// }])\n\n// test(`class= (tags || []).map((tag) => tag.replaceAll(\" \", \"_\")).join(\" \")`, [{\n//   assignment: true,\n//   val: `(tags || []).map((tag) => tag.replaceAll(\" \", \"_\")).join(\" \")`,\n//   name: 'class'\n// }])\n\n// // url is a variable in a mixin\n// test(`href=url`, [\n//     { name: 'href', assignment: true, val: 'url' }\n//   ])\n\n// }\n\ntest(`data-escaped={message: \"Let's rock!\"}`, [{ name: 'data-escaped', val: '{message: \"Let\\'s rock!\"}' }])\ntest(`data-items=[1,2,3]`, [{ name: 'data-items', val: '[1,2,3]' }])\ntest(`href  =  '/user/' + id, class  =  'button'`, [{name: 'href', val: \"'/user/' + id\"}, {name: 'class', val: \"'button'\"}])\n\n// I'm not supporting this right now\n// test(`href='/user/' + id, class='button'`, [{\n//   name: 'href',\n//   assignment: true,\n//   val: '\"/user/\" + id'\n// },\n// {name: 'class', val: 'button'}])\n\n// test(`class = ['class1', 'class2']`, [{ name: 'class', val: 'class1 class2'}])\n\ntest(`href='/user/' + id, class='button'`, [\n  {\n    name: 'href',\n    val: \"'/user/' + id\"\n  },\n  {\n    name: 'class',\n    val: \"'button'\"\n  }\n])\ntest(`key='answer', value=answer()`, [\n  {\n    name: 'key',\n    val: \"'answer'\"\n  },\n  {\n    name: 'value',\n    val: 'answer()'\n  }\n])\ntest(`class = ['class1', 'class2']`, [\n  {\n    name: 'class',\n    val: \"['class1', 'class2']\"\n  }\n])\ntest(`href='/user/' + id class='button'`, [ {\n    name: 'href',\n    val: \"'/user/' + id\"\n  },  {\n    name: 'class',\n    val: \"'button'\"\n  }])\ntest(`href  =  '/user/' + id class  =  'button'`, [ {\n    name: 'href',\n    val: \"'/user/' + id\"\n  },  {\n    name: 'class',\n    val: \"'button'\"\n  }])\ntest(`key='answer' value=answer()`, [\n  {\n    name: 'key',\n    val: \"'answer'\"\n  },\n  {\n    name: 'value',\n    val: 'answer()'\n  }\n])\ntest(`class = ['class1', 'class2']`, [\n  {\n    name: 'class',\n    val: \"['class1', 'class2']\"\n  }\n])\ntest(`class = ['class1', 'class2']`, [\n  {\n    name: 'class',\n    val: \"['class1', 'class2']\"\n  }\n])\n\n// test(`id=id)&attributes({foo: 'bar'}`, {})\n// - var bar = null\n// test(`foo=null bar=bar)&attributes({baz: 'baz'}`. [])\n\ntest(`...object`, [{name: '...object', val: '...object'}])\ntest(`...object after=\"after\"`, [{name: '...object', val: '...object'}, {name: 'after', val: '\"after\"'}])\ntest(`before=\"before\" ...object`, [{name: 'before', val: '\"before\"'}, {name: '...object', val: '...object'}])\ntest(`before=\"before\" ...object after=\"after\"`, [{name: 'before', val: '\"before\"'}, {name: '...object', val: '...object'}, {name: 'after', val: '\"after\"'}])\n\n};\n\n\nfunction Parser() {\n    this.yy = {};\n}\nParser.prototype = parser;\nparser.Parser = Parser;\n\nfunction yyparse() {\n    return parser.parse.apply(parser, arguments);\n}\n\n\n\nexport default {\n    parser,\n    Parser,\n    parse: yyparse,\n    \n};\n\n","\n/* parser generated by jison 0.6.1-216 */\n\n/*\n * Returns a Parser object of the following structure:\n *\n *  Parser: {\n *    yy: {}     The so-called \"shared state\" or rather the *source* of it;\n *               the real \"shared state\" `yy` passed around to\n *               the rule actions, etc. is a derivative/copy of this one,\n *               not a direct reference!\n *  }\n *\n *  Parser.prototype: {\n *    yy: {},\n *    EOF: 1,\n *    TERROR: 2,\n *\n *    trace: function(errorMessage, ...),\n *\n *    JisonParserError: function(msg, hash),\n *\n *    quoteName: function(name),\n *               Helper function which can be overridden by user code later on: put suitable\n *               quotes around literal IDs in a description string.\n *\n *    originalQuoteName: function(name),\n *               The basic quoteName handler provided by JISON.\n *               `cleanupAfterParse()` will clean up and reset `quoteName()` to reference this function\n *               at the end of the `parse()`.\n *\n *    describeSymbol: function(symbol),\n *               Return a more-or-less human-readable description of the given symbol, when\n *               available, or the symbol itself, serving as its own 'description' for lack\n *               of something better to serve up.\n *\n *               Return NULL when the symbol is unknown to the parser.\n *\n *    symbols_: {associative list: name ==> number},\n *    terminals_: {associative list: number ==> name},\n *    nonterminals: {associative list: rule-name ==> {associative list: number ==> rule-alt}},\n *    terminal_descriptions_: (if there are any) {associative list: number ==> description},\n *    productions_: [...],\n *\n *    performAction: function parser__performAction(yytext, yyleng, yylineno, yyloc, yystate, yysp, yyvstack, yylstack, yystack, yysstack),\n *\n *               The function parameters and `this` have the following value/meaning:\n *               - `this`    : reference to the `yyval` internal object, which has members (`$` and `_$`)\n *                             to store/reference the rule value `$$` and location info `@$`.\n *\n *                 One important thing to note about `this` a.k.a. `yyval`: every *reduce* action gets\n *                 to see the same object via the `this` reference, i.e. if you wish to carry custom\n *                 data from one reduce action through to the next within a single parse run, then you\n *                 may get nasty and use `yyval` a.k.a. `this` for storing you own semi-permanent data.\n *\n *                 `this.yy` is a direct reference to the `yy` shared state object.\n *\n *                 `%parse-param`-specified additional `parse()` arguments have been added to this `yy`\n *                 object at `parse()` start and are therefore available to the action code via the\n *                 same named `yy.xxxx` attributes (where `xxxx` represents a identifier name from\n *                 the %parse-param` list.\n *\n *               - `yytext`  : reference to the lexer value which belongs to the last lexer token used\n *                             to match this rule. This is *not* the look-ahead token, but the last token\n *                             that's actually part of this rule.\n *\n *                 Formulated another way, `yytext` is the value of the token immediately preceeding\n *                 the current look-ahead token.\n *                 Caveats apply for rules which don't require look-ahead, such as epsilon rules.\n *\n *               - `yyleng`  : ditto as `yytext`, only now for the lexer.yyleng value.\n *\n *               - `yylineno`: ditto as `yytext`, only now for the lexer.yylineno value.\n *\n *               - `yyloc`   : ditto as `yytext`, only now for the lexer.yylloc lexer token location info.\n *\n *                               WARNING: since jison 0.4.18-186 this entry may be NULL/UNDEFINED instead\n *                               of an empty object when no suitable location info can be provided.\n *\n *               - `yystate` : the current parser state number, used internally for dispatching and\n *                               executing the action code chunk matching the rule currently being reduced.\n *\n *               - `yysp`    : the current state stack position (a.k.a. 'stack pointer')\n *\n *                 This one comes in handy when you are going to do advanced things to the parser\n *                 stacks, all of which are accessible from your action code (see the next entries below).\n *\n *                 Also note that you can access this and other stack index values using the new double-hash\n *                 syntax, i.e. `##$ === ##0 === yysp`, while `##1` is the stack index for all things\n *                 related to the first rule term, just like you have `$1`, `@1` and `#1`.\n *                 This is made available to write very advanced grammar action rules, e.g. when you want\n *                 to investigate the parse state stack in your action code, which would, for example,\n *                 be relevant when you wish to implement error diagnostics and reporting schemes similar\n *                 to the work described here:\n *\n *                 + Pottier, F., 2016. Reachability and error diagnosis in LR(1) automata.\n *                   In Journées Francophones des Languages Applicatifs.\n *\n *                 + Jeffery, C.L., 2003. Generating LR syntax error messages from examples.\n *                   ACM Transactions on Programming Languages and Systems (TOPLAS), 25(5), pp.631–640.\n *\n *               - `yyrulelength`: the current rule's term count, i.e. the number of entries occupied on the stack.\n *\n *                 This one comes in handy when you are going to do advanced things to the parser\n *                 stacks, all of which are accessible from your action code (see the next entries below).\n *\n *               - `yyvstack`: reference to the parser value stack. Also accessed via the `$1` etc.\n *                             constructs.\n *\n *               - `yylstack`: reference to the parser token location stack. Also accessed via\n *                             the `@1` etc. constructs.\n *\n *                             WARNING: since jison 0.4.18-186 this array MAY contain slots which are\n *                             UNDEFINED rather than an empty (location) object, when the lexer/parser\n *                             action code did not provide a suitable location info object when such a\n *                             slot was filled!\n *\n *               - `yystack` : reference to the parser token id stack. Also accessed via the\n *                             `#1` etc. constructs.\n *\n *                 Note: this is a bit of a **white lie** as we can statically decode any `#n` reference to\n *                 its numeric token id value, hence that code wouldn't need the `yystack` but *you* might\n *                 want access this array for your own purposes, such as error analysis as mentioned above!\n *\n *                 Note that this stack stores the current stack of *tokens*, that is the sequence of\n *                 already parsed=reduced *nonterminals* (tokens representing rules) and *terminals*\n *                 (lexer tokens *shifted* onto the stack until the rule they belong to is found and\n *                 *reduced*.\n *\n *               - `yysstack`: reference to the parser state stack. This one carries the internal parser\n *                             *states* such as the one in `yystate`, which are used to represent\n *                             the parser state machine in the *parse table*. *Very* *internal* stuff,\n *                             what can I say? If you access this one, you're clearly doing wicked things\n *\n *               - `...`     : the extra arguments you specified in the `%parse-param` statement in your\n *                             grammar definition file.\n *\n *    table: [...],\n *               State transition table\n *               ----------------------\n *\n *               index levels are:\n *               - `state`  --> hash table\n *               - `symbol` --> action (number or array)\n *\n *                 If the `action` is an array, these are the elements' meaning:\n *                 - index [0]: 1 = shift, 2 = reduce, 3 = accept\n *                 - index [1]: GOTO `state`\n *\n *                 If the `action` is a number, it is the GOTO `state`\n *\n *    defaultActions: {...},\n *\n *    parseError: function(str, hash, ExceptionClass),\n *    yyError: function(str, ...),\n *    yyRecovering: function(),\n *    yyErrOk: function(),\n *    yyClearIn: function(),\n *\n *    constructParseErrorInfo: function(error_message, exception_object, expected_token_set, is_recoverable),\n *               Helper function **which will be set up during the first invocation of the `parse()` method**.\n *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.\n *               See it's use in this parser kernel in many places; example usage:\n *\n *                   var infoObj = parser.constructParseErrorInfo('fail!', null,\n *                                     parser.collect_expected_token_set(state), true);\n *                   var retVal = parser.parseError(infoObj.errStr, infoObj, parser.JisonParserError);\n *\n *    originalParseError: function(str, hash, ExceptionClass),\n *               The basic `parseError` handler provided by JISON.\n *               `cleanupAfterParse()` will clean up and reset `parseError()` to reference this function\n *               at the end of the `parse()`.\n *\n *    options: { ... parser %options ... },\n *\n *    parse: function(input[, args...]),\n *               Parse the given `input` and return the parsed value (or `true` when none was provided by\n *               the root action, in which case the parser is acting as a *matcher*).\n *               You MAY use the additional `args...` parameters as per `%parse-param` spec of this grammar:\n *               these extra `args...` are added verbatim to the `yy` object reference as member variables.\n *\n *               WARNING:\n *               Parser's additional `args...` parameters (via `%parse-param`) MAY conflict with\n *               any attributes already added to `yy` by the jison run-time;\n *               when such a collision is detected an exception is thrown to prevent the generated run-time\n *               from silently accepting this confusing and potentially hazardous situation!\n *\n *               The lexer MAY add its own set of additional parameters (via the `%parse-param` line in\n *               the lexer section of the grammar spec): these will be inserted in the `yy` shared state\n *               object and any collision with those will be reported by the lexer via a thrown exception.\n *\n *    cleanupAfterParse: function(resultValue, invoke_post_methods, do_not_nuke_errorinfos),\n *               Helper function **which will be set up during the first invocation of the `parse()` method**.\n *               This helper API is invoked at the end of the `parse()` call, unless an exception was thrown\n *               and `%options no-try-catch` has been defined for this grammar: in that case this helper MAY\n *               be invoked by calling user code to ensure the `post_parse` callbacks are invoked and\n *               the internal parser gets properly garbage collected under these particular circumstances.\n *\n *    yyMergeLocationInfo: function(first_index, last_index, first_yylloc, last_yylloc, dont_look_back),\n *               Helper function **which will be set up during the first invocation of the `parse()` method**.\n *               This helper API can be invoked to calculate a spanning `yylloc` location info object.\n *\n *               Note: %epsilon rules MAY specify no `first_index` and `first_yylloc`, in which case\n *               this function will attempt to obtain a suitable location marker by inspecting the location stack\n *               backwards.\n *\n *               For more info see the documentation comment further below, immediately above this function's\n *               implementation.\n *\n *    lexer: {\n *        yy: {...},           A reference to the so-called \"shared state\" `yy` once\n *                             received via a call to the `.setInput(input, yy)` lexer API.\n *        EOF: 1,\n *        ERROR: 2,\n *        JisonLexerError: function(msg, hash),\n *        parseError: function(str, hash, ExceptionClass),\n *        setInput: function(input, [yy]),\n *        input: function(),\n *        unput: function(str),\n *        more: function(),\n *        reject: function(),\n *        less: function(n),\n *        pastInput: function(n),\n *        upcomingInput: function(n),\n *        showPosition: function(),\n *        test_match: function(regex_match_array, rule_index, ...),\n *        next: function(...),\n *        lex: function(...),\n *        begin: function(condition),\n *        pushState: function(condition),\n *        popState: function(),\n *        topState: function(),\n *        _currentRules: function(),\n *        stateStackSize: function(),\n *        cleanupAfterLex: function()\n *\n *        options: { ... lexer %options ... },\n *\n *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START, ...),\n *        rules: [...],\n *        conditions: {associative list: name ==> set},\n *    }\n *  }\n *\n *\n *  token location info (@$, _$, etc.): {\n *    first_line: n,\n *    last_line: n,\n *    first_column: n,\n *    last_column: n,\n *    range: [start_number, end_number]\n *               (where the numbers are indexes into the input string, zero-based)\n *  }\n *\n * ---\n *\n * The `parseError` function receives a 'hash' object with these members for lexer and\n * parser errors:\n *\n *  {\n *    text:        (matched text)\n *    token:       (the produced terminal token, if any)\n *    token_id:    (the produced terminal token numeric ID, if any)\n *    line:        (yylineno)\n *    loc:         (yylloc)\n *  }\n *\n * parser (grammar) errors will also provide these additional members:\n *\n *  {\n *    expected:    (array describing the set of expected tokens;\n *                  may be UNDEFINED when we cannot easily produce such a set)\n *    state:       (integer (or array when the table includes grammar collisions);\n *                  represents the current internal state of the parser kernel.\n *                  can, for example, be used to pass to the `collect_expected_token_set()`\n *                  API to obtain the expected token set)\n *    action:      (integer; represents the current internal action which will be executed)\n *    new_state:   (integer; represents the next/planned internal state, once the current\n *                  action has executed)\n *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule\n *                  available for this particular error)\n *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used,\n *                  for instance, for advanced error analysis and reporting)\n *    value_stack: (array: the current parser LALR/LR internal `$$` value stack; this can be used,\n *                  for instance, for advanced error analysis and reporting)\n *    location_stack: (array: the current parser LALR/LR internal location stack; this can be used,\n *                  for instance, for advanced error analysis and reporting)\n *    yy:          (object: the current parser internal \"shared state\" `yy`\n *                  as is also available in the rule actions; this can be used,\n *                  for instance, for advanced error analysis and reporting)\n *    lexer:       (reference to the current lexer instance used by the parser)\n *    parser:      (reference to the current parser instance)\n *  }\n *\n * while `this` will reference the current parser instance.\n *\n * When `parseError` is invoked by the lexer, `this` will still reference the related *parser*\n * instance, while these additional `hash` fields will also be provided:\n *\n *  {\n *    lexer:       (reference to the current lexer instance which reported the error)\n *  }\n *\n * When `parseError` is invoked by the parser due to a **JavaScript exception** being fired\n * from either the parser or lexer, `this` will still reference the related *parser*\n * instance, while these additional `hash` fields will also be provided:\n *\n *  {\n *    exception:   (reference to the exception thrown)\n *  }\n *\n * Please do note that in the latter situation, the `expected` field will be omitted as\n * this type of failure is assumed not to be due to *parse errors* but rather due to user\n * action code in either parser or lexer failing unexpectedly.\n *\n * ---\n *\n * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.\n * These options are available:\n *\n * ### options which are global for all parser instances\n *\n *  Parser.pre_parse: function(yy)\n *                 optional: you can specify a pre_parse() function in the chunk following\n *                 the grammar, i.e. after the last `%%`.\n *  Parser.post_parse: function(yy, retval, parseInfo) { return retval; }\n *                 optional: you can specify a post_parse() function in the chunk following\n *                 the grammar, i.e. after the last `%%`. When it does not return any value,\n *                 the parser will return the original `retval`.\n *\n * ### options which can be set up per parser instance\n *\n *  yy: {\n *      pre_parse:  function(yy)\n *                 optional: is invoked before the parse cycle starts (and before the first\n *                 invocation of `lex()`) but immediately after the invocation of\n *                 `parser.pre_parse()`).\n *      post_parse: function(yy, retval, parseInfo) { return retval; }\n *                 optional: is invoked when the parse terminates due to success ('accept')\n *                 or failure (even when exceptions are thrown).\n *                 `retval` contains the return value to be produced by `Parser.parse()`;\n *                 this function can override the return value by returning another.\n *                 When it does not return any value, the parser will return the original\n *                 `retval`.\n *                 This function is invoked immediately before `parser.post_parse()`.\n *\n *      parseError: function(str, hash, ExceptionClass)\n *                 optional: overrides the default `parseError` function.\n *      quoteName: function(name),\n *                 optional: overrides the default `quoteName` function.\n *  }\n *\n *  parser.lexer.options: {\n *      pre_lex:  function()\n *                 optional: is invoked before the lexer is invoked to produce another token.\n *                 `this` refers to the Lexer object.\n *      post_lex: function(token) { return token; }\n *                 optional: is invoked when the lexer has produced a token `token`;\n *                 this function can override the returned token value by returning another.\n *                 When it does not return any (truthy) value, the lexer will return\n *                 the original `token`.\n *                 `this` refers to the Lexer object.\n *\n *      ranges: boolean\n *                 optional: `true` ==> token location info will include a .range[] member.\n *      flex: boolean\n *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested\n *                 exhaustively to find the longest match.\n *      backtrack_lexer: boolean\n *                 optional: `true` ==> lexer regexes are tested in order and for invoked;\n *                 the lexer terminates the scan when a token is returned by the action code.\n *      xregexp: boolean\n *                 optional: `true` ==> lexer rule regexes are \"extended regex format\" requiring the\n *                 `XRegExp` library. When this `%option` has not been specified at compile time, all lexer\n *                 rule regexes have been written as standard JavaScript RegExp expressions.\n *  }\n */\n\n\n\n\n\n// See also:\n// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508\n// but we keep the prototype.constructor and prototype.name assignment lines too for compatibility\n// with userland code which might access the derived class in a 'classic' way.\nfunction JisonParserError(msg, hash) {\n    Object.defineProperty(this, 'name', {\n        enumerable: false,\n        writable: false,\n        value: 'JisonParserError'\n    });\n\n    if (msg == null) msg = '???';\n\n    Object.defineProperty(this, 'message', {\n        enumerable: false,\n        writable: true,\n        value: msg\n    });\n\n    this.hash = hash;\n\n    var stacktrace;\n    if (hash && hash.exception instanceof Error) {\n        var ex2 = hash.exception;\n        this.message = ex2.message || msg;\n        stacktrace = ex2.stack;\n    }\n    if (!stacktrace) {\n        if (Error.hasOwnProperty('captureStackTrace')) {        // V8/Chrome engine\n            Error.captureStackTrace(this, this.constructor);\n        } else {\n            stacktrace = (new Error(msg)).stack;\n        }\n    }\n    if (stacktrace) {\n        Object.defineProperty(this, 'stack', {\n            enumerable: false,\n            writable: false,\n            value: stacktrace\n        });\n    }\n}\n\nif (typeof Object.setPrototypeOf === 'function') {\n    Object.setPrototypeOf(JisonParserError.prototype, Error.prototype);\n} else {\n    JisonParserError.prototype = Object.create(Error.prototype);\n}\nJisonParserError.prototype.constructor = JisonParserError;\nJisonParserError.prototype.name = 'JisonParserError';\n\n\n\n\n        // helper: reconstruct the productions[] table\n        function bp(s) {\n            var rv = [];\n            var p = s.pop;\n            var r = s.rule;\n            for (var i = 0, l = p.length; i < l; i++) {\n                rv.push([\n                    p[i],\n                    r[i]\n                ]);\n            }\n            return rv;\n        }\n    \n\n\n        // helper: reconstruct the defaultActions[] table\n        function bda(s) {\n            var rv = {};\n            var d = s.idx;\n            var g = s.goto;\n            for (var i = 0, l = d.length; i < l; i++) {\n                var j = d[i];\n                rv[j] = g[i];\n            }\n            return rv;\n        }\n    \n\n\n        // helper: reconstruct the 'goto' table\n        function bt(s) {\n            var rv = [];\n            var d = s.len;\n            var y = s.symbol;\n            var t = s.type;\n            var a = s.state;\n            var m = s.mode;\n            var g = s.goto;\n            for (var i = 0, l = d.length; i < l; i++) {\n                var n = d[i];\n                var q = {};\n                for (var j = 0; j < n; j++) {\n                    var z = y.shift();\n                    switch (t.shift()) {\n                    case 2:\n                        q[z] = [\n                            m.shift(),\n                            g.shift()\n                        ];\n                        break;\n\n                    case 0:\n                        q[z] = a.shift();\n                        break;\n\n                    default:\n                        // type === 1: accept\n                        q[z] = [\n                            3\n                        ];\n                    }\n                }\n                rv.push(q);\n            }\n            return rv;\n        }\n    \n\n\n        // helper: runlength encoding with increment step: code, length: step (default step = 0)\n        // `this` references an array\n        function s(c, l, a) {\n            a = a || 0;\n            for (var i = 0; i < l; i++) {\n                this.push(c);\n                c += a;\n            }\n        }\n\n        // helper: duplicate sequence from *relative* offset and length.\n        // `this` references an array\n        function c(i, l) {\n            i = this.length - i;\n            for (l += i; i < l; i++) {\n                this.push(this[i]);\n            }\n        }\n\n        // helper: unpack an array using helpers and data, all passed in an array argument 'a'.\n        function u(a) {\n            var rv = [];\n            for (var i = 0, l = a.length; i < l; i++) {\n                var e = a[i];\n                // Is this entry a helper function?\n                if (typeof e === 'function') {\n                    i++;\n                    e.apply(rv, a[i]);\n                } else {\n                    rv.push(e);\n                }\n            }\n            return rv;\n        }\n    \n\nvar parser = {\n    // Code Generator Information Report\n    // ---------------------------------\n    //\n    // Options:\n    //\n    //   default action mode: ............. [\"classic\",\"merge\"]\n    //   test-compile action mode: ........ \"parser:*,lexer:*\"\n    //   try..catch: ...................... true\n    //   default resolve on conflict: ..... true\n    //   on-demand look-ahead: ............ false\n    //   error recovery token skip maximum: 3\n    //   yyerror in parse actions is: ..... NOT recoverable,\n    //   yyerror in lexer actions and other non-fatal lexer are:\n    //   .................................. NOT recoverable,\n    //   debug grammar/output: ............ false\n    //   has partial LR conflict upgrade:   true\n    //   rudimentary token-stack support:   true\n    //   parser table compression mode: ... 2\n    //   export debug tables: ............. false\n    //   export *all* tables: ............. false\n    //   module type: ..................... es\n    //   parser engine type: .............. lalr\n    //   output main() in the module: ..... true\n    //   has user-specified main(): ....... false\n    //   has user-specified require()/import modules for main():\n    //   .................................. false\n    //   number of expected conflicts: .... 0\n    //\n    //\n    // Parser Analysis flags:\n    //\n    //   no significant actions (parser is a language matcher only):\n    //   .................................. false\n    //   uses yyleng: ..................... false\n    //   uses yylineno: ................... false\n    //   uses yytext: ..................... false\n    //   uses yylloc: ..................... false\n    //   uses ParseError API: ............. false\n    //   uses YYERROR: .................... false\n    //   uses YYRECOVERING: ............... false\n    //   uses YYERROK: .................... false\n    //   uses YYCLEARIN: .................. false\n    //   tracks rule values: .............. true\n    //   assigns rule values: ............. true\n    //   uses location tracking: .......... false\n    //   assigns location: ................ false\n    //   uses yystack: .................... false\n    //   uses yysstack: ................... false\n    //   uses yysp: ....................... true\n    //   uses yyrulelength: ............... false\n    //   uses yyMergeLocationInfo API: .... false\n    //   has error recovery: .............. false\n    //   has error reporting: ............. false\n    //\n    // --------- END OF REPORT -----------\n\ntrace: function no_op_trace() { },\nJisonParserError: JisonParserError,\nyy: {},\noptions: {\n  type: \"lalr\",\n  hasPartialLrUpgradeOnConflict: true,\n  errorRecoveryTokenDiscardCount: 3,\n  tokenStack: true,\n  ebnf: true\n},\nsymbols_: {\n  \"$accept\": 0,\n  \"$end\": 1,\n  \"ASSIGNMENT\": 34,\n  \"ASSIGNMENT_VALUE\": 33,\n  \"ATTR_TEXT\": 31,\n  \"ATTR_TEXT_CONT\": 7,\n  \"ATTR_TEXT_END\": 6,\n  \"AT_ATTRS\": 8,\n  \"CLASSNAME\": 12,\n  \"COMMENT\": 18,\n  \"CONDITION\": 32,\n  \"CONDITIONAL\": 26,\n  \"DOT_END\": 24,\n  \"EOF\": 1,\n  \"FILTER\": 30,\n  \"HTML_COMMENT\": 9,\n  \"INTERP_END\": 29,\n  \"INTERP_START\": 27,\n  \"INTERP_VAL\": 28,\n  \"KEYWORD\": 21,\n  \"LPAREN\": 11,\n  \"MIXIN_CALL\": 20,\n  \"MIXIN_PARAMS\": 13,\n  \"NESTED_TAG_START\": 5,\n  \"PIPE\": 22,\n  \"RCURLY\": 23,\n  \"RPAREN\": 14,\n  \"SPACE\": 25,\n  \"TAG\": 15,\n  \"TAG_ID\": 17,\n  \"TEXT\": 3,\n  \"TEXT_TAG\": 16,\n  \"UNBUF_CODE\": 4,\n  \"UNBUF_CODE_BLOCK\": 19,\n  \"UNBUF_CODE_BLOCK_START\": 10,\n  \"attrs\": 40,\n  \"classnames\": 41,\n  \"classnames_repetition_plus\": 45,\n  \"error\": 2,\n  \"first_token\": 38,\n  \"line\": 36,\n  \"line_end\": 42,\n  \"line_splitter\": 43,\n  \"line_start\": 37,\n  \"line_start_option\": 44,\n  \"start\": 35,\n  \"tag_part\": 39\n},\nterminals_: {\n  1: \"EOF\",\n  2: \"error\",\n  3: \"TEXT\",\n  4: \"UNBUF_CODE\",\n  5: \"NESTED_TAG_START\",\n  6: \"ATTR_TEXT_END\",\n  7: \"ATTR_TEXT_CONT\",\n  8: \"AT_ATTRS\",\n  9: \"HTML_COMMENT\",\n  10: \"UNBUF_CODE_BLOCK_START\",\n  11: \"LPAREN\",\n  12: \"CLASSNAME\",\n  13: \"MIXIN_PARAMS\",\n  14: \"RPAREN\",\n  15: \"TAG\",\n  16: \"TEXT_TAG\",\n  17: \"TAG_ID\",\n  18: \"COMMENT\",\n  19: \"UNBUF_CODE_BLOCK\",\n  20: \"MIXIN_CALL\",\n  21: \"KEYWORD\",\n  22: \"PIPE\",\n  23: \"RCURLY\",\n  24: \"DOT_END\",\n  25: \"SPACE\",\n  26: \"CONDITIONAL\",\n  27: \"INTERP_START\",\n  28: \"INTERP_VAL\",\n  29: \"INTERP_END\",\n  30: \"FILTER\",\n  31: \"ATTR_TEXT\",\n  32: \"CONDITION\",\n  33: \"ASSIGNMENT_VALUE\",\n  34: \"ASSIGNMENT\"\n},\nTERROR: 2,\n    EOF: 1,\n\n    // internals: defined here so the object *structure* doesn't get modified by parse() et al,\n    // thus helping JIT compilers like Chrome V8.\n    originalQuoteName: null,\n    originalParseError: null,\n    cleanupAfterParse: null,\n    constructParseErrorInfo: null,\n    yyMergeLocationInfo: null,\n\n    __reentrant_call_depth: 0,      // INTERNAL USE ONLY\n    __error_infos: [],              // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup\n    __error_recovery_infos: [],     // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup\n\n    // APIs which will be set up depending on user action code analysis:\n    //yyRecovering: 0,\n    //yyErrOk: 0,\n    //yyClearIn: 0,\n\n    // Helper APIs\n    // -----------\n\n    // Helper function which can be overridden by user code later on: put suitable quotes around\n    // literal IDs in a description string.\n    quoteName: function parser_quoteName(id_str) {\n        return '\"' + id_str + '\"';\n    },\n\n    // Return the name of the given symbol (terminal or non-terminal) as a string, when available.\n    //\n    // Return NULL when the symbol is unknown to the parser.\n    getSymbolName: function parser_getSymbolName(symbol) {\n        if (this.terminals_[symbol]) {\n            return this.terminals_[symbol];\n        }\n\n        // Otherwise... this might refer to a RULE token i.e. a non-terminal: see if we can dig that one up.\n        //\n        // An example of this may be where a rule's action code contains a call like this:\n        //\n        //      parser.getSymbolName(#$)\n        //\n        // to obtain a human-readable name of the current grammar rule.\n        var s = this.symbols_;\n        for (var key in s) {\n            if (s[key] === symbol) {\n                return key;\n            }\n        }\n        return null;\n    },\n\n    // Return a more-or-less human-readable description of the given symbol, when available,\n    // or the symbol itself, serving as its own 'description' for lack of something better to serve up.\n    //\n    // Return NULL when the symbol is unknown to the parser.\n    describeSymbol: function parser_describeSymbol(symbol) {\n        if (symbol !== this.EOF && this.terminal_descriptions_ && this.terminal_descriptions_[symbol]) {\n            return this.terminal_descriptions_[symbol];\n        }\n        else if (symbol === this.EOF) {\n            return 'end of input';\n        }\n        var id = this.getSymbolName(symbol);\n        if (id) {\n            return this.quoteName(id);\n        }\n        return null;\n    },\n\n    // Produce a (more or less) human-readable list of expected tokens at the point of failure.\n    //\n    // The produced list may contain token or token set descriptions instead of the tokens\n    // themselves to help turning this output into something that easier to read by humans\n    // unless `do_not_describe` parameter is set, in which case a list of the raw, *numeric*,\n    // expected terminals and nonterminals is produced.\n    //\n    // The returned list (array) will not contain any duplicate entries.\n    collect_expected_token_set: function parser_collect_expected_token_set(state, do_not_describe) {\n        var TERROR = this.TERROR;\n        var tokenset = [];\n        var check = {};\n        // Has this (error?) state been outfitted with a custom expectations description text for human consumption?\n        // If so, use that one instead of the less palatable token set.\n        if (!do_not_describe && this.state_descriptions_ && this.state_descriptions_[state]) {\n            return [\n                this.state_descriptions_[state]\n            ];\n        }\n        for (var p in this.table[state]) {\n            p = +p;\n            if (p !== TERROR) {\n                var d = do_not_describe ? p : this.describeSymbol(p);\n                if (d && !check[d]) {\n                    tokenset.push(d);\n                    check[d] = true;        // Mark this token description as already mentioned to prevent outputting duplicate entries.\n                }\n            }\n        }\n        return tokenset;\n    },\nproductions_: bp({\n  pop: u([\n  35,\n  35,\n  s,\n  [36, 10],\n  s,\n  [37, 9],\n  s,\n  [38, 17],\n  s,\n  [39, 5],\n  40,\n  40,\n  41,\n  s,\n  [42, 6],\n  s,\n  [43, 3],\n  44,\n  44,\n  45,\n  45\n]),\n  rule: u([\n  1,\n  2,\n  1,\n  2,\n  2,\n  3,\n  3,\n  1,\n  c,\n  [8, 3],\n  c,\n  [4, 3],\n  2,\n  3,\n  4,\n  3,\n  3,\n  4,\n  4,\n  s,\n  [1, 15],\n  c,\n  [30, 5],\n  2,\n  1,\n  c,\n  [38, 3],\n  0,\n  s,\n  [1, 8],\n  c,\n  [9, 3],\n  2\n])\n}),\nperformAction: function parser__PerformAction(yystate /* action[1] */, yysp, yyvstack) {\n\n          /* this == yyval */\n\n          // the JS engine itself can go and remove these statements when `yy` turns out to be unused in any action code!\n          var yy = this.yy;\n          var yyparser = yy.parser;\n          var yylexer = yy.lexer;\n\n          \n\n          switch (yystate) {\ncase 0:\n    /*! Production::    $accept : start $end */\n\n    // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-):\n    this.$ = yyvstack[yysp - 1];\n    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-)\n    break;\n\ncase 1:\n    /*! Production::    start : EOF */\ncase 3:\n    /*! Production::    line : line_start */\ncase 13:\n    /*! Production::    line_start : first_token */\ncase 41:\n    /*! Production::    tag_part : classnames */\n\n    // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-):\n    this.$ = yyvstack[yysp];\n    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-)\n    break;\n\ncase 2:\n    /*! Production::    start : line EOF */\n\n    // default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-):\n    this.$ = yyvstack[yysp - 1];\n    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-)\n    break;\n\ncase 4:\n    /*! Production::    line : line_start TEXT */\n\n    debug('line: line_start TEXT: $line_start=', yyvstack[yysp - 1], ', $TEXT=', yyvstack[yysp])\n    \n    // if ($TEXT.includes('#[')) {\n    //   debug('Calling parseInline with ', $TEXT)\n    //   const possibleTags2 = parseInline.parse($TEXT)\n    //   debug('possibleTags2=', possibleTags2)\n    // }\n    // $$ = { type: 'text', val: $TEXT }\n    \n    this.$ = merge(yyvstack[yysp - 1], { type: 'text', val: yyvstack[yysp] })\n    break;\n\ncase 5:\n    /*! Production::    line : line_start UNBUF_CODE */\n\n    this.$ = merge(yyvstack[yysp - 1], { type: 'unbuf_code', val: yyvstack[yysp], state: 'UNBUF_CODE' })\n    break;\n\ncase 6:\n    /*! Production::    line : line_start line_splitter line_end */\n\n    debug('line: line_start line_splitter line_end: $line_start=', yyvstack[yysp - 2], ', $line_end=', yyvstack[yysp])\n    if (yyvstack[yysp] == undefined) {\n      this.$ = merge(yyvstack[yysp - 2], yyvstack[yysp - 1])\n    }\n    else if (yyvstack[yysp].hasOwnProperty('type') && yyvstack[yysp].type == 'array') {\n      this.$ = merge(yyvstack[yysp - 2], [yyvstack[yysp - 1], { children: yyvstack[yysp].val }])\n    }\n    else {\n      this.$ = merge(yyvstack[yysp - 2], [yyvstack[yysp - 1], yyvstack[yysp]])\n    }\n    break;\n\ncase 7:\n    /*! Production::    line : line_start NESTED_TAG_START line */\n\n    this.$ = merge(yyvstack[yysp - 2], { state: 'NESTED', children: [yyvstack[yysp]] })\n    break;\n\ncase 8:\n    /*! Production::    line : ATTR_TEXT_END */\n\n    this.$ = { type: 'attrs_end', val: parseAttrs.parse(yyvstack[yysp]) }\n    break;\n\ncase 9:\n    /*! Production::    line : ATTR_TEXT_CONT */\n\n    this.$ = { type: 'attrs_cont', val: parseAttrs.parse(yyvstack[yysp]), state: 'MULTI_LINE_ATTRS' }\n    break;\n\ncase 10:\n    /*! Production::    line : line_start AT_ATTRS */\n\n    debug('line: line_start AT_ATTRS: $AT_ATTRS=', yyvstack[yysp])\n    if (yyvstack[yysp].includes('{') && yyvstack[yysp].includes('}')) {\n      let func = Function('return (' + yyvstack[yysp].substring(12, yyvstack[yysp].length - 1) + ')')\n      let entries2 = Object.entries(func())\n      debug('entries2=', entries2)\n      let attrs2 = Object.entries(entries2).map(([index, [key, value]]) => {\n        debug('name=', key, 'value=', value)\n        return { name: key, val: value }\n      })\n      this.$ = merge(yyvstack[yysp - 1], { type: 'tag', attrs: attrs2 })\n    }\n    else {\n      this.$ = merge(yyvstack[yysp - 1], \n        { type: 'tag', attrs: [{ val: yyvstack[yysp].substring(12, yyvstack[yysp].length - 1) }]}\n      )\n    }\n    break;\n\ncase 11:\n    /*! Production::    line : HTML_COMMENT */\n\n    debug('$HTML_COMMENT=', yyvstack[yysp])\n    if (yyvstack[yysp].includes('#')) {\n      let elemsReturned = createElems(yyvstack[yysp], this.yy.parser)\n      debug('elemsReturned', JSON.stringify(elemsReturned))\n      this.$ = { type: 'html_comment', children: elemsReturned }\n    }\n    else {\n      this.$ = { type: 'html_comment', val: yyvstack[yysp] }\n    }\n    break;\n\ncase 12:\n    /*! Production::    line : UNBUF_CODE_BLOCK_START */\n\n    this.$ = { type: 'unbuf_code_block', state: 'UNBUF_CODE_BLOCK' }\n    break;\n\ncase 14:\n    /*! Production::    line_start : first_token tag_part */\n\n    debug('line_start: first_token tag_part')\n    this.$ = merge(yyvstack[yysp - 1], yyvstack[yysp])\n    break;\n\ncase 15:\n    /*! Production::    line_start : first_token attrs */\n\n    debug('line_start: first_token attrs')\n    this.$ = merge(yyvstack[yysp - 1], yyvstack[yysp])\n    break;\n\ncase 16:\n    /*! Production::    line_start : first_token LPAREN line_start_option */\n\n    debug('line_start: first_token LPAREN ATTR_TEXT_CONT?')\n    this.$ = merge(yyvstack[yysp - 2], { state: 'MULTI_LINE_ATTRS' })\n    if (yyvstack[yysp]) {\n      debug('3 Calling parseAttrs with ', yyvstack[yysp])\n      try {\n        this.$ = merge(yyvstack[yysp - 2], {  attrs_start: parseAttrs.parse(yyvstack[yysp]) })\n      }\n      catch (e) {\n        console.error('Could not parse attributes=' +yyvstack[yysp], e)\n      }\n    }\n    break;\n\ncase 17:\n    /*! Production::    line_start : first_token tag_part LPAREN ATTR_TEXT_CONT */\n\n    debug('line_start: first_token tag_part LPAREN ATTR_TEXT_CONT')\n    this.$ = merge(yyvstack[yysp - 3], [yyvstack[yysp - 2], yyvstack[yysp]])\n    break;\n\ncase 18:\n    /*! Production::    line_start : first_token tag_part attrs */\n\n    debug('line_start: first_token tag_part attrs')\n    this.$ = merge(yyvstack[yysp - 2], [yyvstack[yysp - 1], yyvstack[yysp]])\n    break;\n\ncase 19:\n    /*! Production::    line_start : first_token attrs CLASSNAME */\n\n    this.$ = merge(yyvstack[yysp - 2], [yyvstack[yysp - 1], { attrs: [ { name: 'class', val: quote(yyvstack[yysp]) } ] }])\n    break;\n\ncase 20:\n    /*! Production::    line_start : first_token tag_part attrs CLASSNAME */\n\n    debug('first_token tag_part attrs CLASSNAME: first_token=', yyvstack[yysp - 3], ', tag_part=', yyvstack[yysp - 2], ', attrs=', yyvstack[yysp - 1], ', CLASSNAME=', yyvstack[yysp])\n    this.$ = merge(yyvstack[yysp - 3], [yyvstack[yysp - 2], yyvstack[yysp - 1], { attrs: [ { name: 'class', val: quote(yyvstack[yysp]) } ] }])\n    break;\n\ncase 21:\n    /*! Production::    line_start : first_token LPAREN MIXIN_PARAMS RPAREN */\n\n    this.$ = merge(yyvstack[yysp - 3], { params: yyvstack[yysp - 1] })\n    break;\n\ncase 22:\n    /*! Production::    first_token : TAG */\n\n    this.$ = { name: yyvstack[yysp], type: 'tag' }\n    break;\n\ncase 23:\n    /*! Production::    first_token : TEXT_TAG */\n\n    this.$ = { name: yyvstack[yysp], type: 'tag', state: 'TEXT_START' }\n    break;\n\ncase 24:\n    /*! Production::    first_token : CLASSNAME */\n\n    this.$ = { type: 'tag', attrs: [ { name: 'class', val: quote(yyvstack[yysp]) } ] }\n    break;\n\ncase 25:\n    /*! Production::    first_token : TAG_ID */\n\n    this.$ = { type: 'tag', id: yyvstack[yysp] }\n    break;\n\ncase 26:\n    /*! Production::    first_token : TEXT */\n\n    // if ($TEXT.includes('#[')) {\n    //   debug('Calling parseInline with ', $TEXT)\n    //   const possibleTags = parseInline.parse($TEXT)\n    //   debug('possibleTags=', possibleTags)\n    // }\n    this.$ = { type: 'text', val: yyvstack[yysp] }\n    break;\n\ncase 27:\n    /*! Production::    first_token : COMMENT */\n\n    this.$ = { type: 'comment', state: 'TEXT_START' }\n    break;\n\ncase 28:\n    /*! Production::    first_token : UNBUF_CODE */\ncase 51:\n    /*! Production::    line_end : UNBUF_CODE */\n\n    this.$ = { type: 'unbuf_code', val: yyvstack[yysp], state: 'UNBUF_CODE' }\n    break;\n\ncase 29:\n    /*! Production::    first_token : UNBUF_CODE_BLOCK */\n\n    this.$ = { type: 'unbuf_code', val: yyvstack[yysp], state: 'UNBUF_CODE_BLOCK' }\n    break;\n\ncase 30:\n    /*! Production::    first_token : MIXIN_CALL */\n\n    debug('MIXIN_CALL=', yyvstack[yysp])\n    this.$ = { type: 'mixin_call', name: yyvstack[yysp].trim(), state: 'MIXIN_CALL' }\n    break;\n\ncase 31:\n    /*! Production::    first_token : KEYWORD */\n\n    this.$ = { type: yyvstack[yysp] }\n    break;\n\ncase 32:\n    /*! Production::    first_token : PIPE */\n\n    this.$ = { type: 'text' }\n    break;\n\ncase 33:\n    /*! Production::    first_token : RCURLY */\n\n    this.$ = { type: 'block_end' }\n    break;\n\ncase 34:\n    /*! Production::    first_token : DOT_END */\n\n    debug('line: DOT_END')\n    this.$ = { state: 'TEXT_START' }\n    break;\n\ncase 35:\n    /*! Production::    first_token : SPACE */\n\n    this.$ = { }\n    break;\n\ncase 36:\n    /*! Production::    first_token : CONDITIONAL */\n\n    this.$ = { type: 'conditional', name: yyvstack[yysp] }\n    break;\n\ncase 37:\n    /*! Production::    first_token : INTERP_START INTERP_VAL INTERP_END */\n\n    debug('line: INTERP_START INTERP_VAL INTERP_END: $INTERP_VAL=', yyvstack[yysp - 1])\n    const resultInterpVal1 = attrResolver.resolve({ name: 'anonymous', val: yyvstack[yysp - 1].slice(2, -1) })\n    this.$ = { type: 'tag', name: resultInterpVal1.val }\n    // $$ = [{ type: 'interpolation', val: $INTERP_VAL.slice(2, -1) }]\n    break;\n\ncase 38:\n    /*! Production::    first_token : INTERP_VAL */\n\n    debug('line: INTERP_VAL: $INTERP_VAL=', yyvstack[yysp])\n    debug('AttrResolver=', AttrResolver)\n    const resultInterpVal2 = attrResolver.resolve({ name: 'anonymous', val: yyvstack[yysp] })\n    debug('AttrResolver returned=', resultInterpVal2)\n    this.$ = { type: 'text', val: resultInterpVal2.val }\n    // parser.parse(result)\n    break;\n\ncase 39:\n    /*! Production::    tag_part : TAG_ID */\n\n    this.$ = { id: yyvstack[yysp] }\n    break;\n\ncase 40:\n    /*! Production::    tag_part : TAG_ID classnames */\n\n    this.$ = merge({ id: yyvstack[yysp - 1] }, yyvstack[yysp])\n    break;\n\ncase 42:\n    /*! Production::    tag_part : classnames TAG_ID */\n\n    this.$ = merge({ id: yyvstack[yysp] }, yyvstack[yysp - 1])\n    break;\n\ncase 43:\n    /*! Production::    tag_part : FILTER */\n\n    this.$ = { filter: yyvstack[yysp] }\n    break;\n\ncase 44:\n    /*! Production::    attrs : LPAREN ATTR_TEXT RPAREN */\n\n    debug('1 Calling parseAttrs with ', yyvstack[yysp - 1])\n    this.$ = {}\n    try {\n      const attrs = parseAttrs.parse(yyvstack[yysp - 1].trim())\n      debug('attrs=', attrs)\n      attrs.forEach(attr => {\n        // if (attr.hasOwnProperty('key') && attr.key == 'class' && !attr.assignment) {\n        //   $$ = merge($$, { classes: attr.val.split(' ') } )\n        //   delete attr.class\n        // }\n        // else if (attr.hasOwnProperty('id')) {\n        //   $$ = merge($$, { id: attr.id } )\n        //   delete attr.id\n        // }\n        // else \n        if (!_.isEmpty(attr)) {\n          this.$ = merge(this.$, { attrs: [attr] })\n        }\n      })\n    } catch (e) {\n      console.error('Error parsing ' + yyvstack[yysp - 1], e)\n    }\n    break;\n\ncase 45:\n    /*! Production::    attrs : LPAREN CONDITION RPAREN */\n\n    debug('attrs: LPAREN CONDITION RPAREN')\n    this.$ = { condition: yyvstack[yysp - 1] }\n    break;\n\ncase 46:\n    /*! Production::    classnames : classnames_repetition_plus */\n\n    let attrs1 = yyvstack[yysp].map(cn => {\n      return { name: 'class', val: quote(cn) } \n    })\n    this.$ = { type: 'tag', attrs: attrs1 }\n    break;\n\ncase 47:\n    /*! Production::    line_end : %epsilon */\n\n    // default action (generated by JISON mode classic/merge :: 0,VT,VA,-,-,-,-,-,-):\n    this.$ = undefined;\n    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,-,-,-,-,-,-)\n    \n    \n    debug('line_end: <blank>')\n    break;\n\ncase 48:\n    /*! Production::    line_end : DOT_END */\n\n    debug('line_end: DOT_END')\n    this.$ = { state: 'TEXT_START' }\n    break;\n\ncase 49:\n    /*! Production::    line_end : ASSIGNMENT_VALUE */\n\n    this.$ = { assignment_val: yyvstack[yysp] }\n    break;\n\ncase 50:\n    /*! Production::    line_end : TEXT */\n\n    debug('line_end: TEXT: $TEXT=', yyvstack[yysp])\n    if (yyvstack[yysp].includes('#')) {\n    \n      let elemsReturned = createElems(yyvstack[yysp], this.yy.parser)\n      debug('elemsReturned', elemsReturned)\n      this.$ = { children: elemsReturned }\n    }\n    else {\n      this.$ = { type: 'text', val: yyvstack[yysp] }\n    }\n    break;\n\ncase 52:\n    /*! Production::    line_end : RPAREN */\n\n    this.$ = { type: 'text', val: yyvstack[yysp] }\n    break;\n\ncase 53:\n    /*! Production::    line_splitter : SPACE */\n\n    debug('line_splitter: SPACE')\n    this.$ = {}\n    break;\n\ncase 54:\n    /*! Production::    line_splitter : ASSIGNMENT */\n\n    this.$ = { assignment: true }\n    break;\n\ncase 55:\n    /*! Production::    line_splitter : DOT_END */\n\n    debug('line_splitter: DOT_END')\n    this.$ = { state: 'TEXT_START' }\n    break;\n\ncase 56:\n    /*! Production::    line_start_option : %epsilon */\n\n    this.$ = undefined;\n    break;\n\ncase 57:\n    /*! Production::    line_start_option : ATTR_TEXT_CONT */\n\n    this.$ = yyvstack[yysp];\n    break;\n\ncase 58:\n    /*! Production::    classnames_repetition_plus : CLASSNAME */\n\n    this.$ = [yyvstack[yysp]];\n    break;\n\ncase 59:\n    /*! Production::    classnames_repetition_plus : classnames_repetition_plus CLASSNAME */\n\n    yyvstack[yysp - 1].push(yyvstack[yysp]);\n    this.$ = yyvstack[yysp - 1];\n    break;\n\n}\n},\ntable: bt({\n  len: u([\n  26,\n  1,\n  0,\n  1,\n  9,\n  s,\n  [0, 4],\n  16,\n  s,\n  [0, 15],\n  1,\n  s,\n  [0, 4],\n  7,\n  24,\n  s,\n  [0, 4],\n  10,\n  9,\n  13,\n  12,\n  10,\n  0,\n  11,\n  c,\n  [19, 6],\n  s,\n  [0, 3],\n  3,\n  c,\n  [49, 3],\n  s,\n  [1, 3],\n  s,\n  [0, 10]\n]),\n  symbol: u([\n  1,\n  3,\n  4,\n  6,\n  7,\n  9,\n  10,\n  12,\n  s,\n  [15, 14, 1],\n  s,\n  [35, 4, 1],\n  s,\n  [1, 3],\n  3,\n  4,\n  5,\n  8,\n  24,\n  25,\n  34,\n  43,\n  c,\n  [9, 5],\n  11,\n  12,\n  17,\n  24,\n  25,\n  30,\n  34,\n  39,\n  40,\n  41,\n  45,\n  28,\n  c,\n  [17, 3],\n  14,\n  24,\n  33,\n  42,\n  c,\n  [60, 21],\n  c,\n  [59, 4],\n  c,\n  [48, 5],\n  c,\n  [58, 3],\n  40,\n  c,\n  [10, 5],\n  12,\n  c,\n  [10, 3],\n  c,\n  [9, 4],\n  7,\n  8,\n  13,\n  24,\n  25,\n  31,\n  32,\n  34,\n  44,\n  c,\n  [80, 7],\n  c,\n  [23, 3],\n  41,\n  45,\n  c,\n  [12, 6],\n  c,\n  [91, 3],\n  c,\n  [35, 5],\n  c,\n  [102, 6],\n  34,\n  29,\n  7,\n  31,\n  32,\n  c,\n  [59, 9],\n  s,\n  [14, 3]\n]),\n  type: u([\n  s,\n  [2, 22],\n  s,\n  [0, 4],\n  1,\n  c,\n  [14, 10],\n  c,\n  [27, 16],\n  c,\n  [24, 20],\n  c,\n  [33, 12],\n  c,\n  [58, 22],\n  c,\n  [22, 20],\n  c,\n  [44, 11],\n  s,\n  [2, 28]\n]),\n  state: u([\n  1,\n  3,\n  4,\n  9,\n  30,\n  36,\n  37,\n  40,\n  42,\n  45,\n  51,\n  4,\n  9,\n  53,\n  55,\n  60,\n  42\n]),\n  mode: u([\n  s,\n  [1, 23],\n  2,\n  c,\n  [8, 8],\n  s,\n  [2, 4],\n  c,\n  [8, 5],\n  c,\n  [19, 3],\n  c,\n  [21, 8],\n  c,\n  [48, 20],\n  c,\n  [40, 5],\n  s,\n  [2, 8],\n  c,\n  [9, 8],\n  c,\n  [52, 4],\n  c,\n  [53, 3],\n  c,\n  [22, 15],\n  c,\n  [10, 17],\n  c,\n  [65, 13],\n  s,\n  [1, 3]\n]),\n  goto: u([\n  2,\n  14,\n  16,\n  s,\n  [5, 4, 1],\n  12,\n  10,\n  s,\n  [11, 4, 2],\n  s,\n  [18, 10, 1],\n  3,\n  28,\n  29,\n  31,\n  32,\n  35,\n  33,\n  34,\n  s,\n  [13, 5],\n  38,\n  43,\n  39,\n  13,\n  13,\n  41,\n  13,\n  44,\n  s,\n  [47, 4, 1],\n  46,\n  47,\n  c,\n  [49, 21],\n  s,\n  [14, 5],\n  52,\n  s,\n  [14, 3],\n  s,\n  [15, 5],\n  54,\n  s,\n  [15, 3],\n  s,\n  [56, 4],\n  59,\n  s,\n  [56, 4],\n  57,\n  58,\n  56,\n  s,\n  [39, 6],\n  43,\n  s,\n  [39, 3],\n  s,\n  [41, 6],\n  61,\n  s,\n  [41, 3],\n  s,\n  [46, 6],\n  62,\n  s,\n  [46, 4],\n  63,\n  64,\n  57,\n  58,\n  s,\n  [18, 5],\n  65,\n  s,\n  [18, 3],\n  66,\n  67,\n  68\n])\n}),\ndefaultActions: bda({\n  idx: u([\n  2,\n  s,\n  [5, 4, 1],\n  s,\n  [10, 15, 1],\n  s,\n  [26, 4, 1],\n  s,\n  [32, 4, 1],\n  41,\n  43,\n  s,\n  [45, 7, 1],\n  54,\n  55,\n  s,\n  [59, 10, 1]\n]),\n  goto: u([\n  1,\n  8,\n  9,\n  11,\n  12,\n  s,\n  [22, 15, 1],\n  38,\n  2,\n  4,\n  5,\n  10,\n  53,\n  54,\n  55,\n  43,\n  58,\n  6,\n  s,\n  [48, 5, 1],\n  7,\n  19,\n  16,\n  57,\n  40,\n  42,\n  59,\n  37,\n  17,\n  20,\n  21,\n  44,\n  45\n])\n}),\nparseError: function parseError(str, hash, ExceptionClass) {\n    if (hash.recoverable) {\n        if (typeof this.trace === 'function') {\n            this.trace(str);\n        }\n        hash.destroy();             // destroy... well, *almost*!\n    } else {\n        if (typeof this.trace === 'function') {\n            this.trace(str);\n        }\n        if (!ExceptionClass) {\n            ExceptionClass = this.JisonParserError;\n        }\n        throw new ExceptionClass(str, hash);\n    }\n},\nparse: function parse(input) {\n    var self = this;\n    var stack = new Array(128);         // token stack: stores token which leads to state at the same index (column storage)\n    var sstack = new Array(128);        // state stack: stores states (column storage)\n    var tstack = [];                    // token stack (only used when `%options token_stack` support has been enabled)\n    var vstack = new Array(128);        // semantic value stack\n\n    var table = this.table;\n    var sp = 0;                         // 'stack pointer': index into the stacks\n\n\n    \n\n\n    var symbol = 0;\n\n\n\n    var TERROR = this.TERROR;\n    var EOF = this.EOF;\n    var ERROR_RECOVERY_TOKEN_DISCARD_COUNT = (this.options.errorRecoveryTokenDiscardCount | 0) || 3;\n    var NO_ACTION = [0, 69 /* === table.length :: ensures that anyone using this new state will fail dramatically! */];\n\n    var lexer;\n    if (this.__lexer__) {\n        lexer = this.__lexer__;\n    } else {\n        lexer = this.__lexer__ = Object.create(this.lexer);\n    }\n\n    var sharedState_yy = {\n        parseError: undefined,\n        quoteName: undefined,\n        lexer: undefined,\n        parser: undefined,\n        pre_parse: undefined,\n        post_parse: undefined,\n        pre_lex: undefined,\n        post_lex: undefined      // WARNING: must be written this way for the code expanders to work correctly in both ES5 and ES6 modes!\n    };\n\n    var ASSERT;\n    if (typeof assert !== 'function') {\n        ASSERT = function JisonAssert(cond, msg) {\n            if (!cond) {\n                throw new Error('assertion failed: ' + (msg || '***'));\n            }\n        };\n    } else {\n        ASSERT = assert;\n    }\n\n    this.yyGetSharedState = function yyGetSharedState() {\n        return sharedState_yy;\n    };\n\n\n\n\n\n\n\n\n    function shallow_copy_noclobber(dst, src) {\n        for (var k in src) {\n            if (typeof dst[k] === 'undefined' && Object.prototype.hasOwnProperty.call(src, k)) {\n                dst[k] = src[k];\n            }\n        }\n    }\n\n    // copy state\n    shallow_copy_noclobber(sharedState_yy, this.yy);\n\n    sharedState_yy.lexer = lexer;\n    sharedState_yy.parser = this;\n\n\n\n\n\n\n    // Does the shared state override the default `parseError` that already comes with this instance?\n    if (typeof sharedState_yy.parseError === 'function') {\n        this.parseError = function parseErrorAlt(str, hash, ExceptionClass) {\n            if (!ExceptionClass) {\n                ExceptionClass = this.JisonParserError;\n            }\n            return sharedState_yy.parseError.call(this, str, hash, ExceptionClass);\n        };\n    } else {\n        this.parseError = this.originalParseError;\n    }\n\n    // Does the shared state override the default `quoteName` that already comes with this instance?\n    if (typeof sharedState_yy.quoteName === 'function') {\n        this.quoteName = function quoteNameAlt(id_str) {\n            return sharedState_yy.quoteName.call(this, id_str);\n        };\n    } else {\n        this.quoteName = this.originalQuoteName;\n    }\n\n    // set up the cleanup function; make it an API so that external code can re-use this one in case of\n    // calamities or when the `%options no-try-catch` option has been specified for the grammar, in which\n    // case this parse() API method doesn't come with a `finally { ... }` block any more!\n    //\n    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,\n    //       or else your `sharedState`, etc. references will be *wrong*!\n    this.cleanupAfterParse = function parser_cleanupAfterParse(resultValue, invoke_post_methods, do_not_nuke_errorinfos) {\n        var rv;\n\n        if (invoke_post_methods) {\n            var hash;\n\n            if (sharedState_yy.post_parse || this.post_parse) {\n                // create an error hash info instance: we re-use this API in a **non-error situation**\n                // as this one delivers all parser internals ready for access by userland code.\n                hash = this.constructParseErrorInfo(null /* no error! */, null /* no exception! */, null, false);\n            }\n\n            if (sharedState_yy.post_parse) {\n                rv = sharedState_yy.post_parse.call(this, sharedState_yy, resultValue, hash);\n                if (typeof rv !== 'undefined') resultValue = rv;\n            }\n            if (this.post_parse) {\n                rv = this.post_parse.call(this, sharedState_yy, resultValue, hash);\n                if (typeof rv !== 'undefined') resultValue = rv;\n            }\n\n            // cleanup:\n            if (hash && hash.destroy) {\n                hash.destroy();\n            }\n        }\n\n        if (this.__reentrant_call_depth > 1) return resultValue;        // do not (yet) kill the sharedState when this is a reentrant run.\n\n        // clean up the lingering lexer structures as well:\n        if (lexer.cleanupAfterLex) {\n            lexer.cleanupAfterLex(do_not_nuke_errorinfos);\n        }\n\n        // prevent lingering circular references from causing memory leaks:\n        if (sharedState_yy) {\n            sharedState_yy.lexer = undefined;\n            sharedState_yy.parser = undefined;\n            if (lexer.yy === sharedState_yy) {\n                lexer.yy = undefined;\n            }\n        }\n        sharedState_yy = undefined;\n        this.parseError = this.originalParseError;\n        this.quoteName = this.originalQuoteName;\n\n        // nuke the vstack[] array at least as that one will still reference obsoleted user values.\n        // To be safe, we nuke the other internal stack columns as well...\n        stack.length = 0;               // fastest way to nuke an array without overly bothering the GC\n        sstack.length = 0;\n\n        vstack.length = 0;\n        sp = 0;\n\n        // nuke the error hash info instances created during this run.\n        // Userland code must COPY any data/references\n        // in the error hash instance(s) it is more permanently interested in.\n        if (!do_not_nuke_errorinfos) {\n            for (var i = this.__error_infos.length - 1; i >= 0; i--) {\n                var el = this.__error_infos[i];\n                if (el && typeof el.destroy === 'function') {\n                    el.destroy();\n                }\n            }\n            this.__error_infos.length = 0;\n\n\n        }\n\n        return resultValue;\n    };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,\n    //       or else your `lexer`, `sharedState`, etc. references will be *wrong*!\n    this.constructParseErrorInfo = function parser_constructParseErrorInfo(msg, ex, expected, recoverable) {\n        var pei = {\n            errStr: msg,\n            exception: ex,\n            text: lexer.match,\n            value: lexer.yytext,\n            token: this.describeSymbol(symbol) || symbol,\n            token_id: symbol,\n            line: lexer.yylineno,\n\n            expected: expected,\n            recoverable: recoverable,\n            state: state,\n            action: action,\n            new_state: newState,\n            symbol_stack: stack,\n            state_stack: sstack,\n            value_stack: vstack,\n\n            stack_pointer: sp,\n            yy: sharedState_yy,\n            lexer: lexer,\n            parser: this,\n\n            // and make sure the error info doesn't stay due to potential\n            // ref cycle via userland code manipulations.\n            // These would otherwise all be memory leak opportunities!\n            //\n            // Note that only array and object references are nuked as those\n            // constitute the set of elements which can produce a cyclic ref.\n            // The rest of the members is kept intact as they are harmless.\n            destroy: function destructParseErrorInfo() {\n                // remove cyclic references added to error info:\n                // info.yy = null;\n                // info.lexer = null;\n                // info.value = null;\n                // info.value_stack = null;\n                // ...\n                var rec = !!this.recoverable;\n                for (var key in this) {\n                    if (this.hasOwnProperty(key) && typeof key === 'object') {\n                        this[key] = undefined;\n                    }\n                }\n                this.recoverable = rec;\n            }\n        };\n        // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!\n        this.__error_infos.push(pei);\n        return pei;\n    };\n\n\n\n\n\n\n\n\n\n\n\n\n\n    function getNonTerminalFromCode(symbol) {\n        var tokenName = self.getSymbolName(symbol);\n        if (!tokenName) {\n            tokenName = symbol;\n        }\n        return tokenName;\n    }\n\n\n    // lex function that supports token stacks\n    function lex() {\n        var token;\n        token = tstack.pop() || lexer.lex() || EOF;\n        // if token isn't its numeric value, convert\n        if (typeof token !== 'number') {\n            if (token instanceof Array) {\n                tstack = token;\n                token = tstack.pop();\n            }\n            // if token isn't its numeric value, convert\n            if (typeof token !== 'number') {\n                token = self.symbols_[token] || token;\n            }\n        }\n\n        return token || EOF;\n    }\n\n\n    var state, action, r, t;\n    var yyval = {\n        $: true,\n        _$: undefined,\n        yy: sharedState_yy\n    };\n    var p;\n    var yyrulelen;\n    var this_production;\n    var newState;\n    var retval = false;\n\n\n    try {\n        this.__reentrant_call_depth++;\n\n        lexer.setInput(input, sharedState_yy);\n\n        // NOTE: we *assume* no lexer pre/post handlers are set up *after* \n        // this initial `setInput()` call: hence we can now check and decide\n        // whether we'll go with the standard, slower, lex() API or the\n        // `fast_lex()` one:\n        if (typeof lexer.canIUse === 'function') {\n            var lexerInfo = lexer.canIUse();\n            if (lexerInfo.fastLex && typeof fastLex === 'function') {\n                lex = fastLex;\n            }\n        } \n\n\n\n        vstack[sp] = null;\n        sstack[sp] = 0;\n        stack[sp] = 0;\n        ++sp;\n\n\n\n\n\n        if (this.pre_parse) {\n            this.pre_parse.call(this, sharedState_yy);\n        }\n        if (sharedState_yy.pre_parse) {\n            sharedState_yy.pre_parse.call(this, sharedState_yy);\n        }\n\n        newState = sstack[sp - 1];\n        for (;;) {\n            // retrieve state number from top of stack\n            state = newState;               // sstack[sp - 1];\n\n            // use default actions if available\n            if (this.defaultActions[state]) {\n                action = 2;\n                newState = this.defaultActions[state];\n            } else {\n                // The single `==` condition below covers both these `===` comparisons in a single\n                // operation:\n                //\n                //     if (symbol === null || typeof symbol === 'undefined') ...\n                if (!symbol) {\n                    symbol = lex();\n                }\n                // read action for current state and first input\n                t = (table[state] && table[state][symbol]) || NO_ACTION;\n                newState = t[1];\n                action = t[0];\n\n\n\n\n\n\n\n\n\n\n\n                // handle parse error\n                if (!action) {\n                    var errStr;\n                    var errSymbolDescr = (this.describeSymbol(symbol) || symbol);\n                    var expected = this.collect_expected_token_set(state);\n\n                    // Report error\n                    if (typeof lexer.yylineno === 'number') {\n                        errStr = 'Parse error on line ' + (lexer.yylineno + 1) + ': ';\n                    } else {\n                        errStr = 'Parse error: ';\n                    }\n                    if (typeof lexer.showPosition === 'function') {\n                        errStr += '\\n' + lexer.showPosition(79 - 10, 10) + '\\n';\n                    }\n                    if (expected.length) {\n                        errStr += 'Expecting ' + expected.join(', ') + ', got unexpected ' + errSymbolDescr;\n                    } else {\n                        errStr += 'Unexpected ' + errSymbolDescr;\n                    }\n                    // we cannot recover from the error!\n                    p = this.constructParseErrorInfo(errStr, null, expected, false);\n                    r = this.parseError(p.errStr, p, this.JisonParserError);\n                    if (typeof r !== 'undefined') {\n                        retval = r;\n                    }\n                    break;\n                }\n\n\n            }\n\n\n\n\n\n\n\n\n\n\n            switch (action) {\n            // catch misc. parse failures:\n            default:\n                // this shouldn't happen, unless resolve defaults are off\n                if (action instanceof Array) {\n                    p = this.constructParseErrorInfo('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol, null, null, false);\n                    r = this.parseError(p.errStr, p, this.JisonParserError);\n                    if (typeof r !== 'undefined') {\n                        retval = r;\n                    }\n                    break;\n                }\n                // Another case of better safe than sorry: in case state transitions come out of another error recovery process\n                // or a buggy LUT (LookUp Table):\n                p = this.constructParseErrorInfo('Parsing halted. No viable error recovery approach available due to internal system failure.', null, null, false);\n                r = this.parseError(p.errStr, p, this.JisonParserError);\n                if (typeof r !== 'undefined') {\n                    retval = r;\n                }\n                break;\n\n            // shift:\n            case 1:\n                stack[sp] = symbol;\n                vstack[sp] = lexer.yytext;\n\n                sstack[sp] = newState; // push state\n\n                ++sp;\n                symbol = 0;\n\n\n\n\n                // Pick up the lexer details for the current symbol as that one is not 'look-ahead' any more:\n\n\n\n\n                continue;\n\n            // reduce:\n            case 2:\n\n\n\n                this_production = this.productions_[newState - 1];  // `this.productions_[]` is zero-based indexed while states start from 1 upwards...\n                yyrulelen = this_production[1];\n\n\n\n\n\n\n\n\n\n\n                r = this.performAction.call(yyval, newState, sp - 1, vstack);\n\n                if (typeof r !== 'undefined') {\n                    retval = r;\n                    break;\n                }\n\n                // pop off stack\n                sp -= yyrulelen;\n\n                // don't overwrite the `symbol` variable: use a local var to speed things up:\n                var ntsymbol = this_production[0];    // push nonterminal (reduce)\n                stack[sp] = ntsymbol;\n                vstack[sp] = yyval.$;\n\n                // goto new state = table[STATE][NONTERMINAL]\n                newState = table[sstack[sp - 1]][ntsymbol];\n                sstack[sp] = newState;\n                ++sp;\n\n\n\n\n\n\n\n\n\n                continue;\n\n            // accept:\n            case 3:\n                if (sp !== -2) {\n                    retval = true;\n                    // Return the `$accept` rule's `$$` result, if available.\n                    //\n                    // Also note that JISON always adds this top-most `$accept` rule (with implicit,\n                    // default, action):\n                    //\n                    //     $accept: <startSymbol> $end\n                    //                  %{ $$ = $1; @$ = @1; %}\n                    //\n                    // which, combined with the parse kernel's `$accept` state behaviour coded below,\n                    // will produce the `$$` value output of the <startSymbol> rule as the parse result,\n                    // IFF that result is *not* `undefined`. (See also the parser kernel code.)\n                    //\n                    // In code:\n                    //\n                    //                  %{\n                    //                      @$ = @1;            // if location tracking support is included\n                    //                      if (typeof $1 !== 'undefined')\n                    //                          return $1;\n                    //                      else\n                    //                          return true;           // the default parse result if the rule actions don't produce anything\n                    //                  %}\n                    sp--;\n                    if (typeof vstack[sp] !== 'undefined') {\n                        retval = vstack[sp];\n                    }\n                }\n                break;\n            }\n\n            // break out of loop: we accept or fail with error\n            break;\n        }\n    } catch (ex) {\n        // report exceptions through the parseError callback too, but keep the exception intact\n        // if it is a known parser or lexer error which has been thrown by parseError() already:\n        if (ex instanceof this.JisonParserError) {\n            throw ex;\n        }\n        else if (lexer && typeof lexer.JisonLexerError === 'function' && ex instanceof lexer.JisonLexerError) {\n            throw ex;\n        }\n\n        p = this.constructParseErrorInfo('Parsing aborted due to exception.', ex, null, false);\n        retval = false;\n        r = this.parseError(p.errStr, p, this.JisonParserError);\n        if (typeof r !== 'undefined') {\n            retval = r;\n        }\n    } finally {\n        retval = this.cleanupAfterParse(retval, true, true);\n        this.__reentrant_call_depth--;\n    }   // /finally\n\n    return retval;\n}\n};\nparser.originalParseError = parser.parseError;\nparser.originalQuoteName = parser.quoteName;\n/* lexer generated by jison-lex 0.6.1-216 */\n\n/*\n * Returns a Lexer object of the following structure:\n *\n *  Lexer: {\n *    yy: {}     The so-called \"shared state\" or rather the *source* of it;\n *               the real \"shared state\" `yy` passed around to\n *               the rule actions, etc. is a direct reference!\n *\n *               This \"shared context\" object was passed to the lexer by way of \n *               the `lexer.setInput(str, yy)` API before you may use it.\n *\n *               This \"shared context\" object is passed to the lexer action code in `performAction()`\n *               so userland code in the lexer actions may communicate with the outside world \n *               and/or other lexer rules' actions in more or less complex ways.\n *\n *  }\n *\n *  Lexer.prototype: {\n *    EOF: 1,\n *    ERROR: 2,\n *\n *    yy:        The overall \"shared context\" object reference.\n *\n *    JisonLexerError: function(msg, hash),\n *\n *    performAction: function lexer__performAction(yy, yyrulenumber, YY_START),\n *\n *               The function parameters and `this` have the following value/meaning:\n *               - `this`    : reference to the `lexer` instance. \n *                               `yy_` is an alias for `this` lexer instance reference used internally.\n *\n *               - `yy`      : a reference to the `yy` \"shared state\" object which was passed to the lexer\n *                             by way of the `lexer.setInput(str, yy)` API before.\n *\n *                             Note:\n *                             The extra arguments you specified in the `%parse-param` statement in your\n *                             **parser** grammar definition file are passed to the lexer via this object\n *                             reference as member variables.\n *\n *               - `yyrulenumber`   : index of the matched lexer rule (regex), used internally.\n *\n *               - `YY_START`: the current lexer \"start condition\" state.\n *\n *    parseError: function(str, hash, ExceptionClass),\n *\n *    constructLexErrorInfo: function(error_message, is_recoverable),\n *               Helper function.\n *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.\n *               See it's use in this lexer kernel in many places; example usage:\n *\n *                   var infoObj = lexer.constructParseErrorInfo('fail!', true);\n *                   var retVal = lexer.parseError(infoObj.errStr, infoObj, lexer.JisonLexerError);\n *\n *    options: { ... lexer %options ... },\n *\n *    lex: function(),\n *               Produce one token of lexed input, which was passed in earlier via the `lexer.setInput()` API.\n *               You MAY use the additional `args...` parameters as per `%parse-param` spec of the **lexer** grammar:\n *               these extra `args...` are added verbatim to the `yy` object reference as member variables.\n *\n *               WARNING:\n *               Lexer's additional `args...` parameters (via lexer's `%parse-param`) MAY conflict with\n *               any attributes already added to `yy` by the **parser** or the jison run-time; \n *               when such a collision is detected an exception is thrown to prevent the generated run-time \n *               from silently accepting this confusing and potentially hazardous situation! \n *\n *    cleanupAfterLex: function(do_not_nuke_errorinfos),\n *               Helper function.\n *\n *               This helper API is invoked when the **parse process** has completed: it is the responsibility\n *               of the **parser** (or the calling userland code) to invoke this method once cleanup is desired. \n *\n *               This helper may be invoked by user code to ensure the internal lexer gets properly garbage collected.\n *\n *    setInput: function(input, [yy]),\n *\n *\n *    input: function(),\n *\n *\n *    unput: function(str),\n *\n *\n *    more: function(),\n *\n *\n *    reject: function(),\n *\n *\n *    less: function(n),\n *\n *\n *    pastInput: function(n),\n *\n *\n *    upcomingInput: function(n),\n *\n *\n *    showPosition: function(),\n *\n *\n *    test_match: function(regex_match_array, rule_index),\n *\n *\n *    next: function(),\n *\n *\n *    begin: function(condition),\n *\n *\n *    pushState: function(condition),\n *\n *\n *    popState: function(),\n *\n *\n *    topState: function(),\n *\n *\n *    _currentRules: function(),\n *\n *\n *    stateStackSize: function(),\n *\n *\n *    performAction: function(yy, yy_, yyrulenumber, YY_START),\n *\n *\n *    rules: [...],\n *\n *\n *    conditions: {associative list: name ==> set},\n *  }\n *\n *\n *  token location info (`yylloc`): {\n *    first_line: n,\n *    last_line: n,\n *    first_column: n,\n *    last_column: n,\n *    range: [start_number, end_number]\n *               (where the numbers are indexes into the input string, zero-based)\n *  }\n *\n * ---\n *\n * The `parseError` function receives a 'hash' object with these members for lexer errors:\n *\n *  {\n *    text:        (matched text)\n *    token:       (the produced terminal token, if any)\n *    token_id:    (the produced terminal token numeric ID, if any)\n *    line:        (yylineno)\n *    loc:         (yylloc)\n *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule\n *                  available for this particular error)\n *    yy:          (object: the current parser internal \"shared state\" `yy`\n *                  as is also available in the rule actions; this can be used,\n *                  for instance, for advanced error analysis and reporting)\n *    lexer:       (reference to the current lexer instance used by the parser)\n *  }\n *\n * while `this` will reference the current lexer instance.\n *\n * When `parseError` is invoked by the lexer, the default implementation will\n * attempt to invoke `yy.parser.parseError()`; when this callback is not provided\n * it will try to invoke `yy.parseError()` instead. When that callback is also not\n * provided, a `JisonLexerError` exception will be thrown containing the error\n * message and `hash`, as constructed by the `constructLexErrorInfo()` API.\n *\n * Note that the lexer's `JisonLexerError` error class is passed via the\n * `ExceptionClass` argument, which is invoked to construct the exception\n * instance to be thrown, so technically `parseError` will throw the object\n * produced by the `new ExceptionClass(str, hash)` JavaScript expression.\n *\n * ---\n *\n * You can specify lexer options by setting / modifying the `.options` object of your Lexer instance.\n * These options are available:\n *\n * (Options are permanent.)\n *  \n *  yy: {\n *      parseError: function(str, hash, ExceptionClass)\n *                 optional: overrides the default `parseError` function.\n *  }\n *\n *  lexer.options: {\n *      pre_lex:  function()\n *                 optional: is invoked before the lexer is invoked to produce another token.\n *                 `this` refers to the Lexer object.\n *      post_lex: function(token) { return token; }\n *                 optional: is invoked when the lexer has produced a token `token`;\n *                 this function can override the returned token value by returning another.\n *                 When it does not return any (truthy) value, the lexer will return\n *                 the original `token`.\n *                 `this` refers to the Lexer object.\n *\n * WARNING: the next set of options are not meant to be changed. They echo the abilities of\n * the lexer as per when it was compiled!\n *\n *      ranges: boolean\n *                 optional: `true` ==> token location info will include a .range[] member.\n *      flex: boolean\n *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested\n *                 exhaustively to find the longest match.\n *      backtrack_lexer: boolean\n *                 optional: `true` ==> lexer regexes are tested in order and for invoked;\n *                 the lexer terminates the scan when a token is returned by the action code.\n *      xregexp: boolean\n *                 optional: `true` ==> lexer rule regexes are \"extended regex format\" requiring the\n *                 `XRegExp` library. When this %option has not been specified at compile time, all lexer\n *                 rule regexes have been written as standard JavaScript RegExp expressions.\n *  }\n */\n\n\nvar lexer = function() {\n  /**\n   * See also:\n   * http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508\n   * but we keep the prototype.constructor and prototype.name assignment lines too for compatibility\n   * with userland code which might access the derived class in a 'classic' way.\n   *\n   * @public\n   * @constructor\n   * @nocollapse\n   */\n  function JisonLexerError(msg, hash) {\n    Object.defineProperty(this, 'name', {\n      enumerable: false,\n      writable: false,\n      value: 'JisonLexerError'\n    });\n\n    if (msg == null)\n      msg = '???';\n\n    Object.defineProperty(this, 'message', {\n      enumerable: false,\n      writable: true,\n      value: msg\n    });\n\n    this.hash = hash;\n    var stacktrace;\n\n    if (hash && hash.exception instanceof Error) {\n      var ex2 = hash.exception;\n      this.message = ex2.message || msg;\n      stacktrace = ex2.stack;\n    }\n\n    if (!stacktrace) {\n      if (Error.hasOwnProperty('captureStackTrace')) {\n        // V8\n        Error.captureStackTrace(this, this.constructor);\n      } else {\n        stacktrace = new Error(msg).stack;\n      }\n    }\n\n    if (stacktrace) {\n      Object.defineProperty(this, 'stack', {\n        enumerable: false,\n        writable: false,\n        value: stacktrace\n      });\n    }\n  }\n\n  if (typeof Object.setPrototypeOf === 'function') {\n    Object.setPrototypeOf(JisonLexerError.prototype, Error.prototype);\n  } else {\n    JisonLexerError.prototype = Object.create(Error.prototype);\n  }\n\n  JisonLexerError.prototype.constructor = JisonLexerError;\n  JisonLexerError.prototype.name = 'JisonLexerError';\n\n  var lexer = {\n    \n// Code Generator Information Report\n// ---------------------------------\n//\n// Options:\n//\n//   backtracking: .................... false\n//   location.ranges: ................. false\n//   location line+column tracking: ... true\n//\n//\n// Forwarded Parser Analysis flags:\n//\n//   uses yyleng: ..................... false\n//   uses yylineno: ................... false\n//   uses yytext: ..................... false\n//   uses yylloc: ..................... false\n//   uses lexer values: ............... true / true\n//   location tracking: ............... false\n//   location assignment: ............. false\n//\n//\n// Lexer Analysis flags:\n//\n//   uses yyleng: ..................... ???\n//   uses yylineno: ................... ???\n//   uses yytext: ..................... ???\n//   uses yylloc: ..................... ???\n//   uses ParseError API: ............. ???\n//   uses yyerror: .................... ???\n//   uses location tracking & editing:  ???\n//   uses more() API: ................. ???\n//   uses unput() API: ................ ???\n//   uses reject() API: ............... ???\n//   uses less() API: ................. ???\n//   uses display APIs pastInput(), upcomingInput(), showPosition():\n//        ............................. ???\n//   uses describeYYLLOC() API: ....... ???\n//\n// --------- END OF REPORT -----------\n\nEOF: 1,\n    ERROR: 2,\n\n    // JisonLexerError: JisonLexerError,        /// <-- injected by the code generator\n\n    // options: {},                             /// <-- injected by the code generator\n\n    // yy: ...,                                 /// <-- injected by setInput()\n\n    /// INTERNAL USE ONLY: internal rule set cache for the current lexer state\n    __currentRuleSet__: null,\n\n    /// INTERNAL USE ONLY: the set of lexErrorInfo objects created since the last cleanup\n    __error_infos: [],\n\n    /// INTERNAL USE ONLY: mark whether the lexer instance has been 'unfolded' completely and is now ready for use\n    __decompressed: false,\n\n    /// INTERNAL USE ONLY\n    done: false,\n\n    /// INTERNAL USE ONLY\n    _backtrack: false,\n\n    /// INTERNAL USE ONLY\n    _input: '',\n\n    /// INTERNAL USE ONLY\n    _more: false,\n\n    /// INTERNAL USE ONLY\n    _signaled_error_token: false,\n\n    /// INTERNAL USE ONLY; managed via `pushState()`, `popState()`, `topState()` and `stateStackSize()`\n    conditionStack: [],\n\n    /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction. `match` is identical to `yytext` except that this one still contains the matched input string after `lexer.performAction()` has been invoked, where userland code MAY have changed/replaced the `yytext` value entirely!\n    match: '',\n\n    /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks entire input which has been matched so far\n    matched: '',\n\n    /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks RE match result for last (successful) match attempt\n    matches: false,\n\n    /// ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction; this value is transferred to the parser as the 'token value' when the parser consumes the lexer token produced through a call to the `lex()` API.\n    yytext: '',\n\n    /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks the 'cursor position' in the input string, i.e. the number of characters matched so far\n    offset: 0,\n\n    /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: length of matched input for the token under construction (`yytext`)\n    yyleng: 0,\n\n    /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: 'line number' at which the token under construction is located\n    yylineno: 0,\n\n    /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks location info (lines + columns) for the token under construction\n    yylloc: null,\n\n    /**\n     * INTERNAL USE: construct a suitable error info hash object instance for `parseError`.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    constructLexErrorInfo: function lexer_constructLexErrorInfo(msg, recoverable, show_input_position) {\n      msg = '' + msg;\n\n      // heuristic to determine if the error message already contains a (partial) source code dump\n      // as produced by either `showPosition()` or `prettyPrintRange()`:\n      if (show_input_position == undefined) {\n        show_input_position = !(msg.indexOf('\\n') > 0 && msg.indexOf('^') > 0);\n      }\n\n      if (this.yylloc && show_input_position) {\n        if (typeof this.prettyPrintRange === 'function') {\n          var pretty_src = this.prettyPrintRange(this.yylloc);\n\n          if (!/\\n\\s*$/.test(msg)) {\n            msg += '\\n';\n          }\n\n          msg += '\\n  Erroneous area:\\n' + this.prettyPrintRange(this.yylloc);\n        } else if (typeof this.showPosition === 'function') {\n          var pos_str = this.showPosition();\n\n          if (pos_str) {\n            if (msg.length && msg[msg.length - 1] !== '\\n' && pos_str[0] !== '\\n') {\n              msg += '\\n' + pos_str;\n            } else {\n              msg += pos_str;\n            }\n          }\n        }\n      }\n\n      /** @constructor */\n      var pei = {\n        errStr: msg,\n        recoverable: !!recoverable,\n\n        // This one MAY be empty; userland code should use the `upcomingInput` API to obtain more text which follows the 'lexer cursor position'...\n        text: this.match,\n\n        token: null,\n        line: this.yylineno,\n        loc: this.yylloc,\n        yy: this.yy,\n        lexer: this,\n\n        /**\n         * and make sure the error info doesn't stay due to potential\n         * ref cycle via userland code manipulations.\n         * These would otherwise all be memory leak opportunities!\n         * \n         * Note that only array and object references are nuked as those\n         * constitute the set of elements which can produce a cyclic ref.\n         * The rest of the members is kept intact as they are harmless.\n         * \n         * @public\n         * @this {LexErrorInfo}\n         */\n        destroy: function destructLexErrorInfo() {\n          // remove cyclic references added to error info:\n          // info.yy = null;\n          // info.lexer = null;\n          // ...\n          var rec = !!this.recoverable;\n\n          for (var key in this) {\n            if (this.hasOwnProperty(key) && typeof key === 'object') {\n              this[key] = undefined;\n            }\n          }\n\n          this.recoverable = rec;\n        }\n      };\n\n      // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!\n      this.__error_infos.push(pei);\n\n      return pei;\n    },\n\n    /**\n     * handler which is invoked when a lexer error occurs.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    parseError: function lexer_parseError(str, hash, ExceptionClass) {\n      if (!ExceptionClass) {\n        ExceptionClass = this.JisonLexerError;\n      }\n\n      if (this.yy) {\n        if (this.yy.parser && typeof this.yy.parser.parseError === 'function') {\n          return this.yy.parser.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;\n        } else if (typeof this.yy.parseError === 'function') {\n          return this.yy.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;\n        }\n      }\n\n      throw new ExceptionClass(str, hash);\n    },\n\n    /**\n     * method which implements `yyerror(str, ...args)` functionality for use inside lexer actions.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    yyerror: function yyError(str /*, ...args */) {\n      var lineno_msg = '';\n\n      if (this.yylloc) {\n        lineno_msg = ' on line ' + (this.yylineno + 1);\n      }\n\n      var p = this.constructLexErrorInfo(\n        'Lexical error' + lineno_msg + ': ' + str,\n        this.options.lexerErrorsAreRecoverable\n      );\n\n      // Add any extra args to the hash under the name `extra_error_attributes`:\n      var args = Array.prototype.slice.call(arguments, 1);\n\n      if (args.length) {\n        p.extra_error_attributes = args;\n      }\n\n      return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;\n    },\n\n    /**\n     * final cleanup function for when we have completed lexing the input;\n     * make it an API so that external code can use this one once userland\n     * code has decided it's time to destroy any lingering lexer error\n     * hash object instances and the like: this function helps to clean\n     * up these constructs, which *may* carry cyclic references which would\n     * otherwise prevent the instances from being properly and timely\n     * garbage-collected, i.e. this function helps prevent memory leaks!\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    cleanupAfterLex: function lexer_cleanupAfterLex(do_not_nuke_errorinfos) {\n      // prevent lingering circular references from causing memory leaks:\n      this.setInput('', {});\n\n      // nuke the error hash info instances created during this run.\n      // Userland code must COPY any data/references\n      // in the error hash instance(s) it is more permanently interested in.\n      if (!do_not_nuke_errorinfos) {\n        for (var i = this.__error_infos.length - 1; i >= 0; i--) {\n          var el = this.__error_infos[i];\n\n          if (el && typeof el.destroy === 'function') {\n            el.destroy();\n          }\n        }\n\n        this.__error_infos.length = 0;\n      }\n\n      return this;\n    },\n\n    /**\n     * clear the lexer token context; intended for internal use only\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    clear: function lexer_clear() {\n      this.yytext = '';\n      this.yyleng = 0;\n      this.match = '';\n\n      // - DO NOT reset `this.matched`\n      this.matches = false;\n\n      this._more = false;\n      this._backtrack = false;\n      var col = (this.yylloc ? this.yylloc.last_column : 0);\n\n      this.yylloc = {\n        first_line: this.yylineno + 1,\n        first_column: col,\n        last_line: this.yylineno + 1,\n        last_column: col,\n        range: [this.offset, this.offset]\n      };\n    },\n\n    /**\n     * resets the lexer, sets new input\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    setInput: function lexer_setInput(input, yy) {\n      this.yy = yy || this.yy || {};\n\n      // also check if we've fully initialized the lexer instance,\n      // including expansion work to be done to go from a loaded\n      // lexer to a usable lexer:\n      if (!this.__decompressed) {\n        // step 1: decompress the regex list:\n        var rules = this.rules;\n\n        for (var i = 0, len = rules.length; i < len; i++) {\n          var rule_re = rules[i];\n\n          // compression: is the RE an xref to another RE slot in the rules[] table?\n          if (typeof rule_re === 'number') {\n            rules[i] = rules[rule_re];\n          }\n        }\n\n        // step 2: unfold the conditions[] set to make these ready for use:\n        var conditions = this.conditions;\n\n        for (var k in conditions) {\n          var spec = conditions[k];\n          var rule_ids = spec.rules;\n          var len = rule_ids.length;\n          var rule_regexes = new Array(len + 1);            // slot 0 is unused; we use a 1-based index approach here to keep the hottest code in `lexer_next()` fast and simple!\n          var rule_new_ids = new Array(len + 1);\n\n          for (var i = 0; i < len; i++) {\n            var idx = rule_ids[i];\n            var rule_re = rules[idx];\n            rule_regexes[i + 1] = rule_re;\n            rule_new_ids[i + 1] = idx;\n          }\n\n          spec.rules = rule_new_ids;\n          spec.__rule_regexes = rule_regexes;\n          spec.__rule_count = len;\n        }\n\n        this.__decompressed = true;\n      }\n\n      this._input = input || '';\n      this.clear();\n      this._signaled_error_token = false;\n      this.done = false;\n      this.yylineno = 0;\n      this.matched = '';\n      this.conditionStack = ['INITIAL'];\n      this.__currentRuleSet__ = null;\n\n      this.yylloc = {\n        first_line: 1,\n        first_column: 0,\n        last_line: 1,\n        last_column: 0,\n        range: [0, 0]\n      };\n\n      this.offset = 0;\n      return this;\n    },\n\n    /**\n     * edit the remaining input via user-specified callback.\n     * This can be used to forward-adjust the input-to-parse, \n     * e.g. inserting macro expansions and alike in the\n     * input which has yet to be lexed.\n     * The behaviour of this API contrasts the `unput()` et al\n     * APIs as those act on the *consumed* input, while this\n     * one allows one to manipulate the future, without impacting\n     * the current `yyloc` cursor location or any history. \n     * \n     * Use this API to help implement C-preprocessor-like\n     * `#include` statements, etc.\n     * \n     * The provided callback must be synchronous and is\n     * expected to return the edited input (string).\n     *\n     * The `cpsArg` argument value is passed to the callback\n     * as-is.\n     *\n     * `callback` interface: \n     * `function callback(input, cpsArg)`\n     * \n     * - `input` will carry the remaining-input-to-lex string\n     *   from the lexer.\n     * - `cpsArg` is `cpsArg` passed into this API.\n     * \n     * The `this` reference for the callback will be set to\n     * reference this lexer instance so that userland code\n     * in the callback can easily and quickly access any lexer\n     * API. \n     *\n     * When the callback returns a non-string-type falsey value,\n     * we assume the callback did not edit the input and we\n     * will using the input as-is.\n     *\n     * When the callback returns a non-string-type value, it\n     * is converted to a string for lexing via the `\"\" + retval`\n     * operation. (See also why: http://2ality.com/2012/03/converting-to-string.html \n     * -- that way any returned object's `toValue()` and `toString()`\n     * methods will be invoked in a proper/desirable order.)\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    editRemainingInput: function lexer_editRemainingInput(callback, cpsArg) {\n      var rv = callback.call(this, this._input, cpsArg);\n\n      if (typeof rv !== 'string') {\n        if (rv) {\n          this._input = '' + rv;\n        }\n        // else: keep `this._input` as is. \n      } else {\n        this._input = rv;\n      }\n\n      return this;\n    },\n\n    /**\n     * consumes and returns one char from the input\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    input: function lexer_input() {\n      if (!this._input) {\n        //this.done = true;    -- don't set `done` as we want the lex()/next() API to be able to produce one custom EOF token match after this anyhow. (lexer can match special <<EOF>> tokens and perform user action code for a <<EOF>> match, but only does so *once*)\n        return null;\n      }\n\n      var ch = this._input[0];\n      this.yytext += ch;\n      this.yyleng++;\n      this.offset++;\n      this.match += ch;\n      this.matched += ch;\n\n      // Count the linenumber up when we hit the LF (or a stand-alone CR).\n      // On CRLF, the linenumber is incremented when you fetch the CR or the CRLF combo\n      // and we advance immediately past the LF as well, returning both together as if\n      // it was all a single 'character' only.\n      var slice_len = 1;\n\n      var lines = false;\n\n      if (ch === '\\n') {\n        lines = true;\n      } else if (ch === '\\r') {\n        lines = true;\n        var ch2 = this._input[1];\n\n        if (ch2 === '\\n') {\n          slice_len++;\n          ch += ch2;\n          this.yytext += ch2;\n          this.yyleng++;\n          this.offset++;\n          this.match += ch2;\n          this.matched += ch2;\n          this.yylloc.range[1]++;\n        }\n      }\n\n      if (lines) {\n        this.yylineno++;\n        this.yylloc.last_line++;\n        this.yylloc.last_column = 0;\n      } else {\n        this.yylloc.last_column++;\n      }\n\n      this.yylloc.range[1]++;\n      this._input = this._input.slice(slice_len);\n      return ch;\n    },\n\n    /**\n     * unshifts one char (or an entire string) into the input\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    unput: function lexer_unput(ch) {\n      var len = ch.length;\n      var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n      this._input = ch + this._input;\n      this.yytext = this.yytext.substr(0, this.yytext.length - len);\n      this.yyleng = this.yytext.length;\n      this.offset -= len;\n      this.match = this.match.substr(0, this.match.length - len);\n      this.matched = this.matched.substr(0, this.matched.length - len);\n\n      if (lines.length > 1) {\n        this.yylineno -= lines.length - 1;\n        this.yylloc.last_line = this.yylineno + 1;\n\n        // Get last entirely matched line into the `pre_lines[]` array's\n        // last index slot; we don't mind when other previously \n        // matched lines end up in the array too. \n        var pre = this.match;\n\n        var pre_lines = pre.split(/(?:\\r\\n?|\\n)/g);\n\n        if (pre_lines.length === 1) {\n          pre = this.matched;\n          pre_lines = pre.split(/(?:\\r\\n?|\\n)/g);\n        }\n\n        this.yylloc.last_column = pre_lines[pre_lines.length - 1].length;\n      } else {\n        this.yylloc.last_column -= len;\n      }\n\n      this.yylloc.range[1] = this.yylloc.range[0] + this.yyleng;\n      this.done = false;\n      return this;\n    },\n\n    /**\n     * cache matched text and append it on next action\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    more: function lexer_more() {\n      this._more = true;\n      return this;\n    },\n\n    /**\n     * signal the lexer that this rule fails to match the input, so the\n     * next matching rule (regex) should be tested instead.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    reject: function lexer_reject() {\n      if (this.options.backtrack_lexer) {\n        this._backtrack = true;\n      } else {\n        // when the `parseError()` call returns, we MUST ensure that the error is registered.\n        // We accomplish this by signaling an 'error' token to be produced for the current\n        // `.lex()` run.\n        var lineno_msg = '';\n\n        if (this.yylloc) {\n          lineno_msg = ' on line ' + (this.yylineno + 1);\n        }\n\n        var p = this.constructLexErrorInfo(\n          'Lexical error' + lineno_msg + ': You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).',\n          false\n        );\n\n        this._signaled_error_token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;\n      }\n\n      return this;\n    },\n\n    /**\n     * retain first n characters of the match\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    less: function lexer_less(n) {\n      return this.unput(this.match.slice(n));\n    },\n\n    /**\n     * return (part of the) already matched input, i.e. for error\n     * messages.\n     * \n     * Limit the returned string length to `maxSize` (default: 20).\n     * \n     * Limit the returned string to the `maxLines` number of lines of\n     * input (default: 1).\n     * \n     * Negative limit values equal *unlimited*.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    pastInput: function lexer_pastInput(maxSize, maxLines) {\n      var past = this.matched.substring(0, this.matched.length - this.match.length);\n\n      if (maxSize < 0)\n        maxSize = past.length;\n      else if (!maxSize)\n        maxSize = 20;\n\n      if (maxLines < 0)\n        maxLines = past.length;         // can't ever have more input lines than this!;\n      else if (!maxLines)\n        maxLines = 1;\n\n      // `substr` anticipation: treat \\r\\n as a single character and take a little\n      // more than necessary so that we can still properly check against maxSize\n      // after we've transformed and limited the newLines in here:\n      past = past.substr(-maxSize * 2 - 2);\n\n      // now that we have a significantly reduced string to process, transform the newlines\n      // and chop them, then limit them:\n      var a = past.replace(/\\r\\n|\\r/g, '\\n').split('\\n');\n\n      a = a.slice(-maxLines);\n      past = a.join('\\n');\n\n      // When, after limiting to maxLines, we still have too much to return,\n      // do add an ellipsis prefix...\n      if (past.length > maxSize) {\n        past = '...' + past.substr(-maxSize);\n      }\n\n      return past;\n    },\n\n    /**\n     * return (part of the) upcoming input, i.e. for error messages.\n     * \n     * Limit the returned string length to `maxSize` (default: 20).\n     * \n     * Limit the returned string to the `maxLines` number of lines of input (default: 1).\n     * \n     * Negative limit values equal *unlimited*.\n     *\n     * > ### NOTE ###\n     * >\n     * > *\"upcoming input\"* is defined as the whole of the both\n     * > the *currently lexed* input, together with any remaining input\n     * > following that. *\"currently lexed\"* input is the input \n     * > already recognized by the lexer but not yet returned with\n     * > the lexer token. This happens when you are invoking this API\n     * > from inside any lexer rule action code block. \n     * >\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    upcomingInput: function lexer_upcomingInput(maxSize, maxLines) {\n      var next = this.match;\n\n      if (maxSize < 0)\n        maxSize = next.length + this._input.length;\n      else if (!maxSize)\n        maxSize = 20;\n\n      if (maxLines < 0)\n        maxLines = maxSize;         // can't ever have more input lines than this!;\n      else if (!maxLines)\n        maxLines = 1;\n\n      // `substring` anticipation: treat \\r\\n as a single character and take a little\n      // more than necessary so that we can still properly check against maxSize\n      // after we've transformed and limited the newLines in here:\n      if (next.length < maxSize * 2 + 2) {\n        next += this._input.substring(0, maxSize * 2 + 2);  // substring is faster on Chrome/V8\n      }\n\n      // now that we have a significantly reduced string to process, transform the newlines\n      // and chop them, then limit them:\n      var a = next.replace(/\\r\\n|\\r/g, '\\n').split('\\n');\n\n      a = a.slice(0, maxLines);\n      next = a.join('\\n');\n\n      // When, after limiting to maxLines, we still have too much to return,\n      // do add an ellipsis postfix...\n      if (next.length > maxSize) {\n        next = next.substring(0, maxSize) + '...';\n      }\n\n      return next;\n    },\n\n    /**\n     * return a string which displays the character position where the\n     * lexing error occurred, i.e. for error messages\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    showPosition: function lexer_showPosition(maxPrefix, maxPostfix) {\n      var pre = this.pastInput(maxPrefix).replace(/\\s/g, ' ');\n      var c = new Array(pre.length + 1).join('-');\n      return pre + this.upcomingInput(maxPostfix).replace(/\\s/g, ' ') + '\\n' + c + '^';\n    },\n\n    /**\n     * return an YYLLOC info object derived off the given context (actual, preceding, following, current).\n     * Use this method when the given `actual` location is not guaranteed to exist (i.e. when\n     * it MAY be NULL) and you MUST have a valid location info object anyway:\n     * then we take the given context of the `preceding` and `following` locations, IFF those are available,\n     * and reconstruct the `actual` location info from those.\n     * If this fails, the heuristic is to take the `current` location, IFF available.\n     * If this fails as well, we assume the sought location is at/around the current lexer position\n     * and then produce that one as a response. DO NOTE that these heuristic/derived location info\n     * values MAY be inaccurate!\n     *\n     * NOTE: `deriveLocationInfo()` ALWAYS produces a location info object *copy* of `actual`, not just\n     * a *reference* hence all input location objects can be assumed to be 'constant' (function has no side-effects).\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    deriveLocationInfo: function lexer_deriveYYLLOC(actual, preceding, following, current) {\n      var loc = {\n        first_line: 1,\n        first_column: 0,\n        last_line: 1,\n        last_column: 0,\n        range: [0, 0]\n      };\n\n      if (actual) {\n        loc.first_line = actual.first_line | 0;\n        loc.last_line = actual.last_line | 0;\n        loc.first_column = actual.first_column | 0;\n        loc.last_column = actual.last_column | 0;\n\n        if (actual.range) {\n          loc.range[0] = actual.range[0] | 0;\n          loc.range[1] = actual.range[1] | 0;\n        }\n      }\n\n      if (loc.first_line <= 0 || loc.last_line < loc.first_line) {\n        // plan B: heuristic using preceding and following:\n        if (loc.first_line <= 0 && preceding) {\n          loc.first_line = preceding.last_line | 0;\n          loc.first_column = preceding.last_column | 0;\n\n          if (preceding.range) {\n            loc.range[0] = actual.range[1] | 0;\n          }\n        }\n\n        if ((loc.last_line <= 0 || loc.last_line < loc.first_line) && following) {\n          loc.last_line = following.first_line | 0;\n          loc.last_column = following.first_column | 0;\n\n          if (following.range) {\n            loc.range[1] = actual.range[0] | 0;\n          }\n        }\n\n        // plan C?: see if the 'current' location is useful/sane too:\n        if (loc.first_line <= 0 && current && (loc.last_line <= 0 || current.last_line <= loc.last_line)) {\n          loc.first_line = current.first_line | 0;\n          loc.first_column = current.first_column | 0;\n\n          if (current.range) {\n            loc.range[0] = current.range[0] | 0;\n          }\n        }\n\n        if (loc.last_line <= 0 && current && (loc.first_line <= 0 || current.first_line >= loc.first_line)) {\n          loc.last_line = current.last_line | 0;\n          loc.last_column = current.last_column | 0;\n\n          if (current.range) {\n            loc.range[1] = current.range[1] | 0;\n          }\n        }\n      }\n\n      // sanitize: fix last_line BEFORE we fix first_line as we use the 'raw' value of the latter\n      // or plan D heuristics to produce a 'sensible' last_line value:\n      if (loc.last_line <= 0) {\n        if (loc.first_line <= 0) {\n          loc.first_line = this.yylloc.first_line;\n          loc.last_line = this.yylloc.last_line;\n          loc.first_column = this.yylloc.first_column;\n          loc.last_column = this.yylloc.last_column;\n          loc.range[0] = this.yylloc.range[0];\n          loc.range[1] = this.yylloc.range[1];\n        } else {\n          loc.last_line = this.yylloc.last_line;\n          loc.last_column = this.yylloc.last_column;\n          loc.range[1] = this.yylloc.range[1];\n        }\n      }\n\n      if (loc.first_line <= 0) {\n        loc.first_line = loc.last_line;\n        loc.first_column = 0; // loc.last_column;\n        loc.range[1] = loc.range[0];\n      }\n\n      if (loc.first_column < 0) {\n        loc.first_column = 0;\n      }\n\n      if (loc.last_column < 0) {\n        loc.last_column = (loc.first_column > 0 ? loc.first_column : 80);\n      }\n\n      return loc;\n    },\n\n    /**\n     * return a string which displays the lines & columns of input which are referenced \n     * by the given location info range, plus a few lines of context.\n     * \n     * This function pretty-prints the indicated section of the input, with line numbers \n     * and everything!\n     * \n     * This function is very useful to provide highly readable error reports, while\n     * the location range may be specified in various flexible ways:\n     * \n     * - `loc` is the location info object which references the area which should be\n     *   displayed and 'marked up': these lines & columns of text are marked up by `^`\n     *   characters below each character in the entire input range.\n     * \n     * - `context_loc` is the *optional* location info object which instructs this\n     *   pretty-printer how much *leading* context should be displayed alongside\n     *   the area referenced by `loc`. This can help provide context for the displayed\n     *   error, etc.\n     * \n     *   When this location info is not provided, a default context of 3 lines is\n     *   used.\n     * \n     * - `context_loc2` is another *optional* location info object, which serves\n     *   a similar purpose to `context_loc`: it specifies the amount of *trailing*\n     *   context lines to display in the pretty-print output.\n     * \n     *   When this location info is not provided, a default context of 1 line only is\n     *   used.\n     * \n     * Special Notes:\n     * \n     * - when the `loc`-indicated range is very large (about 5 lines or more), then\n     *   only the first and last few lines of this block are printed while a\n     *   `...continued...` message will be printed between them.\n     * \n     *   This serves the purpose of not printing a huge amount of text when the `loc`\n     *   range happens to be huge: this way a manageable & readable output results\n     *   for arbitrary large ranges.\n     * \n     * - this function can display lines of input which whave not yet been lexed.\n     *   `prettyPrintRange()` can access the entire input!\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    prettyPrintRange: function lexer_prettyPrintRange(loc, context_loc, context_loc2) {\n      loc = this.deriveLocationInfo(loc, context_loc, context_loc2);\n      const CONTEXT = 3;\n      const CONTEXT_TAIL = 1;\n      const MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT = 2;\n      var input = this.matched + this._input;\n      var lines = input.split('\\n');\n      var l0 = Math.max(1, (context_loc ? context_loc.first_line : loc.first_line - CONTEXT));\n      var l1 = Math.max(1, (context_loc2 ? context_loc2.last_line : loc.last_line + CONTEXT_TAIL));\n      var lineno_display_width = 1 + Math.log10(l1 | 1) | 0;\n      var ws_prefix = new Array(lineno_display_width).join(' ');\n      var nonempty_line_indexes = [[], [], []];\n\n      var rv = lines.slice(l0 - 1, l1 + 1).map(function injectLineNumber(line, index) {\n        var lno = index + l0;\n        var lno_pfx = (ws_prefix + lno).substr(-lineno_display_width);\n        var rv = lno_pfx + ': ' + line;\n        var errpfx = new Array(lineno_display_width + 1).join('^');\n        var offset = 2 + 1;\n        var len = 0;\n\n        if (lno === loc.first_line) {\n          offset += loc.first_column;\n\n          len = Math.max(\n            2,\n            ((lno === loc.last_line ? loc.last_column : line.length)) - loc.first_column + 1\n          );\n        } else if (lno === loc.last_line) {\n          len = Math.max(2, loc.last_column + 1);\n        } else if (lno > loc.first_line && lno < loc.last_line) {\n          len = Math.max(2, line.length + 1);\n        }\n\n        var nli;\n\n        if (len) {\n          var lead = new Array(offset).join('.');\n          var mark = new Array(len).join('^');\n          rv += '\\n' + errpfx + lead + mark;\n          nli = 1;\n        } else if (lno < loc.first_line) {\n          nli = 0;\n        } else if (lno > loc.last_line) {\n          nli = 2;\n        }\n\n        if (line.trim().length > 0) {\n          nonempty_line_indexes[nli].push(index);\n        }\n\n        rv = rv.replace(/\\t/g, ' ');\n        return rv;\n      });\n\n      // now make sure we don't print an overly large amount of lead/error/tail area: limit it \n      // to the top and bottom line count:\n      for (var i = 0; i <= 2; i++) {\n        var line_arr = nonempty_line_indexes[i];\n\n        if (line_arr.length > 2 * MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT) {\n          var clip_start = line_arr[MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT - 1] + 1;\n          var clip_end = line_arr[line_arr.length - MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT] - 1;\n          var intermediate_line = new Array(lineno_display_width + 1).join(' ') + '  (...continued...)';\n\n          if (i === 1) {\n            intermediate_line += '\\n' + new Array(lineno_display_width + 1).join('-') + '  (---------------)';\n          }\n\n          rv.splice(clip_start, clip_end - clip_start + 1, intermediate_line);\n        }\n      }\n\n      return rv.join('\\n');\n    },\n\n    /**\n     * helper function, used to produce a human readable description as a string, given\n     * the input `yylloc` location object.\n     * \n     * Set `display_range_too` to TRUE to include the string character index position(s)\n     * in the description if the `yylloc.range` is available.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    describeYYLLOC: function lexer_describe_yylloc(yylloc, display_range_too) {\n      var l1 = yylloc.first_line;\n      var l2 = yylloc.last_line;\n      var c1 = yylloc.first_column;\n      var c2 = yylloc.last_column;\n      var dl = l2 - l1;\n      var dc = c2 - c1;\n      var rv;\n\n      if (dl === 0) {\n        rv = 'line ' + l1 + ', ';\n\n        if (dc <= 1) {\n          rv += 'column ' + c1;\n        } else {\n          rv += 'columns ' + c1 + ' .. ' + c2;\n        }\n      } else {\n        rv = 'lines ' + l1 + '(column ' + c1 + ') .. ' + l2 + '(column ' + c2 + ')';\n      }\n\n      if (yylloc.range && display_range_too) {\n        var r1 = yylloc.range[0];\n        var r2 = yylloc.range[1] - 1;\n\n        if (r2 <= r1) {\n          rv += ' {String Offset: ' + r1 + '}';\n        } else {\n          rv += ' {String Offset range: ' + r1 + ' .. ' + r2 + '}';\n        }\n      }\n\n      return rv;\n    },\n\n    /**\n     * test the lexed token: return FALSE when not a match, otherwise return token.\n     * \n     * `match` is supposed to be an array coming out of a regex match, i.e. `match[0]`\n     * contains the actually matched text string.\n     * \n     * Also move the input cursor forward and update the match collectors:\n     * \n     * - `yytext`\n     * - `yyleng`\n     * - `match`\n     * - `matches`\n     * - `yylloc`\n     * - `offset`\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    test_match: function lexer_test_match(match, indexed_rule) {\n      var token, lines, backup, match_str, match_str_len;\n\n      if (this.options.backtrack_lexer) {\n        // save context\n        backup = {\n          yylineno: this.yylineno,\n\n          yylloc: {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylloc.last_line,\n            first_column: this.yylloc.first_column,\n            last_column: this.yylloc.last_column,\n            range: this.yylloc.range.slice(0)\n          },\n\n          yytext: this.yytext,\n          match: this.match,\n          matches: this.matches,\n          matched: this.matched,\n          yyleng: this.yyleng,\n          offset: this.offset,\n          _more: this._more,\n          _input: this._input,\n\n          //_signaled_error_token: this._signaled_error_token,\n          yy: this.yy,\n\n          conditionStack: this.conditionStack.slice(0),\n          done: this.done\n        };\n      }\n\n      match_str = match[0];\n      match_str_len = match_str.length;\n\n      // if (match_str.indexOf('\\n') !== -1 || match_str.indexOf('\\r') !== -1) {\n      lines = match_str.split(/(?:\\r\\n?|\\n)/g);\n\n      if (lines.length > 1) {\n        this.yylineno += lines.length - 1;\n        this.yylloc.last_line = this.yylineno + 1;\n        this.yylloc.last_column = lines[lines.length - 1].length;\n      } else {\n        this.yylloc.last_column += match_str_len;\n      }\n\n      // }\n      this.yytext += match_str;\n\n      this.match += match_str;\n      this.matched += match_str;\n      this.matches = match;\n      this.yyleng = this.yytext.length;\n      this.yylloc.range[1] += match_str_len;\n\n      // previous lex rules MAY have invoked the `more()` API rather than producing a token:\n      // those rules will already have moved this `offset` forward matching their match lengths,\n      // hence we must only add our own match length now:\n      this.offset += match_str_len;\n\n      this._more = false;\n      this._backtrack = false;\n      this._input = this._input.slice(match_str_len);\n\n      // calling this method:\n      //\n      //   function lexer__performAction(yy, yyrulenumber, YY_START) {...}\n      token = this.performAction.call(\n        this,\n        this.yy,\n        indexed_rule,\n        this.conditionStack[this.conditionStack.length - 1] /* = YY_START */\n      );\n\n      // otherwise, when the action codes are all simple return token statements:\n      //token = this.simpleCaseActionClusters[indexed_rule];\n\n      if (this.done && this._input) {\n        this.done = false;\n      }\n\n      if (token) {\n        return token;\n      } else if (this._backtrack) {\n        // recover context\n        for (var k in backup) {\n          this[k] = backup[k];\n        }\n\n        this.__currentRuleSet__ = null;\n        return false; // rule action called reject() implying the next rule should be tested instead.\n      } else if (this._signaled_error_token) {\n        // produce one 'error' token as `.parseError()` in `reject()`\n        // did not guarantee a failure signal by throwing an exception!\n        token = this._signaled_error_token;\n\n        this._signaled_error_token = false;\n        return token;\n      }\n\n      return false;\n    },\n\n    /**\n     * return next match in input\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    next: function lexer_next() {\n      if (this.done) {\n        this.clear();\n        return this.EOF;\n      }\n\n      if (!this._input) {\n        this.done = true;\n      }\n\n      var token, match, tempMatch, index;\n\n      if (!this._more) {\n        this.clear();\n      }\n\n      var spec = this.__currentRuleSet__;\n\n      if (!spec) {\n        // Update the ruleset cache as we apparently encountered a state change or just started lexing.\n        // The cache is set up for fast lookup -- we assume a lexer will switch states much less often than it will\n        // invoke the `lex()` token-producing API and related APIs, hence caching the set for direct access helps\n        // speed up those activities a tiny bit.\n        spec = this.__currentRuleSet__ = this._currentRules();\n\n        // Check whether a *sane* condition has been pushed before: this makes the lexer robust against\n        // user-programmer bugs such as https://github.com/zaach/jison-lex/issues/19\n        if (!spec || !spec.rules) {\n          var lineno_msg = '';\n\n          if (this.options.trackPosition) {\n            lineno_msg = ' on line ' + (this.yylineno + 1);\n          }\n\n          var p = this.constructLexErrorInfo(\n            'Internal lexer engine error' + lineno_msg + ': The lex grammar programmer pushed a non-existing condition name \"' + this.topState() + '\"; this is a fatal error and should be reported to the application programmer team!',\n            false\n          );\n\n          // produce one 'error' token until this situation has been resolved, most probably by parse termination!\n          return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;\n        }\n      }\n\n      var rule_ids = spec.rules;\n      var regexes = spec.__rule_regexes;\n      var len = spec.__rule_count;\n\n      // Note: the arrays are 1-based, while `len` itself is a valid index,\n      // hence the non-standard less-or-equal check in the next loop condition!\n      for (var i = 1; i <= len; i++) {\n        tempMatch = this._input.match(regexes[i]);\n\n        if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n          match = tempMatch;\n          index = i;\n\n          if (this.options.backtrack_lexer) {\n            token = this.test_match(tempMatch, rule_ids[i]);\n\n            if (token !== false) {\n              return token;\n            } else if (this._backtrack) {\n              match = undefined;\n              continue; // rule action called reject() implying a rule MISmatch.\n            } else {\n              // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n              return false;\n            }\n          } else if (!this.options.flex) {\n            break;\n          }\n        }\n      }\n\n      if (match) {\n        token = this.test_match(match, rule_ids[index]);\n\n        if (token !== false) {\n          return token;\n        }\n\n        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n        return false;\n      }\n\n      if (!this._input) {\n        this.done = true;\n        this.clear();\n        return this.EOF;\n      } else {\n        var lineno_msg = '';\n\n        if (this.options.trackPosition) {\n          lineno_msg = ' on line ' + (this.yylineno + 1);\n        }\n\n        var p = this.constructLexErrorInfo(\n          'Lexical error' + lineno_msg + ': Unrecognized text.',\n          this.options.lexerErrorsAreRecoverable\n        );\n\n        var pendingInput = this._input;\n        var activeCondition = this.topState();\n        var conditionStackDepth = this.conditionStack.length;\n        token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;\n\n        if (token === this.ERROR) {\n          // we can try to recover from a lexer error that `parseError()` did not 'recover' for us\n          // by moving forward at least one character at a time IFF the (user-specified?) `parseError()`\n          // has not consumed/modified any pending input or changed state in the error handler:\n          if (!this.matches && // and make sure the input has been modified/consumed ...\n          pendingInput === this._input && // ...or the lexer state has been modified significantly enough\n          // to merit a non-consuming error handling action right now.\n          activeCondition === this.topState() && conditionStackDepth === this.conditionStack.length) {\n            this.input();\n          }\n        }\n\n        return token;\n      }\n    },\n\n    /**\n     * return next match that has a token\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    lex: function lexer_lex() {\n      var r;\n\n      // allow the PRE/POST handlers set/modify the return token for maximum flexibility of the generated lexer:\n      if (typeof this.pre_lex === 'function') {\n        r = this.pre_lex.call(this, 0);\n      }\n\n      if (typeof this.options.pre_lex === 'function') {\n        // (also account for a userdef function which does not return any value: keep the token as is)\n        r = this.options.pre_lex.call(this, r) || r;\n      }\n\n      if (this.yy && typeof this.yy.pre_lex === 'function') {\n        // (also account for a userdef function which does not return any value: keep the token as is)\n        r = this.yy.pre_lex.call(this, r) || r;\n      }\n\n      while (!r) {\n        r = this.next();\n      }\n\n      if (this.yy && typeof this.yy.post_lex === 'function') {\n        // (also account for a userdef function which does not return any value: keep the token as is)\n        r = this.yy.post_lex.call(this, r) || r;\n      }\n\n      if (typeof this.options.post_lex === 'function') {\n        // (also account for a userdef function which does not return any value: keep the token as is)\n        r = this.options.post_lex.call(this, r) || r;\n      }\n\n      if (typeof this.post_lex === 'function') {\n        // (also account for a userdef function which does not return any value: keep the token as is)\n        r = this.post_lex.call(this, r) || r;\n      }\n\n      return r;\n    },\n\n    /**\n     * return next match that has a token. Identical to the `lex()` API but does not invoke any of the \n     * `pre_lex()` nor any of the `post_lex()` callbacks.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    fastLex: function lexer_fastLex() {\n      var r;\n\n      while (!r) {\n        r = this.next();\n      }\n\n      return r;\n    },\n\n    /**\n     * return info about the lexer state that can help a parser or other lexer API user to use the\n     * most efficient means available. This API is provided to aid run-time performance for larger\n     * systems which employ this lexer.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    canIUse: function lexer_canIUse() {\n      var rv = {\n        fastLex: !(typeof this.pre_lex === 'function' || typeof this.options.pre_lex === 'function' || this.yy && typeof this.yy.pre_lex === 'function' || this.yy && typeof this.yy.post_lex === 'function' || typeof this.options.post_lex === 'function' || typeof this.post_lex === 'function') && typeof this.fastLex === 'function'\n      };\n\n      return rv;\n    },\n\n    /**\n     * backwards compatible alias for `pushState()`;\n     * the latter is symmetrical with `popState()` and we advise to use\n     * those APIs in any modern lexer code, rather than `begin()`.\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    begin: function lexer_begin(condition) {\n      return this.pushState(condition);\n    },\n\n    /**\n     * activates a new lexer condition state (pushes the new lexer\n     * condition state onto the condition stack)\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    pushState: function lexer_pushState(condition) {\n      this.conditionStack.push(condition);\n      this.__currentRuleSet__ = null;\n      return this;\n    },\n\n    /**\n     * pop the previously active lexer condition state off the condition\n     * stack\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    popState: function lexer_popState() {\n      var n = this.conditionStack.length - 1;\n\n      if (n > 0) {\n        this.__currentRuleSet__ = null;\n        return this.conditionStack.pop();\n      } else {\n        return this.conditionStack[0];\n      }\n    },\n\n    /**\n     * return the currently active lexer condition state; when an index\n     * argument is provided it produces the N-th previous condition state,\n     * if available\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    topState: function lexer_topState(n) {\n      n = this.conditionStack.length - 1 - Math.abs(n || 0);\n\n      if (n >= 0) {\n        return this.conditionStack[n];\n      } else {\n        return 'INITIAL';\n      }\n    },\n\n    /**\n     * (internal) determine the lexer rule set which is active for the\n     * currently active lexer condition state\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    _currentRules: function lexer__currentRules() {\n      if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n        return this.conditions[this.conditionStack[this.conditionStack.length - 1]];\n      } else {\n        return this.conditions['INITIAL'];\n      }\n    },\n\n    /**\n     * return the number of states currently on the stack\n     * \n     * @public\n     * @this {RegExpLexer}\n     */\n    stateStackSize: function lexer_stateStackSize() {\n      return this.conditionStack.length;\n    },\n\n    options: {\n      trackPosition: true,\n      caseInsensitive: true\n    },\n\n    JisonLexerError: JisonLexerError,\n\n    performAction: function lexer__performAction(yy, yyrulenumber, YY_START) {\n      var yy_ = this;\n      var YYSTATE = YY_START;\n\n      switch (yyrulenumber) {\n      case 0:\n        /*! Conditions:: INITIAL */\n        /*! Rule::       #\\[{tag} */\n        ']';\n\n        return 15;\n        break;\n\n      case 1:\n        /*! Conditions:: INITIAL */\n        /*! Rule::       {keyword} */\n        this.pushState('AFTER_KEYWORD');\n\n        return 21;\n        break;\n\n      case 2:\n        /*! Conditions:: INITIAL */\n        /*! Rule::       {tag} */\n        this.pushState('AFTER_TAG_NAME');\n\n        return 15;\n        break;\n\n      case 3:\n        /*! Conditions:: INITIAL */\n        /*! Rule::       (script|style) */\n        if (TEXT_TAGS_ALLOW_SUB_TAGS) {\n          this.pushState('AFTER_TAG_NAME');\n          return 15;\n        } else {\n          this.pushState('AFTER_TEXT_TAG_NAME');\n          return 16;\n        }\n\n        break;\n\n      case 4:\n        /*! Conditions:: INITIAL */\n        /*! Rule::       {tag_id} */\n        this.pushState('AFTER_TAG_NAME');\n\n        yy_.yytext = yy_.yytext.substring(1);\n        return 17;\n        break;\n\n      case 5:\n        /*! Conditions:: INITIAL */\n        /*! Rule::       {mixin_call} */\n        yy_.yytext = yy_.yytext.substring(1);\n\n        this.pushState('MIXIN_CALL_START');\n        return 20;\n        break;\n\n      case 6:\n        /*! Conditions:: INITIAL */\n        /*! Rule::       \\} */\n        this.pushState('AFTER_KEYWORD');\n\n        return 23;\n        break;\n\n      case 7:\n        /*! Conditions:: INITIAL */\n        /*! Rule::       {conditional} */\n        this.pushState('COND_START');\n\n        if (yy_.yytext.startsWith('-')) {\n          yy_.yytext = yy_.yytext.substring(1);\n        }\n\n        return 26;\n        break;\n\n      case 8:\n        /*! Conditions:: COND_START */\n        /*! Rule::       \\( */\n        ')';\n\n        this.pushState('COND_START');\n        return 11;\n        break;\n\n      case 9:\n        /*! Conditions:: COND_START */\n        /*! Rule::       .+\\) */\n        this.popState();\n\n        yy_.yytext = yy_.yytext.substring(0, yy_.yytext.length - 1);\n        return ['RPAREN', 'CONDITION'];\n        break;\n\n      case 11:\n        /*! Conditions:: INITIAL UNBUF_CODE */\n        /*! Rule::       - */\n        this.pushState('UNBUF_CODE_START');\n\n        break;\n\n      case 12:\n        /*! Conditions:: INITIAL */\n        /*! Rule::       {classname} */\n        // debug('<INITIAL>{classname}')\n        this.pushState('AFTER_TAG_NAME');\n\n        yy_.yytext = yy_.yytext.substring(1);\n        return 12;\n        break;\n\n      case 13:\n        /*! Conditions:: INITIAL */\n        /*! Rule::       {classname_relaxed} */\n        debug('<INITIAL>{classname_relaxed}');\n\n        if (this.yy.parser.options.allowDigitToStartClassName) {\n          // debug('<INITIAL>{classname}')\n          this.pushState('AFTER_TAG_NAME');\n\n          yy_.yytext = yy_.yytext.substring(1);\n          return 12;\n        } else {\n          throw new Error(\n            'Classnames starting with a digit is not allowed. Set allowDigitToStartClassName to true to allow.'\n          );\n        }\n\n        break;\n\n      case 14:\n        /*! Conditions:: INITIAL */\n        /*! Rule::       \\/\\/ */\n        this.pushState('TEXT');\n\n        return 18;\n        break;\n\n      case 15:\n        /*! Conditions:: INITIAL */\n        /*! Rule::       <[A-Z_]+> */\n        if (/<[A-Z_]+>/.test(yy_.yytext)) {\n          this.pushState(yy_.yytext.substring(1, yy_.yytext.length - 1));\n        } else {\n          this.pushState('TEXT');\n          return 3;\n        }\n\n        break;\n\n      case 16:\n        /*! Conditions:: INITIAL TEXT */\n        /*! Rule::       \\|  */\n        this.pushState('TEXT');\n\n        return 22;\n        break;\n\n      case 17:\n        /*! Conditions:: INITIAL */\n        /*! Rule::       \\|\\. */\n        this.pushState('TEXT');\n\n        this.unput('.');\n        break;\n\n      case 18:\n        /*! Conditions:: INITIAL */\n        /*! Rule::       \\|$ */\n        this.pushState('TEXT');\n\n        yy_.yytext = '';\n        return 3; // only because it is an empty object \n        break;\n\n      case 19:\n        /*! Conditions:: INITIAL AFTER_TAG_NAME ATTRS_END */\n        /*! Rule::       &attributes\\([^\\)]+\\) */\n        debug('\\'&attributes(\\'[^)]+\\')\\'');\n\n        return 8;\n        break;\n\n      case 20:\n        /*! Conditions:: INITIAL */\n        /*! Rule::       {interpolation} */\n        debug('{interpolation}');\n\n        debug('this.matches=', this.matches);\n        this.pushState('AFTER_TAG_NAME');\n        return ['INTERP_END', 'INTERP_VAL', 'INTERP_START'];\n        break;\n\n      case 21:\n        /*! Conditions:: INTERPOLATION */\n        /*! Rule::       .+ */\n        // debug('<INTERPOLATION>.+')\n        // debug('this.matches=', this.matches)\n        // this.pushState('INTERPOLATION');\n\n        return 28;\n\n        break;\n\n      case 22:\n        /*! Conditions:: INITIAL */\n        /*! Rule::       {interpolation_start} */\n        debug('{interpolation_start}');\n\n        debug('this.matches=', this.matches);\n        this.pushState('INTERPOLATION_START');\n        return 'INTERPOLATION_START';\n        break;\n\n      case 23:\n        /*! Conditions:: INITIAL */\n        /*! Rule::       <\\/.+ */\n        this.pushState('TEXT');\n\n        return 3;\n        break;\n\n      case 24:\n        /*! Conditions:: AFTER_TAG_NAME */\n        /*! Rule::       =  */\n        this.popState();\n\n        this.pushState('ASSIGNMENT_VALUE');\n        return 34;\n        break;\n\n      case 25:\n        /*! Conditions:: AFTER_TAG_NAME AFTER_ATTRS */\n        /*! Rule::       :  */\n        this.popState();\n\n        return 5;\n        break;\n\n      case 26:\n        /*! Conditions:: AFTER_KEYWORD */\n        /*! Rule::       {filter} */\n        yy_.yytext = yy_.yytext.substring(1);\n\n        return 30;\n        break;\n\n      case 27:\n        /*! Conditions:: AFTER_TAG_NAME AFTER_TEXT_TAG_NAME */\n        /*! Rule::       \\( */\n        ')'; // hack for syntax\n\n        debug(`<AFTER_TAG_NAME,AFTER_TEXT_TAG_NAME>'('`);\n        this.pushState('ATTRS_STARTED');\n        return 11;\n        break;\n\n      case 29:\n        /*! Conditions:: MIXIN_PARAMS_END */\n        /*! Rule::       \\) */\n        // this.popState() // for inline blocks after mixin calls\n        return 14;\n\n        break;\n\n      case 30:\n        /*! Conditions:: INITIAL ATTRS_END */\n        /*! Rule::       {classname} */\n        this.pushState('AFTER_TAG_NAME');\n\n        yy_.yytext = yy_.yytext.substring(1);\n        return 12;\n        break;\n\n      case 31:\n        /*! Conditions:: INITIAL ATTRS_END */\n        /*! Rule::       {classname_relaxed} */\n        debug('<INITIAL,ATTRS_END>{classname_relaxed}');\n\n        if (this.yy.parser.options.allowDigitToStartClassName) {\n          this.pushState('AFTER_TAG_NAME');\n          yy_.yytext = yy_.yytext.substring(1);\n          return 12;\n        } else {\n          throw new Error(\n            'Classnames starting with a digit is not allowed. Set allowDigitToStartClassName to true to allow.'\n          );\n        }\n\n        break;\n\n      case 32:\n        /*! Conditions:: ATTRS_STARTED */\n        /*! Rule::       (\\(.+|.+\\().+ */\n        '))';\n\n        debug('15 yy_.yytext=', yy_.yytext);\n        debug('15 this.matches=', this.matches);\n        const stack = [];\n        let i = 0;\n\n        for (; i < yy_.yytext.length; i++) {\n          // debug('yy_.yytext[i]=', yy_.yytext[i])\n          if (/[\\)\\]}]/.test(yy_.yytext[i])) {\n            debug('match');\n            debug('stack.peek()=', stack.peek());\n\n            if (stack.length == 0 || stack.pop() != yy_.yytext[i]) {\n              debug('stack.length=', stack.length);\n              break;\n            }\n            // else if () {\n            // }\n          } else {\n            switch (yy_.yytext[i]) {\n            case '(':\n              stack.push(')');\n              break;\n\n            case '[':\n              stack.push(']');\n              break;\n\n            case '{':\n              stack.push('}');\n              break;\n            }\n            // else if () {\n            // }\n          }\n        }\n\n        this.unput(yy_.yytext.substring(i));\n        yy_.yytext = yy_.yytext.substring(0, i);\n        debug('15 yy_.yytext=', yy_.yytext);\n        this.popState();\n        this.pushState('ATTRS_END');\n        return 31;\n        break;\n\n      case 33:\n        /*! Conditions:: ATTRS_STARTED */\n        /*! Rule::       ([^\\)]+)(\\))(?!\\s*\\..+\\)) */\n        this.popState();\n\n        this.pushState('ATTRS_END');\n        debug('20 this.matches=', this.matches);\n        debug('20 this.matches.length=', this.matches.length);\n        debug('20 yy_.yytext=', yy_.yytext);\n\n        try {\n          this.unput(')');\n\n          if (this.matches.length > 1) {\n            yy_.yytext = this.matches[1];\n            // if (yy_.yytext.startsWith(')')) {\n            //   yy_.yytext = yy_.yytext.substring(1)\n            // }\n          }\n        } catch (e) {\n          console.error(e);\n        }\n\n        lparenOpen = false;\n        debug('20 yy_.yytext=', yy_.yytext);\n        return 31;\n        break;\n\n      case 34:\n        /*! Conditions:: ATTRS_STARTED */\n        /*! Rule::       (.+)\\)\\s*$ */\n        this.popState();\n\n        debug('30 this.matches=', this.matches);\n        debug('30 this.matches.length=', this.matches.length);\n        debug('30 yy_.yytext=', yy_.yytext);\n\n        try {\n          if (this.matches.length > 1) {\n            yy_.yytext = this.matches[1];\n          }\n        } catch (e) {\n          console.error(e);\n        }\n\n        lparenOpen = false;\n        debug('30 yy_.yytext=', yy_.yytext);\n        return ['RPAREN', 'ATTR_TEXT'];\n        break;\n\n      case 35:\n        /*! Conditions:: ATTRS_STARTED */\n        /*! Rule::       (.+)\\)\\.?\\s*(.+)$ */\n        this.popState();\n\n        this.pushState('ATTRS_END');\n        debug('40 this.matches=', this.matches);\n        this.unput(this.matches[2]);\n        yy_.yytext = yy_.yytext.substring(0, yy_.yytext.indexOf(this.matches[1]) + this.matches[1].length);\n        debug('40 yy_.yytext=', yy_.yytext);\n        lparenOpen = false;\n        return ['RPAREN', 'ATTR_TEXT'];\n        break;\n\n      case 36:\n        /*! Conditions:: ATTRS_STARTED */\n        /*! Rule::       (.+)\\.?\\s*$ */\n        this.popState();\n\n        debug('50 this.matches=', this.matches);\n        debug('50 this.matches.length=', this.matches.length);\n        debug('50 yy_.yytext=', yy_.yytext);\n\n        try {\n          if (this.matches.length > 1) {\n            yy_.yytext = this.matches[1];\n          }\n        } catch (e) {\n          console.error(e);\n        }\n\n        debug('50 yy_.yytext=', yy_.yytext);\n        return 7;\n        break;\n\n      case 37:\n        /*! Conditions:: AFTER_TAG_NAME */\n        /*! Rule::       {tag_id} */\n        this.pushState('AFTER_TAG_NAME');\n\n        yy_.yytext = this.matches[1].substring(1);\n        return 17;\n        break;\n\n      case 38:\n        /*! Conditions:: AFTER_TAG_NAME */\n        /*! Rule::       {classname} */\n        // yy_.yytext = this.matches[1].substring(1);\n        yy_.yytext = yy_.yytext.substring(1);\n\n        debug('60 yy_.yytext=', yy_.yytext);\n        return 12;\n        break;\n\n      case 39:\n        /*! Conditions:: AFTER_TAG_NAME */\n        /*! Rule::       {classname_relaxed} */\n        // debug('<AFTER_TAG_NAME>{classname_relaxed}')\n        // debug('Object.keys(this).length=', Object.keys(this).length)\n        // debug('Object.keys(this.yy).length=', Object.keys(this.yy).length)\n        // debug('Object.keys(this.yy.parser).length=', Object.keys(this.yy.parser).length)\n        // debug('this.yy.parser.options=', util.inspect(this.yy.parser.options, false, 10, true))\n        if (this.yy.parser.options.allowDigitToStartClassName) {\n          yy_.yytext = yy_.yytext.substring(1);\n          return 12;\n        } else {\n          throw new Error(\n            'Classnames starting with a digit is not allowed. Set allowDigitToStartClassName to true to allow.'\n          );\n        }\n\n        break;\n\n      case 40:\n        /*! Conditions:: INITIAL */\n        /*! Rule::       {space}{2,} */\n        debug('{space}{2,}');\n\n        return 25;\n        break;\n\n      case 41:\n        /*! Conditions:: AFTER_TAG_NAME AFTER_KEYWORD AFTER_TEXT_TAG_NAME */\n        /*! Rule::       {space}{space} */\n        this.pushState('TEXT');\n\n        debug('space space');\n        this.unput(' ');\n        return 25;\n        break;\n\n      case 42:\n        /*! Conditions:: AFTER_TAG_NAME AFTER_KEYWORD AFTER_TEXT_TAG_NAME */\n        /*! Rule::       {space}{classname} */\n        this.pushState('ATTRS_END');\n\n        yy_.yytext = yy_.yytext.substring(1);\n        return 3;\n        break;\n\n      case 43:\n        /*! Conditions:: AFTER_TAG_NAME AFTER_KEYWORD AFTER_TEXT_TAG_NAME */\n        /*! Rule::       {space}{classname_relaxed} */\n        debug(\n          '<AFTER_TAG_NAME,AFTER_KEYWORD,AFTER_TEXT_TAG_NAME>{space}{classname_relaxed} this.parser.options=',\n          this.parser.options\n        );\n\n        if (this.yy.parser.options.allowDigitToStartClassName) {\n          this.pushState('ATTRS_END');\n          yy_.yytext = yy_.yytext.substring(1);\n          return 3;\n        } else {\n          throw new Error(\n            'Classnames starting with a digit is not allowed. Set allowDigitToStartClassName to true to allow.'\n          );\n        }\n\n        break;\n\n      case 44:\n        /*! Conditions:: AFTER_TAG_NAME AFTER_KEYWORD AFTER_TEXT_TAG_NAME */\n        /*! Rule::       {space} */\n        this.pushState('ATTRS_END');\n\n        debug('<AFTER_TAG_NAME,AFTER_KEYWORD,AFTER_TEXT_TAG_NAME>{space}');\n        return 25;\n        break;\n\n      case 45:\n        /*! Conditions:: ATTRS_END MIXIN_PARAMS_END */\n        /*! Rule::       {space} */\n        this.pushState('TEXT');\n\n        debug('<ATTRS_END>{space}');\n        return 25;\n        break;\n\n      case 47:\n        /*! Conditions:: AFTER_TAG_NAME AFTER_KEYWORD AFTER_TEXT_TAG_NAME NO_MORE_SPACE */\n        /*! Rule::       .+ */\n        // if (yy_.yytext.startsWith(' ') {\n        //   yy_.yytext = yy_.yytext.substring(1);\n        // }\n        debug('70 yy_.yytext=', yy_.yytext);\n\n        return 3;\n        break;\n\n      case 48:\n        /*! Conditions:: ATTRS_END */\n        /*! Rule::       ={space} */\n        this.popState();\n\n        this.pushState('ASSIGNMENT_VALUE');\n        return 34;\n        break;\n\n      case 49:\n        /*! Conditions:: INITIAL ATTRS_END */\n        /*! Rule::       \\.\\s*$ */\n        this.popState();\n\n        return 24;\n        break;\n\n      case 50:\n        /*! Conditions:: ASSIGNMENT_VALUE */\n        /*! Rule::       .+ */\n        this.popState();\n\n        return 33;\n        break;\n\n      case 51:\n        /*! Conditions:: ATTRS_END */\n        /*! Rule::       .+ */\n        // yy_.yytext = yy_.yytext.substring(1)\n        debug('6 yy_.yytext=', yy_.yytext);\n\n        return 3;\n        break;\n\n      case 52:\n        /*! Conditions:: UNBUF_CODE_START */\n        /*! Rule::       {space} */\n        debug('<UNBUF_CODE_START>{space}');\n\n        return 25;\n        break;\n\n      case 54:\n        /*! Conditions:: MIXIN_CALL_START */\n        /*! Rule::       \\( */\n        ')';\n\n        this.popState();\n        this.pushState('MIXIN_PARAMS_STARTED');\n        return 11;\n        break;\n\n      case 55:\n        /*! Conditions:: MIXIN_CALL_START */\n        /*! Rule::       {space}$ */\n        this.popState();\n\n        break;\n\n      case 56:\n        /*! Conditions:: TEXT */\n        /*! Rule::       .+ */\n        debug('80 yy_.yytext=', yy_.yytext);\n\n        return 3;\n        break;\n\n      case 57:\n        /*! Conditions:: MULTI_LINE_ATTRS */\n        /*! Rule::       ,?(.*)\\) */\n        debug('110 this.matches=', this.matches);\n\n        this.popState();\n        yy_.yytext = this.matches[1];\n        return 6;\n        break;\n\n      case 59:\n        /*! Conditions:: MIXIN_PARAMS_STARTED */\n        /*! Rule::       \\) */\n        this.popState();\n\n        this.pushState('MIXIN_PARAMS_END');\n        yy_.yytext = '';\n        return ['RPAREN', 'MIXIN_PARAMS'];\n        break;\n\n      case 60:\n        /*! Conditions:: MIXIN_PARAMS_STARTED */\n        /*! Rule::       (.+)(\\)) */\n        this.popState();\n\n        this.pushState('MIXIN_PARAMS_END');\n        debug('120 this.matches=', this.matches);\n        debug('120 this.matches.length=', this.matches.length);\n        debug('120 yy_.yytext=', yy_.yytext);\n\n        try {\n          this.unput(')');\n\n          if (this.matches.length > 1) {\n            yy_.yytext = this.matches[1];\n            // if (yy_.yytext.startsWith(')')) {\n            //   yy_.yytext = yy_.yytext.substring(1)\n            // }\n          }\n        } catch (e) {\n          console.error(e);\n        }\n\n        lparenOpen = false;\n        debug('120 yy_.yytext=', yy_.yytext);\n        return 13;\n        break;\n\n      case 61:\n        /*! Conditions:: INITIAL */\n        /*! Rule::       <!--.+--> */\n        yy_.yytext = yy_.yytext.slice(4, -3);\n\n        return 9;\n        break;\n\n      case 62:\n        /*! Conditions:: UNBUF_CODE */\n        /*! Rule::       . */\n        this.popState();\n\n        this.unput(yy_.yytext);\n        break;\n\n      default:\n        return this.simpleCaseActionClusters[yyrulenumber];\n      }\n    },\n\n    simpleCaseActionClusters: {\n      /*! Conditions:: INITIAL */\n      /*! Rule::       -{space}*$ */\n      10: 10,\n\n      /*! Conditions:: ATTRS_END */\n      /*! Rule::       \\) */\n      28: 14,\n\n      /*! Conditions:: AFTER_TAG_NAME AFTER_TEXT_TAG_NAME ATTRS_END */\n      /*! Rule::       \\.\\s*$ */\n      46: 24,\n\n      /*! Conditions:: UNBUF_CODE_START */\n      /*! Rule::       .+ */\n      53: 4,\n\n      /*! Conditions:: MULTI_LINE_ATTRS */\n      /*! Rule::       .+ */\n      58: 7,\n\n      /*! Conditions:: UNBUF_CODE_BLOCK */\n      /*! Rule::       .+ */\n      63: 19\n    },\n\n    rules: [\n      /*  0: */  /^(?:#\\[((a|abbr|acronym|address|applet|area|article|aside|audio|b|base|basefont|bdi|bdo|bgsound|big|blink|blockquote|body|br|button|canvas|caption|center|cite|code|col|colgroup|content|data|datalist|dd|del|details|dfn|dialog|dir|div|dl|dt|em|embed|fb|fieldset|figcaption|figure|font|foo|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hgroup|hr|html|i|iframe|image|img|input|ins|kbd|keygen|label|legend|li|link|main|map|mark|marquee|math|menu|menuitem|meta|meter|nav|nobr|noembed|noframes|noscript|object|ol|optgroup|option|output|p|param|picture|plaintext|portal|pre|progress|q|rb|rp|rt|rtc|ruby|s|samp|section|select|shadow|slot|small|source|spacer|span|strike|strong|sub|summary|sup|svg|table|tbody|td|template|textarea|tfoot|th|thead|time|title|tr|track|tt|u|ul|var|video|wbr|xmp)\\b))/i,\n      /*  1: */  /^(?:((append|block|case|default|doctype|each|else|extends|for|if|include|mixin|prepend|unless|when|while)\\b))/i,\n      /*  2: */  /^(?:((a|abbr|acronym|address|applet|area|article|aside|audio|b|base|basefont|bdi|bdo|bgsound|big|blink|blockquote|body|br|button|canvas|caption|center|cite|code|col|colgroup|content|data|datalist|dd|del|details|dfn|dialog|dir|div|dl|dt|em|embed|fb|fieldset|figcaption|figure|font|foo|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hgroup|hr|html|i|iframe|image|img|input|ins|kbd|keygen|label|legend|li|link|main|map|mark|marquee|math|menu|menuitem|meta|meter|nav|nobr|noembed|noframes|noscript|object|ol|optgroup|option|output|p|param|picture|plaintext|portal|pre|progress|q|rb|rp|rt|rtc|ruby|s|samp|section|select|shadow|slot|small|source|spacer|span|strike|strong|sub|summary|sup|svg|table|tbody|td|template|textarea|tfoot|th|thead|time|title|tr|track|tt|u|ul|var|video|wbr|xmp)\\b))/i,\n      /*  3: */  /^(?:(script|style))/i,\n      /*  4: */  /^(?:(#[\\d\\-a-z]+))/i,\n      /*  5: */  /^(?:(\\+\\s*[a-z]+\\b))/i,\n      /*  6: */  /^(?:\\})/i,\n      /*  7: */  /^(?:{conditional})/i,\n      /*  8: */  /^(?:\\()/i,\n      /*  9: */  /^(?:.+\\))/i,\n      /* 10: */  /^(?:-([   -​\\u2028\\u2029　])*$)/i,\n      /* 11: */  /^(?:-)/i,\n      /* 12: */  /^(?:(\\.-?[^\\W\\d]+[\\w\\-]*))/i,\n      /* 13: */  /^(?:(\\.-?\\w+[\\w\\-]*))/i,\n      /* 14: */  /^(?:\\/\\/)/i,\n      /* 15: */  /^(?:<[A-Z_]+>)/i,\n      /* 16: */  /^(?:\\| )/i,\n      /* 17: */  /^(?:\\|\\.)/i,\n      /* 18: */  /^(?:\\|$)/i,\n      /* 19: */  /^(?:&attributes\\([^)]+\\))/i,\n      /* 20: */  /^(?:(#\\{.+\\}))/i,\n      /* 21: */  /^(?:.+)/i,\n      /* 22: */  /^(?:(#\\{))/i,\n      /* 23: */  /^(?:<\\/.+)/i,\n      /* 24: */  /^(?:= )/i,\n      /* 25: */  /^(?:: )/i,\n      /* 26: */  /^(?:(:[\\d\\-a-z]+\\b))/i,\n      /* 27: */  /^(?:\\()/i,\n      /* 28: */  /^(?:\\))/i,\n      /* 29: */  /^(?:\\))/i,\n      /* 30: */  /^(?:(\\.-?[^\\W\\d]+[\\w\\-]*))/i,\n      /* 31: */  /^(?:(\\.-?\\w+[\\w\\-]*))/i,\n      /* 32: */  /^(?:(\\(.+|.+\\().+)/i,\n      /* 33: */  /^(?:([^)]+)(\\))(?!\\s*\\..+\\)))/i,\n      /* 34: */  /^(?:(.+)\\)\\s*$)/i,\n      /* 35: */  /^(?:(.+)\\)\\.?\\s*(.+)$)/i,\n      /* 36: */  /^(?:(.+)\\.?\\s*$)/i,\n      /* 37: */  /^(?:(#[\\d\\-a-z]+))/i,\n      /* 38: */  /^(?:(\\.-?[^\\W\\d]+[\\w\\-]*))/i,\n      /* 39: */  /^(?:(\\.-?\\w+[\\w\\-]*))/i,\n      /* 40: */  /^(?:([   -​\\u2028\\u2029　]){2,})/i,\n      /* 41: */  /^(?:([   -​\\u2028\\u2029　])([   -​\\u2028\\u2029　]))/i,\n      /* 42: */  /^(?:([   -​\\u2028\\u2029　])(\\.-?[^\\W\\d]+[\\w\\-]*))/i,\n      /* 43: */  /^(?:([   -​\\u2028\\u2029　])(\\.-?\\w+[\\w\\-]*))/i,\n      /* 44: */  /^(?:([   -​\\u2028\\u2029　]))/i,\n      /* 45: */  /^(?:([   -​\\u2028\\u2029　]))/i,\n      /* 46: */  /^(?:\\.\\s*$)/i,\n      /* 47: */  /^(?:.+)/i,\n      /* 48: */  /^(?:=([   -​\\u2028\\u2029　]))/i,\n      /* 49: */  /^(?:\\.\\s*$)/i,\n      /* 50: */  /^(?:.+)/i,\n      /* 51: */  /^(?:.+)/i,\n      /* 52: */  /^(?:([   -​\\u2028\\u2029　]))/i,\n      /* 53: */  /^(?:.+)/i,\n      /* 54: */  /^(?:\\()/i,\n      /* 55: */  /^(?:([   -​\\u2028\\u2029　])$)/i,\n      /* 56: */  /^(?:.+)/i,\n      /* 57: */  /^(?:,?(.*)\\))/i,\n      /* 58: */  /^(?:.+)/i,\n      /* 59: */  /^(?:\\))/i,\n      /* 60: */  /^(?:(.+)(\\)))/i,\n      /* 61: */  /^(?:<!--.+-->)/i,\n      /* 62: */  /^(?:.)/i,\n      /* 63: */  /^(?:.+)/i\n    ],\n\n    conditions: {\n      'TEXT': {\n        rules: [16, 56],\n        inclusive: false\n      },\n\n      'TEXT_START': {\n        rules: [],\n        inclusive: false\n      },\n\n      'AFTER_TAG_NAME': {\n        rules: [19, 24, 25, 27, 37, 38, 39, 41, 42, 43, 44, 46, 47],\n        inclusive: false\n      },\n\n      'ATTRS_STARTED': {\n        rules: [32, 33, 34, 35, 36],\n        inclusive: false\n      },\n\n      'ATTR_TEXT': {\n        rules: [],\n        inclusive: false\n      },\n\n      'MIXIN_CALL_START': {\n        rules: [54, 55],\n        inclusive: false\n      },\n\n      'ATTRS_END': {\n        rules: [19, 28, 30, 31, 45, 46, 48, 49, 51],\n        inclusive: true\n      },\n\n      'CODE_START': {\n        rules: [],\n        inclusive: false\n      },\n\n      'UNBUF_CODE': {\n        rules: [11, 62],\n        inclusive: false\n      },\n\n      'MULTI_LINE_ATTRS': {\n        rules: [57, 58],\n        inclusive: false\n      },\n\n      'COMMENT': {\n        rules: [],\n        inclusive: false\n      },\n\n      'AFTER_ATTRS': {\n        rules: [25],\n        inclusive: false\n      },\n\n      'AFTER_TEXT_TAG_NAME': {\n        rules: [27, 41, 42, 43, 44, 46, 47],\n        inclusive: false\n      },\n\n      'AFTER_KEYWORD': {\n        rules: [26, 41, 42, 43, 44, 47],\n        inclusive: false\n      },\n\n      'NO_MORE_SPACE': {\n        rules: [47],\n        inclusive: false\n      },\n\n      'ASSIGNMENT_VALUE': {\n        rules: [50],\n        inclusive: false\n      },\n\n      'COND_START': {\n        rules: [8, 9],\n        inclusive: false\n      },\n\n      'INTERPOLATION_START': {\n        rules: [],\n        inclusive: false\n      },\n\n      'MIXIN_PARAMS_STARTED': {\n        rules: [59, 60],\n        inclusive: false\n      },\n\n      'HTML_COMMENT_STARTED': {\n        rules: [],\n        inclusive: false\n      },\n\n      'INITIAL': {\n        rules: [\n          0,\n          1,\n          2,\n          3,\n          4,\n          5,\n          6,\n          7,\n          10,\n          11,\n          12,\n          13,\n          14,\n          15,\n          16,\n          17,\n          18,\n          19,\n          20,\n          22,\n          23,\n          30,\n          31,\n          40,\n          49,\n          61\n        ],\n\n        inclusive: true\n      },\n\n      'INTERPOLATION': {\n        rules: [21],\n        inclusive: false\n      },\n\n      'MIXIN_PARAMS_END': {\n        rules: [29, 45],\n        inclusive: false\n      },\n\n      'UNBUF_CODE_START': {\n        rules: [52, 53],\n        inclusive: false\n      },\n\n      'UNBUF_CODE_BLOCK': {\n        rules: [63],\n        inclusive: false\n      }\n    }\n  };\n\n  return lexer;\n}();\nparser.lexer = lexer;\n\nimport assert from \"assert\"\nimport util from \"util\"\nimport {} from \"@foo-dog/utils\"\nimport _ from \"lodash\"\nimport debugFunc from 'debug'\nimport parseAttrs from './attrs.js'\nimport parseInline from './inline.js'\nimport { AttrResolver } from '@foo-dog/attrs'\n\nconst TEXT_TAGS_ALLOW_SUB_TAGS = true\n\nconst debug = debugFunc('pug-line-lexer')\n\nlet tagAlreadyFound = false\nlet obj\nvar lparenOpen = false\n// const keysToMergeText = ['therest']\n\nconst attrResolver = new AttrResolver()\n\nfunction rank(type1, type2) {\n  if (type2 === 'text') {\n    return type1\n  }\n  else if (type1 === type2) {\n    return type1\n  }\n  // else if (type1 == 'tag' && type2 == 'tag_with_multiline_attrs') {\n  //   return type2\n  // }\n  // else if (type1 == 'tag_with_multiline_attrs' && type2 == 'tag') {\n  //   return type1\n  // }\n  else {\n    return type1.concat(type2)\n  }\n} \n\nfunction isQuoted(str) {\n  if (str.trim().slice(-1) === \"'\" && str.trim().slice(-1) === \"'\") {\n    return true\n  }\n  if (str.trim().slice(-1) === '\"' && str.trim().slice(-1) === \"'\") {\n    return true\n  }\n  return false\n}\n\nfunction quote(str) {\n  return '\"' + str + '\"'\n}\n\nfunction unquote(str) {\n  return str.trim().slice(1, -1);\n}\n\nfunction merge(obj, src) {\n\n  if (obj == undefined || _.isEmpty(obj)) {\n    debug('empty/undefined obj, returning src')\n    return src\n  }\n  else if (src == undefined || _.isEmpty(src)) {\n    debug('empty/undefined src, returning obj')\n    return obj\n  }\n\n  if (Array.isArray(src) && src.length > 0) {\n    src = src.reduce(merge)\n    debug('src reduced to=', src)\n  }\n\n  debug('merging', obj, src)\n\n  // if (util.isDeepStrictEqual(src, [ { therest: '' } ]))\n  //    return obj\n\n  if (obj.type != 'text' && Object.keys(src).length == 1 && Object.keys(src)[0] == 'children' && src.children.length == 1 && src.children[0].hasOwnProperty('type') && src.children[0].type == 'text') {\n    return Object.assign(obj, { val: src.children[0].val })\n  }\n\n  // function convertClassAttr(key, obj) {\n  //   let ret\n  //   if (key === 'attrs' && obj.length == 1 && obj[0].name === 'class') {\n  //     ret = [{ classes: obj[0].val }]\n  //   }\n  //   else {\n  //     ret = obj\n  //   }\n  //   return ret\n  // }\n\n  let ret = _.mergeWith(obj, src, function (objValue, srcValue, key, object, source, stack) {\n    debug('merging', 'inside _mergeWith', key, objValue, srcValue)\n    if (objValue == undefined && srcValue == undefined) {\n       return {}\n    }\n    if (objValue == undefined) {\n       return srcValue\n    }\n    if (srcValue == undefined) {\n       return objValue\n    }\n    return rank(objValue, srcValue)\n    // }\n  })\n\n  // if (ret.hasOwnProperty('attrs') && ret.attrs.length == 1 && Object.keys(ret.attrs[0]).length == 1 && Object.keys(ret.attrs[0])[0] == 'classes' && isQuoted(ret.attrs[0].classes)) {\n  //   debug('merging', ' found classes')\n  //   const classes = unquote(ret.attrs[0].classes)\n  //   delete ret.attrs\n  //   ret = merge(ret, { classes: classes })\n  // }\n\n  debug('merging', ' returning', ret)\n  return ret\n  //  return Object.assign(obj, src);\n}\n\n// creates nodes of text and/or interpolations\nfunction createElems(text, parser) {\n  const debug = debugFunc('pug-line-lexer:createElems')\n  const matches1 = text.matchAll(/#[\\[\\{].*?[\\]\\}]/g)\n  let idx = 0\n  let elems = []\n  for (const match of matches1) {\n    debug('match=', match)\n    if (idx != match.index) {\n      const textToPush = text.substring(idx, match.index);\n      debug('pushing text onto element array:', textToPush)\n      elems.push({ type: 'text', val: textToPush })\n      idx = match.index\n    }\n    if (match[0][1] == '[') {\n      debug('found left bracked')\n      const toParse = match[0].slice(2, -1)\n      debug('sending to parser:', toParse)\n      const results = parser.parse(toParse)\n      debug('received from parser:', results)\n      elems.push(results)\n    }\n    else {\n      // const toParse = match[0]\n      // debug('sending to parser:', toParse)\n      // const results = parser.parse(toParse)\n      // debug('received from parser:', results)\n      // elems.push(...results)\n      debug('pushing interpolation value to arr:', match[0].slice(2, -1))\n      elems.push({ type: 'interpolation', val: match[0].slice(2, -1)})\n    }\n    idx += match[0].length\n    // debug('match', match)\n    // console.log(`Found ${match[0]} start=${match.index} end=${match.index + match[0].length}.`);\n  }\n  if (idx != text.length) {\n    elems.push({ type: 'text', val: text.substring(idx, text.index) })\n  }\n\n  debug('returning=', util.inspect(elems, false, 5))\n  return elems;\n}\n\n\nfunction Parser() {\n    this.yy = {};\n}\nParser.prototype = parser;\nparser.Parser = Parser;\n\nfunction yyparse() {\n    return parser.parse.apply(parser, arguments);\n}\n\n\n\nexport default {\n    parser,\n    Parser,\n    parse: yyparse,\n    \n};\n\n"],"names":["$7fe1e10b0ff9bc11$var$JisonParserError","msg","hash","stacktrace","Object","defineProperty","this","enumerable","writable","value","exception","Error","ex2","message","stack","hasOwnProperty","captureStackTrace","constructor","$7fe1e10b0ff9bc11$var$s","c","l","a","i","push","$7fe1e10b0ff9bc11$var$c","length","$7fe1e10b0ff9bc11$var$u","rv","e","apply","setPrototypeOf","prototype","create","name","$7fe1e10b0ff9bc11$var$parser","trace","JisonParserError","yy","options","type","hasPartialLrUpgradeOnConflict","errorRecoveryTokenDiscardCount","tokenStack","ebnf","symbols_","$accept","$end","ASSIGN_PART","ATTR","BODY","CLASSNAME","DOT","EOF","EQ","FILTER_START","INTERPOLATION","TAG","TAG_END","TAG_START","TEXT","error","line","line_part","line_part_repetition","line_part_repetition2","line_part_repetition3","line_part_repetition4","line_part_repetition5","line_part_repetition_plus","line_part_repetition_plus10","line_part_repetition_plus11","line_part_repetition_plus12","line_part_repetition_plus13","line_part_repetition_plus14","line_part_repetition_plus15","line_part_repetition_plus16","line_part_repetition_plus17","line_part_repetition_plus18","line_part_repetition_plus19","line_part_repetition_plus2","line_part_repetition_plus20","line_part_repetition_plus21","line_part_repetition_plus22","line_part_repetition_plus23","line_part_repetition_plus3","line_part_repetition_plus4","line_part_repetition_plus5","line_part_repetition_plus6","line_part_repetition_plus7","line_part_repetition_plus8","line_part_repetition_plus9","start","terminals_","TERROR","originalQuoteName","originalParseError","cleanupAfterParse","constructParseErrorInfo","yyMergeLocationInfo","__reentrant_call_depth","__error_infos","__error_recovery_infos","quoteName","id_str","getSymbolName","symbol","s","key","describeSymbol","terminal_descriptions_","id","collect_expected_token_set","state","do_not_describe","tokenset","check","state_descriptions_","p","table","d","productions_","pop","r","rule","$7fe1e10b0ff9bc11$var$bp","performAction","yystate","yysp","yyvstack","parser","lexer","$","$7fe1e10b0ff9bc11$var$debug","Array","isArray","undefined","tag_name","attrs","body","obj1","val","includes","parsedBody","parse","children","join","$59347b43c1db971c$export$2e2bcd8739ae039","assignment","classes","len","y","t","m","mode","g","goto","n","q","j","z","shift","$7fe1e10b0ff9bc11$var$bt","defaultActions","idx","$7fe1e10b0ff9bc11$var$bda","parseError","str","ExceptionClass","recoverable","destroy","input","self","sstack","tstack","vstack","sp","symbol1","NO_ACTION","__lexer__","action","sharedState_yy","pre_parse","post_parse","pre_lex","post_lex","lex","token","yyGetSharedState","dst","src","k","call","shallow_copy_noclobber","resultValue","invoke_post_methods","do_not_nuke_errorinfos","cleanupAfterLex","el","ex","expected","pei","errStr","text","match","yytext","token_id","yylineno","new_state","newState","symbol_stack","state_stack","value_stack","stack_pointer","rec","yyrulelen","this_production","yyval","_$","retval","setInput","canIUse","fastLex","errSymbolDescr","expected1","showPosition","ntsymbol","JisonLexerError","$7fe1e10b0ff9bc11$var$lexer","ERROR","__currentRuleSet__","__decompressed","done","_backtrack","_input","_more","_signaled_error_token","conditionStack","matched","matches","offset","yyleng","yylloc","constructLexErrorInfo","show_input_position","indexOf","prettyPrintRange","test","pos_str","loc","yyerror","lineno_msg","lexerErrorsAreRecoverable","args","slice","arguments","extra_error_attributes","clear","col","last_column","first_line","first_column","last_line","range","rules","rule_re","conditions","spec","rule_ids","rule_regexes","rule_new_ids","__rule_regexes","__rule_count","editRemainingInput","callback","cpsArg","ch","slice_len","lines","ch2","unput","split","substr","pre","pre_lines","more","reject","backtrack_lexer","less","pastInput","maxSize","maxLines","past","substring","replace","upcomingInput","next","maxPrefix","maxPostfix","deriveLocationInfo","actual","preceding","following","current","context_loc","context_loc2","l0","Math","max","l1","lineno_display_width","log10","ws_prefix","nonempty_line_indexes","rv1","map","index","nli","lno","errpfx","trim","line_arr","clip_start","MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT","clip_end","intermediate_line","splice","describeYYLLOC","display_range_too","l2","c1","c2","r1","r2","test_match","indexed_rule","backup","match_str","match_str_len","tempMatch","_currentRules","trackPosition","topState","regexes","flex","pendingInput","activeCondition","conditionStackDepth","begin","condition","pushState","popState","abs","stateStackSize","caseInsensitive","yyrulenumber","YY_START","yy_","$7fe1e10b0ff9bc11$var$interpStack","simpleCaseActionClusters","AFTER_TAG_START","inclusive","AFTER_TAG_START_END","ASSIGNMENT_STARTED","INITIAL","INTERP_START","TAG_STARTED","ASSIGNMENT_STARTED_BRACKET_ADDED","BODY_STARTED","BRACKET_ADDED","ATTRS_STARTED","PARENS_ADDED","CLASSNAME_STARTED","$EeXfJ$debug","$7fe1e10b0ff9bc11$var$tagAlreadyFound","$7fe1e10b0ff9bc11$var$Parser","main","strict","compareFunc","$EeXfJ$util","inspect","$EeXfJ$assert","deepEqual","dyp","fail","Parser","$7fe1e10b0ff9bc11$export$2e2bcd8739ae039","$59347b43c1db971c$var$JisonParserError","$59347b43c1db971c$var$s","$59347b43c1db971c$var$c","$59347b43c1db971c$var$u","$59347b43c1db971c$var$parser","COMMA","NAME","PLUS","SPACE","SPREAD","VAL","VAR","attr","attrs_group","attrs_group2","$59347b43c1db971c$var$bp","$59347b43c1db971c$var$debug","$59347b43c1db971c$var$bt","$59347b43c1db971c$var$lexer","lastSepIndex","letterFoundIndex","charAt","lastIndexOf","$59347b43c1db971c$var$findLastSeparatorIndex","nextToken","removeFromEnd","AFTER_NAME","AFTER_EQ","VARS","$59347b43c1db971c$var$tagAlreadyFound","$59347b43c1db971c$var$Parser","$664c792f0c15f37a$var$JisonParserError","$664c792f0c15f37a$var$s","$664c792f0c15f37a$var$c","$664c792f0c15f37a$var$u","$664c792f0c15f37a$var$parser","ASSIGNMENT","ASSIGNMENT_VALUE","ATTR_TEXT","ATTR_TEXT_CONT","ATTR_TEXT_END","AT_ATTRS","COMMENT","CONDITION","CONDITIONAL","DOT_END","FILTER","HTML_COMMENT","INTERP_END","INTERP_VAL","KEYWORD","LPAREN","MIXIN_CALL","MIXIN_PARAMS","NESTED_TAG_START","PIPE","RCURLY","RPAREN","TAG_ID","TEXT_TAG","UNBUF_CODE","UNBUF_CODE_BLOCK","UNBUF_CODE_BLOCK_START","classnames","classnames_repetition_plus","first_token","line_end","line_splitter","line_start","line_start_option","tag_part","$664c792f0c15f37a$var$bp","$664c792f0c15f37a$var$debug","$664c792f0c15f37a$var$merge","func","Function","entries2","entries","attrs2","elemsReturned","$664c792f0c15f37a$var$createElems","JSON","stringify","attrs_start","console","$664c792f0c15f37a$var$quote","params","resultInterpVal1","$664c792f0c15f37a$var$attrResolver","resolve","$EeXfJ$AttrResolver","resultInterpVal2","filter","forEach","$EeXfJ$lodash","isEmpty","attrs1","cn","assignment_val","$664c792f0c15f37a$var$bt","$664c792f0c15f37a$var$bda","$664c792f0c15f37a$var$lexer","$664c792f0c15f37a$var$TEXT_TAGS_ALLOW_SUB_TAGS","startsWith","allowDigitToStartClassName","peek","e1","e2","e3","TEXT_START","AFTER_TAG_NAME","MIXIN_CALL_START","ATTRS_END","CODE_START","MULTI_LINE_ATTRS","AFTER_ATTRS","AFTER_TEXT_TAG_NAME","AFTER_KEYWORD","NO_MORE_SPACE","COND_START","INTERPOLATION_START","MIXIN_PARAMS_STARTED","HTML_COMMENT_STARTED","MIXIN_PARAMS_END","UNBUF_CODE_START","obj","reduce","keys","assign","ret","mergeWith","objValue","srcValue","object","source","type1","type2","concat","debug","matches1","matchAll","elems","textToPush","toParse","results","$664c792f0c15f37a$var$Parser","$664c792f0c15f37a$export$2e2bcd8739ae039"],"version":3,"file":"module.js.map","sourceRoot":"../../../"}