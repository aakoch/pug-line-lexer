
/* parser generated by jison 0.6.1-216 */

/*
 * Returns a Parser object of the following structure:
 *
 *  Parser: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a derivative/copy of this one,
 *               not a direct reference!
 *  }
 *
 *  Parser.prototype: {
 *    yy: {},
 *    EOF: 1,
 *    TERROR: 2,
 *
 *    trace: function(errorMessage, ...),
 *
 *    JisonParserError: function(msg, hash),
 *
 *    quoteName: function(name),
 *               Helper function which can be overridden by user code later on: put suitable
 *               quotes around literal IDs in a description string.
 *
 *    originalQuoteName: function(name),
 *               The basic quoteName handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `quoteName()` to reference this function
 *               at the end of the `parse()`.
 *
 *    describeSymbol: function(symbol),
 *               Return a more-or-less human-readable description of the given symbol, when
 *               available, or the symbol itself, serving as its own 'description' for lack
 *               of something better to serve up.
 *
 *               Return NULL when the symbol is unknown to the parser.
 *
 *    symbols_: {associative list: name ==> number},
 *    terminals_: {associative list: number ==> name},
 *    nonterminals: {associative list: rule-name ==> {associative list: number ==> rule-alt}},
 *    terminal_descriptions_: (if there are any) {associative list: number ==> description},
 *    productions_: [...],
 *
 *    performAction: function parser__performAction(yytext, yyleng, yylineno, yyloc, yystate, yysp, yyvstack, yylstack, yystack, yysstack),
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `yyval` internal object, which has members (`$` and `_$`)
 *                             to store/reference the rule value `$$` and location info `@$`.
 *
 *                 One important thing to note about `this` a.k.a. `yyval`: every *reduce* action gets
 *                 to see the same object via the `this` reference, i.e. if you wish to carry custom
 *                 data from one reduce action through to the next within a single parse run, then you
 *                 may get nasty and use `yyval` a.k.a. `this` for storing you own semi-permanent data.
 *
 *                 `this.yy` is a direct reference to the `yy` shared state object.
 *
 *                 `%parse-param`-specified additional `parse()` arguments have been added to this `yy`
 *                 object at `parse()` start and are therefore available to the action code via the
 *                 same named `yy.xxxx` attributes (where `xxxx` represents a identifier name from
 *                 the %parse-param` list.
 *
 *               - `yytext`  : reference to the lexer value which belongs to the last lexer token used
 *                             to match this rule. This is *not* the look-ahead token, but the last token
 *                             that's actually part of this rule.
 *
 *                 Formulated another way, `yytext` is the value of the token immediately preceeding
 *                 the current look-ahead token.
 *                 Caveats apply for rules which don't require look-ahead, such as epsilon rules.
 *
 *               - `yyleng`  : ditto as `yytext`, only now for the lexer.yyleng value.
 *
 *               - `yylineno`: ditto as `yytext`, only now for the lexer.yylineno value.
 *
 *               - `yyloc`   : ditto as `yytext`, only now for the lexer.yylloc lexer token location info.
 *
 *                               WARNING: since jison 0.4.18-186 this entry may be NULL/UNDEFINED instead
 *                               of an empty object when no suitable location info can be provided.
 *
 *               - `yystate` : the current parser state number, used internally for dispatching and
 *                               executing the action code chunk matching the rule currently being reduced.
 *
 *               - `yysp`    : the current state stack position (a.k.a. 'stack pointer')
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *                 Also note that you can access this and other stack index values using the new double-hash
 *                 syntax, i.e. `##$ === ##0 === yysp`, while `##1` is the stack index for all things
 *                 related to the first rule term, just like you have `$1`, `@1` and `#1`.
 *                 This is made available to write very advanced grammar action rules, e.g. when you want
 *                 to investigate the parse state stack in your action code, which would, for example,
 *                 be relevant when you wish to implement error diagnostics and reporting schemes similar
 *                 to the work described here:
 *
 *                 + Pottier, F., 2016. Reachability and error diagnosis in LR(1) automata.
 *                   In Journées Francophones des Languages Applicatifs.
 *
 *                 + Jeffery, C.L., 2003. Generating LR syntax error messages from examples.
 *                   ACM Transactions on Programming Languages and Systems (TOPLAS), 25(5), pp.631–640.
 *
 *               - `yyrulelength`: the current rule's term count, i.e. the number of entries occupied on the stack.
 *
 *                 This one comes in handy when you are going to do advanced things to the parser
 *                 stacks, all of which are accessible from your action code (see the next entries below).
 *
 *               - `yyvstack`: reference to the parser value stack. Also accessed via the `$1` etc.
 *                             constructs.
 *
 *               - `yylstack`: reference to the parser token location stack. Also accessed via
 *                             the `@1` etc. constructs.
 *
 *                             WARNING: since jison 0.4.18-186 this array MAY contain slots which are
 *                             UNDEFINED rather than an empty (location) object, when the lexer/parser
 *                             action code did not provide a suitable location info object when such a
 *                             slot was filled!
 *
 *               - `yystack` : reference to the parser token id stack. Also accessed via the
 *                             `#1` etc. constructs.
 *
 *                 Note: this is a bit of a **white lie** as we can statically decode any `#n` reference to
 *                 its numeric token id value, hence that code wouldn't need the `yystack` but *you* might
 *                 want access this array for your own purposes, such as error analysis as mentioned above!
 *
 *                 Note that this stack stores the current stack of *tokens*, that is the sequence of
 *                 already parsed=reduced *nonterminals* (tokens representing rules) and *terminals*
 *                 (lexer tokens *shifted* onto the stack until the rule they belong to is found and
 *                 *reduced*.
 *
 *               - `yysstack`: reference to the parser state stack. This one carries the internal parser
 *                             *states* such as the one in `yystate`, which are used to represent
 *                             the parser state machine in the *parse table*. *Very* *internal* stuff,
 *                             what can I say? If you access this one, you're clearly doing wicked things
 *
 *               - `...`     : the extra arguments you specified in the `%parse-param` statement in your
 *                             grammar definition file.
 *
 *    table: [...],
 *               State transition table
 *               ----------------------
 *
 *               index levels are:
 *               - `state`  --> hash table
 *               - `symbol` --> action (number or array)
 *
 *                 If the `action` is an array, these are the elements' meaning:
 *                 - index [0]: 1 = shift, 2 = reduce, 3 = accept
 *                 - index [1]: GOTO `state`
 *
 *                 If the `action` is a number, it is the GOTO `state`
 *
 *    defaultActions: {...},
 *
 *    parseError: function(str, hash, ExceptionClass),
 *    yyError: function(str, ...),
 *    yyRecovering: function(),
 *    yyErrOk: function(),
 *    yyClearIn: function(),
 *
 *    constructParseErrorInfo: function(error_message, exception_object, expected_token_set, is_recoverable),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this parser kernel in many places; example usage:
 *
 *                   var infoObj = parser.constructParseErrorInfo('fail!', null,
 *                                     parser.collect_expected_token_set(state), true);
 *                   var retVal = parser.parseError(infoObj.errStr, infoObj, parser.JisonParserError);
 *
 *    originalParseError: function(str, hash, ExceptionClass),
 *               The basic `parseError` handler provided by JISON.
 *               `cleanupAfterParse()` will clean up and reset `parseError()` to reference this function
 *               at the end of the `parse()`.
 *
 *    options: { ... parser %options ... },
 *
 *    parse: function(input[, args...]),
 *               Parse the given `input` and return the parsed value (or `true` when none was provided by
 *               the root action, in which case the parser is acting as a *matcher*).
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of this grammar:
 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
 *
 *               WARNING:
 *               Parser's additional `args...` parameters (via `%parse-param`) MAY conflict with
 *               any attributes already added to `yy` by the jison run-time;
 *               when such a collision is detected an exception is thrown to prevent the generated run-time
 *               from silently accepting this confusing and potentially hazardous situation!
 *
 *               The lexer MAY add its own set of additional parameters (via the `%parse-param` line in
 *               the lexer section of the grammar spec): these will be inserted in the `yy` shared state
 *               object and any collision with those will be reported by the lexer via a thrown exception.
 *
 *    cleanupAfterParse: function(resultValue, invoke_post_methods, do_not_nuke_errorinfos),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API is invoked at the end of the `parse()` call, unless an exception was thrown
 *               and `%options no-try-catch` has been defined for this grammar: in that case this helper MAY
 *               be invoked by calling user code to ensure the `post_parse` callbacks are invoked and
 *               the internal parser gets properly garbage collected under these particular circumstances.
 *
 *    yyMergeLocationInfo: function(first_index, last_index, first_yylloc, last_yylloc, dont_look_back),
 *               Helper function **which will be set up during the first invocation of the `parse()` method**.
 *               This helper API can be invoked to calculate a spanning `yylloc` location info object.
 *
 *               Note: %epsilon rules MAY specify no `first_index` and `first_yylloc`, in which case
 *               this function will attempt to obtain a suitable location marker by inspecting the location stack
 *               backwards.
 *
 *               For more info see the documentation comment further below, immediately above this function's
 *               implementation.
 *
 *    lexer: {
 *        yy: {...},           A reference to the so-called "shared state" `yy` once
 *                             received via a call to the `.setInput(input, yy)` lexer API.
 *        EOF: 1,
 *        ERROR: 2,
 *        JisonLexerError: function(msg, hash),
 *        parseError: function(str, hash, ExceptionClass),
 *        setInput: function(input, [yy]),
 *        input: function(),
 *        unput: function(str),
 *        more: function(),
 *        reject: function(),
 *        less: function(n),
 *        pastInput: function(n),
 *        upcomingInput: function(n),
 *        showPosition: function(),
 *        test_match: function(regex_match_array, rule_index, ...),
 *        next: function(...),
 *        lex: function(...),
 *        begin: function(condition),
 *        pushState: function(condition),
 *        popState: function(),
 *        topState: function(),
 *        _currentRules: function(),
 *        stateStackSize: function(),
 *        cleanupAfterLex: function()
 *
 *        options: { ... lexer %options ... },
 *
 *        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START, ...),
 *        rules: [...],
 *        conditions: {associative list: name ==> set},
 *    }
 *  }
 *
 *
 *  token location info (@$, _$, etc.): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer and
 * parser errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *  }
 *
 * parser (grammar) errors will also provide these additional members:
 *
 *  {
 *    expected:    (array describing the set of expected tokens;
 *                  may be UNDEFINED when we cannot easily produce such a set)
 *    state:       (integer (or array when the table includes grammar collisions);
 *                  represents the current internal state of the parser kernel.
 *                  can, for example, be used to pass to the `collect_expected_token_set()`
 *                  API to obtain the expected token set)
 *    action:      (integer; represents the current internal action which will be executed)
 *    new_state:   (integer; represents the next/planned internal state, once the current
 *                  action has executed)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    state_stack: (array: the current parser LALR/LR internal state stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    value_stack: (array: the current parser LALR/LR internal `$$` value stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    location_stack: (array: the current parser LALR/LR internal location stack; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *    parser:      (reference to the current parser instance)
 *  }
 *
 * while `this` will reference the current parser instance.
 *
 * When `parseError` is invoked by the lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    lexer:       (reference to the current lexer instance which reported the error)
 *  }
 *
 * When `parseError` is invoked by the parser due to a **JavaScript exception** being fired
 * from either the parser or lexer, `this` will still reference the related *parser*
 * instance, while these additional `hash` fields will also be provided:
 *
 *  {
 *    exception:   (reference to the exception thrown)
 *  }
 *
 * Please do note that in the latter situation, the `expected` field will be omitted as
 * this type of failure is assumed not to be due to *parse errors* but rather due to user
 * action code in either parser or lexer failing unexpectedly.
 *
 * ---
 *
 * You can specify parser options by setting / modifying the `.yy` object of your Parser instance.
 * These options are available:
 *
 * ### options which are global for all parser instances
 *
 *  Parser.pre_parse: function(yy)
 *                 optional: you can specify a pre_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`.
 *  Parser.post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: you can specify a post_parse() function in the chunk following
 *                 the grammar, i.e. after the last `%%`. When it does not return any value,
 *                 the parser will return the original `retval`.
 *
 * ### options which can be set up per parser instance
 *
 *  yy: {
 *      pre_parse:  function(yy)
 *                 optional: is invoked before the parse cycle starts (and before the first
 *                 invocation of `lex()`) but immediately after the invocation of
 *                 `parser.pre_parse()`).
 *      post_parse: function(yy, retval, parseInfo) { return retval; }
 *                 optional: is invoked when the parse terminates due to success ('accept')
 *                 or failure (even when exceptions are thrown).
 *                 `retval` contains the return value to be produced by `Parser.parse()`;
 *                 this function can override the return value by returning another.
 *                 When it does not return any value, the parser will return the original
 *                 `retval`.
 *                 This function is invoked immediately before `parser.post_parse()`.
 *
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *      quoteName: function(name),
 *                 optional: overrides the default `quoteName` function.
 *  }
 *
 *  parser.lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this `%option` has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */





// See also:
// http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
// but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
// with userland code which might access the derived class in a 'classic' way.
function JisonParserError(msg, hash) {
    Object.defineProperty(this, 'name', {
        enumerable: false,
        writable: false,
        value: 'JisonParserError'
    });

    if (msg == null) msg = '???';

    Object.defineProperty(this, 'message', {
        enumerable: false,
        writable: true,
        value: msg
    });

    this.hash = hash;

    var stacktrace;
    if (hash && hash.exception instanceof Error) {
        var ex2 = hash.exception;
        this.message = ex2.message || msg;
        stacktrace = ex2.stack;
    }
    if (!stacktrace) {
        if (Error.hasOwnProperty('captureStackTrace')) {        // V8/Chrome engine
            Error.captureStackTrace(this, this.constructor);
        } else {
            stacktrace = (new Error(msg)).stack;
        }
    }
    if (stacktrace) {
        Object.defineProperty(this, 'stack', {
            enumerable: false,
            writable: false,
            value: stacktrace
        });
    }
}

if (typeof Object.setPrototypeOf === 'function') {
    Object.setPrototypeOf(JisonParserError.prototype, Error.prototype);
} else {
    JisonParserError.prototype = Object.create(Error.prototype);
}
JisonParserError.prototype.constructor = JisonParserError;
JisonParserError.prototype.name = 'JisonParserError';




        // helper: reconstruct the productions[] table
        function bp(s) {
            var rv = [];
            var p = s.pop;
            var r = s.rule;
            for (var i = 0, l = p.length; i < l; i++) {
                rv.push([
                    p[i],
                    r[i]
                ]);
            }
            return rv;
        }
    


        // helper: reconstruct the defaultActions[] table
        function bda(s) {
            var rv = {};
            var d = s.idx;
            var g = s.goto;
            for (var i = 0, l = d.length; i < l; i++) {
                var j = d[i];
                rv[j] = g[i];
            }
            return rv;
        }
    


        // helper: reconstruct the 'goto' table
        function bt(s) {
            var rv = [];
            var d = s.len;
            var y = s.symbol;
            var t = s.type;
            var a = s.state;
            var m = s.mode;
            var g = s.goto;
            for (var i = 0, l = d.length; i < l; i++) {
                var n = d[i];
                var q = {};
                for (var j = 0; j < n; j++) {
                    var z = y.shift();
                    switch (t.shift()) {
                    case 2:
                        q[z] = [
                            m.shift(),
                            g.shift()
                        ];
                        break;

                    case 0:
                        q[z] = a.shift();
                        break;

                    default:
                        // type === 1: accept
                        q[z] = [
                            3
                        ];
                    }
                }
                rv.push(q);
            }
            return rv;
        }
    


        // helper: runlength encoding with increment step: code, length: step (default step = 0)
        // `this` references an array
        function s(c, l, a) {
            a = a || 0;
            for (var i = 0; i < l; i++) {
                this.push(c);
                c += a;
            }
        }

        // helper: duplicate sequence from *relative* offset and length.
        // `this` references an array
        function c(i, l) {
            i = this.length - i;
            for (l += i; i < l; i++) {
                this.push(this[i]);
            }
        }

        // helper: unpack an array using helpers and data, all passed in an array argument 'a'.
        function u(a) {
            var rv = [];
            for (var i = 0, l = a.length; i < l; i++) {
                var e = a[i];
                // Is this entry a helper function?
                if (typeof e === 'function') {
                    i++;
                    e.apply(rv, a[i]);
                } else {
                    rv.push(e);
                }
            }
            return rv;
        }
    

var parser = {
    // Code Generator Information Report
    // ---------------------------------
    //
    // Options:
    //
    //   default action mode: ............. ["classic","merge"]
    //   test-compile action mode: ........ "parser:*,lexer:*"
    //   try..catch: ...................... true
    //   default resolve on conflict: ..... true
    //   on-demand look-ahead: ............ false
    //   error recovery token skip maximum: 3
    //   yyerror in parse actions is: ..... NOT recoverable,
    //   yyerror in lexer actions and other non-fatal lexer are:
    //   .................................. NOT recoverable,
    //   debug grammar/output: ............ false
    //   has partial LR conflict upgrade:   true
    //   rudimentary token-stack support:   true
    //   parser table compression mode: ... 2
    //   export debug tables: ............. false
    //   export *all* tables: ............. false
    //   module type: ..................... es
    //   parser engine type: .............. lalr
    //   output main() in the module: ..... false
    //   has user-specified main(): ....... false
    //   has user-specified require()/import modules for main():
    //   .................................. false
    //   number of expected conflicts: .... 0
    //
    //
    // Parser Analysis flags:
    //
    //   no significant actions (parser is a language matcher only):
    //   .................................. false
    //   uses yyleng: ..................... false
    //   uses yylineno: ................... false
    //   uses yytext: ..................... false
    //   uses yylloc: ..................... false
    //   uses ParseError API: ............. false
    //   uses YYERROR: .................... false
    //   uses YYRECOVERING: ............... false
    //   uses YYERROK: .................... false
    //   uses YYCLEARIN: .................. false
    //   tracks rule values: .............. true
    //   assigns rule values: ............. true
    //   uses location tracking: .......... false
    //   assigns location: ................ false
    //   uses yystack: .................... false
    //   uses yysstack: ................... false
    //   uses yysp: ....................... true
    //   uses yyrulelength: ............... false
    //   uses yyMergeLocationInfo API: .... false
    //   has error recovery: .............. false
    //   has error reporting: ............. false
    //
    // --------- END OF REPORT -----------

trace: function no_op_trace() { },
JisonParserError: JisonParserError,
yy: {},
options: {
  type: "lalr",
  hasPartialLrUpgradeOnConflict: true,
  errorRecoveryTokenDiscardCount: 3,
  tokenStack: true,
  ebnf: true
},
symbols_: {
  "$accept": 0,
  "$end": 1,
  "ASSIGNMENT": 32,
  "ASSIGNMENT_VALUE": 31,
  "ATTR_TEXT": 12,
  "ATTR_TEXT_CONT": 10,
  "ATTR_TEXT_END": 7,
  "AT_ATTRS": 8,
  "CLASSNAME": 11,
  "CODE": 5,
  "CODE_START": 19,
  "COMMENT": 18,
  "CONDITION": 30,
  "CONDITIONAL": 26,
  "DOT_END": 24,
  "EOF": 1,
  "FILTER": 29,
  "INTERPOLATION": 27,
  "INTERPOLATION_START": 28,
  "KEYWORD": 21,
  "LPAREN": 9,
  "MIXIN_CALL": 20,
  "MIXIN_PARAMS": 13,
  "MULTI_LINE_ATTRS_END": 3,
  "NESTED_TAG_START": 6,
  "PIPE": 22,
  "RCURLY": 23,
  "RPAREN": 14,
  "SPACE": 25,
  "TAG": 15,
  "TAG_ID": 17,
  "TEXT": 4,
  "TEXT_TAG": 16,
  "attrs": 38,
  "classnames": 39,
  "classnames_repetition_plus": 43,
  "error": 2,
  "first_token": 36,
  "line": 34,
  "line_end": 40,
  "line_splitter": 41,
  "line_start": 35,
  "line_start_option": 42,
  "start": 33,
  "tag_part": 37
},
terminals_: {
  1: "EOF",
  2: "error",
  3: "MULTI_LINE_ATTRS_END",
  4: "TEXT",
  5: "CODE",
  6: "NESTED_TAG_START",
  7: "ATTR_TEXT_END",
  8: "AT_ATTRS",
  9: "LPAREN",
  10: "ATTR_TEXT_CONT",
  11: "CLASSNAME",
  12: "ATTR_TEXT",
  13: "MIXIN_PARAMS",
  14: "RPAREN",
  15: "TAG",
  16: "TEXT_TAG",
  17: "TAG_ID",
  18: "COMMENT",
  19: "CODE_START",
  20: "MIXIN_CALL",
  21: "KEYWORD",
  22: "PIPE",
  23: "RCURLY",
  24: "DOT_END",
  25: "SPACE",
  26: "CONDITIONAL",
  27: "INTERPOLATION",
  28: "INTERPOLATION_START",
  29: "FILTER",
  30: "CONDITION",
  31: "ASSIGNMENT_VALUE",
  32: "ASSIGNMENT"
},
TERROR: 2,
    EOF: 1,

    // internals: defined here so the object *structure* doesn't get modified by parse() et al,
    // thus helping JIT compilers like Chrome V8.
    originalQuoteName: null,
    originalParseError: null,
    cleanupAfterParse: null,
    constructParseErrorInfo: null,
    yyMergeLocationInfo: null,

    __reentrant_call_depth: 0,      // INTERNAL USE ONLY
    __error_infos: [],              // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup
    __error_recovery_infos: [],     // INTERNAL USE ONLY: the set of parseErrorInfo objects created since the last cleanup

    // APIs which will be set up depending on user action code analysis:
    //yyRecovering: 0,
    //yyErrOk: 0,
    //yyClearIn: 0,

    // Helper APIs
    // -----------

    // Helper function which can be overridden by user code later on: put suitable quotes around
    // literal IDs in a description string.
    quoteName: function parser_quoteName(id_str) {
        return '"' + id_str + '"';
    },

    // Return the name of the given symbol (terminal or non-terminal) as a string, when available.
    //
    // Return NULL when the symbol is unknown to the parser.
    getSymbolName: function parser_getSymbolName(symbol) {
        if (this.terminals_[symbol]) {
            return this.terminals_[symbol];
        }

        // Otherwise... this might refer to a RULE token i.e. a non-terminal: see if we can dig that one up.
        //
        // An example of this may be where a rule's action code contains a call like this:
        //
        //      parser.getSymbolName(#$)
        //
        // to obtain a human-readable name of the current grammar rule.
        var s = this.symbols_;
        for (var key in s) {
            if (s[key] === symbol) {
                return key;
            }
        }
        return null;
    },

    // Return a more-or-less human-readable description of the given symbol, when available,
    // or the symbol itself, serving as its own 'description' for lack of something better to serve up.
    //
    // Return NULL when the symbol is unknown to the parser.
    describeSymbol: function parser_describeSymbol(symbol) {
        if (symbol !== this.EOF && this.terminal_descriptions_ && this.terminal_descriptions_[symbol]) {
            return this.terminal_descriptions_[symbol];
        }
        else if (symbol === this.EOF) {
            return 'end of input';
        }
        var id = this.getSymbolName(symbol);
        if (id) {
            return this.quoteName(id);
        }
        return null;
    },

    // Produce a (more or less) human-readable list of expected tokens at the point of failure.
    //
    // The produced list may contain token or token set descriptions instead of the tokens
    // themselves to help turning this output into something that easier to read by humans
    // unless `do_not_describe` parameter is set, in which case a list of the raw, *numeric*,
    // expected terminals and nonterminals is produced.
    //
    // The returned list (array) will not contain any duplicate entries.
    collect_expected_token_set: function parser_collect_expected_token_set(state, do_not_describe) {
        var TERROR = this.TERROR;
        var tokenset = [];
        var check = {};
        // Has this (error?) state been outfitted with a custom expectations description text for human consumption?
        // If so, use that one instead of the less palatable token set.
        if (!do_not_describe && this.state_descriptions_ && this.state_descriptions_[state]) {
            return [
                this.state_descriptions_[state]
            ];
        }
        for (var p in this.table[state]) {
            p = +p;
            if (p !== TERROR) {
                var d = do_not_describe ? p : this.describeSymbol(p);
                if (d && !check[d]) {
                    tokenset.push(d);
                    check[d] = true;        // Mark this token description as already mentioned to prevent outputting duplicate entries.
                }
            }
        }
        return tokenset;
    },
productions_: bp({
  pop: u([
  s,
  [33, 3],
  s,
  [34, 7],
  s,
  [35, 10],
  s,
  [36, 17],
  s,
  [37, 5],
  38,
  38,
  39,
  s,
  [40, 7],
  s,
  [41, 3],
  42,
  42,
  43,
  43
]),
  rule: u([
  1,
  2,
  2,
  c,
  [3, 3],
  3,
  3,
  1,
  c,
  [7, 5],
  4,
  3,
  3,
  4,
  1,
  4,
  s,
  [1, 18],
  c,
  [29, 3],
  1,
  c,
  [36, 3],
  0,
  s,
  [1, 9],
  c,
  [10, 3],
  2
])
}),
performAction: function parser__PerformAction(yystate /* action[1] */, yysp, yyvstack) {

          /* this == yyval */

          // the JS engine itself can go and remove these statements when `yy` turns out to be unused in any action code!
          var yy = this.yy;
          var yyparser = yy.parser;
          var yylexer = yy.lexer;

          

          switch (yystate) {
case 0:
    /*! Production::    $accept : start $end */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp - 1];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-)
    break;

case 1:
    /*! Production::    start : EOF */
case 4:
    /*! Production::    line : line_start */
case 11:
    /*! Production::    line_start : first_token */
case 40:
    /*! Production::    tag_part : classnames */

    // default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp];
    // END of default action (generated by JISON mode classic/merge :: 1,VT,VA,-,-,-,-,-,-)
    break;

case 2:
    /*! Production::    start : line EOF */

    // default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-):
    this.$ = yyvstack[yysp - 1];
    // END of default action (generated by JISON mode classic/merge :: 2,VT,VA,-,-,-,-,-,-)
    break;

case 3:
    /*! Production::    start : MULTI_LINE_ATTRS_END EOF */

    this.$ = { state: 'MULTI_LINE_ATTRS_END' }
    break;

case 5:
    /*! Production::    line : line_start TEXT */

    debug('line: line_start TEXT: $line_start=', yyvstack[yysp - 1], ', $TEXT=', yyvstack[yysp])
    
    if (yyvstack[yysp].includes('#[')) {
      debug('Calling parseInline with ', yyvstack[yysp])
      const possibleTags2 = parseInline.parse(yyvstack[yysp])
      debug('possibleTags2=', possibleTags2)
    }
    // $$ = { type: 'text', val: $TEXT }
    
    this.$ = merge(yyvstack[yysp - 1], { type: 'text', val: yyvstack[yysp] })
    break;

case 6:
    /*! Production::    line : line_start CODE */

    this.$ = merge(yyvstack[yysp - 1], { type: 'code', val: yyvstack[yysp] })
    break;

case 7:
    /*! Production::    line : line_start line_splitter line_end */

    debug('line: line_start line_splitter line_end: $line_start=', yyvstack[yysp - 2], ', $line_end=', yyvstack[yysp])
    if (yyvstack[yysp] == undefined) {
      this.$ = merge(yyvstack[yysp - 2], yyvstack[yysp - 1])
    }
    else if (yyvstack[yysp].hasOwnProperty('type') && yyvstack[yysp].type == 'array') {
      this.$ = merge(yyvstack[yysp - 2], [yyvstack[yysp - 1], { children: yyvstack[yysp].val }])
    }
    else {
      this.$ = merge(yyvstack[yysp - 2], [yyvstack[yysp - 1], yyvstack[yysp]])
    }
    break;

case 8:
    /*! Production::    line : line_start NESTED_TAG_START line */

    this.$ = merge(yyvstack[yysp - 2], { state: 'NESTED', children: [yyvstack[yysp]] })
    break;

case 9:
    /*! Production::    line : ATTR_TEXT_END */

    this.$ = { type: 'multiline_attrs_end' }
    break;

case 10:
    /*! Production::    line : line_start AT_ATTRS */

    debug('line: line_start AT_ATTRS: $AT_ATTRS=', yyvstack[yysp])
    if (yyvstack[yysp].includes('{') && yyvstack[yysp].includes('}')) {
      let func = Function('return (' + yyvstack[yysp].substring(12, yyvstack[yysp].length - 1) + ')')
      let entries2 = Object.entries(func())
      debug('entries2=', entries2)
      let attrs2 = Object.entries(entries2).map(([index, [key, value]]) => {
        debug('key=', key, 'value=', value)
        return { name: key, val: value }
      })
      this.$ = merge(yyvstack[yysp - 1], { type: 'tag', attrs: attrs2 })
    }
    else {
      this.$ = merge(yyvstack[yysp - 1], 
        { type: 'tag', attrs: [{ val: yyvstack[yysp].substring(12, yyvstack[yysp].length - 1) }]}
      )
    }
    break;

case 12:
    /*! Production::    line_start : first_token tag_part */

    debug('line_start: first_token tag_part')
    this.$ = merge(yyvstack[yysp - 1], yyvstack[yysp])
    break;

case 13:
    /*! Production::    line_start : first_token attrs */

    debug('line_start: first_token attrs')
    this.$ = merge(yyvstack[yysp - 1], yyvstack[yysp])
    break;

case 14:
    /*! Production::    line_start : first_token LPAREN line_start_option */

    debug('line_start: first_token LPAREN ATTR_TEXT_CONT?')
    this.$ = merge(yyvstack[yysp - 2], { type: 'tag_with_multiline_attrs', state: 'MULTI_LINE_ATTRS' })
    if (yyvstack[yysp]) {
      this.$ = merge(yyvstack[yysp - 2], { type: 'tag_with_multiline_attrs', attrs: [yyvstack[yysp]] })
    }
    break;

case 15:
    /*! Production::    line_start : first_token tag_part LPAREN ATTR_TEXT_CONT */

    debug('line_start: first_token tag_part LPAREN ATTR_TEXT_CONT')
    this.$ = merge(yyvstack[yysp - 3], [yyvstack[yysp - 2], yyvstack[yysp]])
    break;

case 16:
    /*! Production::    line_start : first_token tag_part attrs */

    debug('line_start: first_token tag_part attrs')
    this.$ = merge(yyvstack[yysp - 2], [yyvstack[yysp - 1], yyvstack[yysp]])
    break;

case 17:
    /*! Production::    line_start : first_token attrs CLASSNAME */

    this.$ = merge(yyvstack[yysp - 2], [yyvstack[yysp - 1], { classes: yyvstack[yysp] }])
    break;

case 18:
    /*! Production::    line_start : first_token tag_part attrs CLASSNAME */

    this.$ = merge(yyvstack[yysp - 3], [yyvstack[yysp - 2], yyvstack[yysp - 1], { classes: yyvstack[yysp] }])
    break;

case 19:
    /*! Production::    line_start : ATTR_TEXT */

    debug('line_start: ATTR_TEXT')
    this.$ = { type: 'attrs_cont', attrs: [yyvstack[yysp]] }
    break;

case 20:
    /*! Production::    line_start : first_token LPAREN MIXIN_PARAMS RPAREN */

    this.$ = merge(yyvstack[yysp - 3], { params: yyvstack[yysp - 1] })
    break;

case 21:
    /*! Production::    first_token : TAG */

    this.$ = { name: yyvstack[yysp], type: 'tag' }
    break;

case 22:
    /*! Production::    first_token : TEXT_TAG */

    this.$ = { name: yyvstack[yysp], type: 'tag', state: 'TEXT_START' }
    break;

case 23:
    /*! Production::    first_token : CLASSNAME */

    this.$ = { type: 'tag', classes: [yyvstack[yysp]] }
    break;

case 24:
    /*! Production::    first_token : TAG_ID */

    this.$ = { type: 'tag', id: yyvstack[yysp] }
    break;

case 25:
    /*! Production::    first_token : TEXT */

    if (yyvstack[yysp].includes('#[')) {
      debug('Calling parseInline with ', yyvstack[yysp])
      const possibleTags = parseInline.parse(yyvstack[yysp])
      debug('possibleTags=', possibleTags)
    }
    this.$ = { type: 'text', val: yyvstack[yysp] }
    break;

case 26:
    /*! Production::    first_token : COMMENT */

    this.$ = { type: 'comment', state: 'TEXT_START' }
    break;

case 27:
    /*! Production::    first_token : CODE_START */

    debug('CODE_START')
    this.$ = { type: 'code', state: 'CODE_START' }
    break;

case 28:
    /*! Production::    first_token : CODE */
case 51:
    /*! Production::    line_end : CODE */

    this.$ = { type: 'code', val: yyvstack[yysp] }
    break;

case 29:
    /*! Production::    first_token : MIXIN_CALL */

    debug('MIXIN_CALL=', yyvstack[yysp])
    this.$ = { type: 'mixin_call', name: yyvstack[yysp] }
    break;

case 30:
    /*! Production::    first_token : KEYWORD */

    this.$ = { type: yyvstack[yysp] }
    break;

case 31:
    /*! Production::    first_token : PIPE */

    this.$ = { type: 'text' }
    break;

case 32:
    /*! Production::    first_token : RCURLY */

    this.$ = { type: 'block_end' }
    break;

case 33:
    /*! Production::    first_token : DOT_END */

    debug('line: DOT_END')
    this.$ = { state: 'TEXT_START' }
    break;

case 34:
    /*! Production::    first_token : SPACE */

    this.$ = { type: 'empty' }
    break;

case 35:
    /*! Production::    first_token : CONDITIONAL */

    this.$ = { type: 'conditional', name: yyvstack[yysp] }
    break;

case 36:
    /*! Production::    first_token : INTERPOLATION */

    this.$ = { type: 'interpolation', name: yyvstack[yysp] }
    break;

case 37:
    /*! Production::    first_token : INTERPOLATION_START */

    this.$ = { type: 'interpolation_start', state: 'INTERPOLATION_START' }
    break;

case 38:
    /*! Production::    tag_part : TAG_ID */

    this.$ = { id: yyvstack[yysp] }
    break;

case 39:
    /*! Production::    tag_part : TAG_ID classnames */

    this.$ = merge({ id: yyvstack[yysp - 1] }, yyvstack[yysp])
    break;

case 41:
    /*! Production::    tag_part : classnames TAG_ID */

    this.$ = merge({ id: yyvstack[yysp] }, yyvstack[yysp - 1])
    break;

case 42:
    /*! Production::    tag_part : FILTER */

    this.$ = { filter: yyvstack[yysp] }
    break;

case 43:
    /*! Production::    attrs : LPAREN ATTR_TEXT RPAREN */

    debug('1 Calling parseAttrs with ', yyvstack[yysp - 1])
    this.$ = {}
    try {
      const attrs = parseAttrs.parse(yyvstack[yysp - 1].trim())
      debug('attrs=', attrs)
      attrs.forEach(attr => {
        // if (attr.hasOwnProperty('key') && attr.key == 'class' && !attr.assignment) {
        //   $$ = merge($$, { classes: attr.val.split(' ') } )
        //   delete attr.class
        // }
        // else if (attr.hasOwnProperty('id')) {
        //   $$ = merge($$, { id: attr.id } )
        //   delete attr.id
        // }
        // else 
        if (!_.isEmpty(attr)) {
          this.$ = merge(this.$, { attrs: [attr] })
        }
      })
    } catch (e) {
      console.error('Error parsing ' + yyvstack[yysp - 1], e)
    }
    break;

case 44:
    /*! Production::    attrs : LPAREN CONDITION RPAREN */

    debug('attrs: LPAREN CONDITION RPAREN')
    this.$ = { condition: yyvstack[yysp - 1] }
    break;

case 45:
    /*! Production::    classnames : classnames_repetition_plus */

    this.$ = { type: 'tag', classes: yyvstack[yysp] }
    break;

case 46:
    /*! Production::    line_end : %epsilon */

    // default action (generated by JISON mode classic/merge :: 0,VT,VA,-,-,-,-,-,-):
    this.$ = undefined;
    // END of default action (generated by JISON mode classic/merge :: 0,VT,VA,-,-,-,-,-,-)
    
    
    debug('line_end: <blank>')
    break;

case 47:
    /*! Production::    line_end : DOT_END */

    debug('line_end: DOT_END')
    this.$ = { state: 'TEXT_START' }
    break;

case 48:
    /*! Production::    line_end : ASSIGNMENT_VALUE */

    this.$ = { assignment_val: yyvstack[yysp] }
    break;

case 49:
    /*! Production::    line_end : ATTR_TEXT_CONT */

    debug('line_end: ATTR_TEXT_CONT')
    this.$ = { attrscont: [yyvstack[yysp]] }
    break;

case 50:
    /*! Production::    line_end : TEXT */

    debug('line_end: TEXT: $TEXT=', yyvstack[yysp])
    if (yyvstack[yysp].includes('#[')) {
      debug('Calling parseInline with ', yyvstack[yysp])
      const possibleTags3 = parseInline.parse(yyvstack[yysp])
      debug('possibleTags3=', possibleTags3)
      this.$ = { type: 'array', val: possibleTags3 }
    }
    else {
      this.$ = { type: 'text', val: yyvstack[yysp] }
    }
    break;

case 52:
    /*! Production::    line_end : RPAREN */

    this.$ = { type: 'text', val: yyvstack[yysp] }
    break;

case 53:
    /*! Production::    line_splitter : SPACE */

    debug('line_splitter: SPACE')
    this.$ = {}
    break;

case 54:
    /*! Production::    line_splitter : ASSIGNMENT */

    this.$ = { assignment: true }
    break;

case 55:
    /*! Production::    line_splitter : DOT_END */

    debug('line_splitter: DOT_END')
    this.$ = { state: 'TEXT_START' }
    break;

case 56:
    /*! Production::    line_start_option : %epsilon */

    this.$ = undefined;
    break;

case 57:
    /*! Production::    line_start_option : ATTR_TEXT_CONT */

    this.$ = yyvstack[yysp];
    break;

case 58:
    /*! Production::    classnames_repetition_plus : CLASSNAME */

    this.$ = [yyvstack[yysp]];
    break;

case 59:
    /*! Production::    classnames_repetition_plus : classnames_repetition_plus CLASSNAME */

    yyvstack[yysp - 1].push(yyvstack[yysp]);
    this.$ = yyvstack[yysp - 1];
    break;

}
},
table: bt({
  len: u([
  25,
  1,
  0,
  1,
  1,
  9,
  0,
  16,
  s,
  [0, 22],
  8,
  22,
  s,
  [0, 4],
  10,
  9,
  13,
  12,
  10,
  0,
  11,
  s,
  [0, 9],
  3,
  9,
  0,
  c,
  [53, 3],
  1,
  s,
  [0, 9]
]),
  symbol: u([
  1,
  3,
  4,
  5,
  7,
  11,
  12,
  s,
  [15, 14, 1],
  s,
  [33, 4, 1],
  s,
  [1, 4],
  4,
  5,
  6,
  8,
  24,
  25,
  32,
  41,
  c,
  [9, 5],
  9,
  11,
  17,
  24,
  25,
  29,
  32,
  37,
  38,
  39,
  43,
  c,
  [16, 3],
  10,
  14,
  24,
  31,
  40,
  c,
  [59, 19],
  c,
  [58, 4],
  c,
  [46, 5],
  c,
  [56, 3],
  38,
  c,
  [10, 5],
  11,
  c,
  [10, 3],
  c,
  [9, 5],
  10,
  12,
  13,
  24,
  25,
  30,
  32,
  42,
  c,
  [78, 7],
  c,
  [23, 3],
  c,
  [74, 5],
  c,
  [12, 3],
  c,
  [89, 3],
  c,
  [35, 6],
  c,
  [100, 5],
  32,
  10,
  12,
  30,
  c,
  [58, 9],
  s,
  [14, 3]
]),
  type: u([
  s,
  [2, 21],
  s,
  [0, 4],
  1,
  c,
  [15, 11],
  c,
  [28, 16],
  c,
  [24, 20],
  c,
  [31, 10],
  c,
  [56, 22],
  c,
  [22, 20],
  c,
  [44, 11],
  s,
  [2, 27]
]),
  state: u([
  s,
  [1, 4, 2],
  30,
  36,
  37,
  40,
  42,
  44,
  51,
  5,
  7,
  53,
  55,
  60,
  42
]),
  mode: u([
  s,
  [1, 23],
  2,
  c,
  [8, 8],
  s,
  [2, 4],
  c,
  [8, 5],
  c,
  [3, 4],
  s,
  [1, 24],
  c,
  [38, 6],
  s,
  [2, 8],
  c,
  [9, 10],
  c,
  [56, 7],
  c,
  [22, 14],
  c,
  [10, 16],
  c,
  [64, 12],
  s,
  [1, 3]
]),
  goto: u([
  2,
  4,
  13,
  16,
  6,
  11,
  8,
  9,
  10,
  12,
  14,
  15,
  s,
  [17, 11, 1],
  4,
  28,
  29,
  31,
  32,
  35,
  33,
  34,
  s,
  [11, 5],
  38,
  43,
  39,
  11,
  11,
  41,
  11,
  46,
  48,
  49,
  47,
  50,
  45,
  46,
  c,
  [48, 19],
  s,
  [12, 5],
  52,
  s,
  [12, 3],
  s,
  [13, 5],
  54,
  s,
  [13, 3],
  s,
  [56, 5],
  59,
  57,
  s,
  [56, 3],
  58,
  56,
  s,
  [38, 6],
  43,
  s,
  [38, 3],
  s,
  [40, 6],
  61,
  s,
  [40, 3],
  s,
  [45, 6],
  62,
  s,
  [45, 4],
  63,
  57,
  58,
  s,
  [16, 5],
  64,
  s,
  [16, 3],
  65,
  66,
  67
])
}),
defaultActions: bda({
  idx: u([
  2,
  6,
  s,
  [8, 22, 1],
  s,
  [32, 4, 1],
  41,
  s,
  [43, 9, 1],
  54,
  55,
  s,
  [59, 9, 1]
]),
  goto: u([
  1,
  9,
  19,
  s,
  [21, 17, 1],
  2,
  3,
  5,
  6,
  10,
  53,
  54,
  55,
  42,
  58,
  7,
  s,
  [47, 6, 1],
  8,
  17,
  14,
  57,
  39,
  41,
  59,
  15,
  18,
  20,
  43,
  44
])
}),
parseError: function parseError(str, hash, ExceptionClass) {
    if (hash.recoverable) {
        if (typeof this.trace === 'function') {
            this.trace(str);
        }
        hash.destroy();             // destroy... well, *almost*!
    } else {
        if (typeof this.trace === 'function') {
            this.trace(str);
        }
        if (!ExceptionClass) {
            ExceptionClass = this.JisonParserError;
        }
        throw new ExceptionClass(str, hash);
    }
},
parse: function parse(input) {
    var self = this;
    var stack = new Array(128);         // token stack: stores token which leads to state at the same index (column storage)
    var sstack = new Array(128);        // state stack: stores states (column storage)
    var tstack = [];                    // token stack (only used when `%options token_stack` support has been enabled)
    var vstack = new Array(128);        // semantic value stack

    var table = this.table;
    var sp = 0;                         // 'stack pointer': index into the stacks


    


    var symbol = 0;



    var TERROR = this.TERROR;
    var EOF = this.EOF;
    var ERROR_RECOVERY_TOKEN_DISCARD_COUNT = (this.options.errorRecoveryTokenDiscardCount | 0) || 3;
    var NO_ACTION = [0, 68 /* === table.length :: ensures that anyone using this new state will fail dramatically! */];

    var lexer;
    if (this.__lexer__) {
        lexer = this.__lexer__;
    } else {
        lexer = this.__lexer__ = Object.create(this.lexer);
    }

    var sharedState_yy = {
        parseError: undefined,
        quoteName: undefined,
        lexer: undefined,
        parser: undefined,
        pre_parse: undefined,
        post_parse: undefined,
        pre_lex: undefined,
        post_lex: undefined      // WARNING: must be written this way for the code expanders to work correctly in both ES5 and ES6 modes!
    };

    var ASSERT;
    if (typeof assert !== 'function') {
        ASSERT = function JisonAssert(cond, msg) {
            if (!cond) {
                throw new Error('assertion failed: ' + (msg || '***'));
            }
        };
    } else {
        ASSERT = assert;
    }

    this.yyGetSharedState = function yyGetSharedState() {
        return sharedState_yy;
    };








    function shallow_copy_noclobber(dst, src) {
        for (var k in src) {
            if (typeof dst[k] === 'undefined' && Object.prototype.hasOwnProperty.call(src, k)) {
                dst[k] = src[k];
            }
        }
    }

    // copy state
    shallow_copy_noclobber(sharedState_yy, this.yy);

    sharedState_yy.lexer = lexer;
    sharedState_yy.parser = this;






    // Does the shared state override the default `parseError` that already comes with this instance?
    if (typeof sharedState_yy.parseError === 'function') {
        this.parseError = function parseErrorAlt(str, hash, ExceptionClass) {
            if (!ExceptionClass) {
                ExceptionClass = this.JisonParserError;
            }
            return sharedState_yy.parseError.call(this, str, hash, ExceptionClass);
        };
    } else {
        this.parseError = this.originalParseError;
    }

    // Does the shared state override the default `quoteName` that already comes with this instance?
    if (typeof sharedState_yy.quoteName === 'function') {
        this.quoteName = function quoteNameAlt(id_str) {
            return sharedState_yy.quoteName.call(this, id_str);
        };
    } else {
        this.quoteName = this.originalQuoteName;
    }

    // set up the cleanup function; make it an API so that external code can re-use this one in case of
    // calamities or when the `%options no-try-catch` option has been specified for the grammar, in which
    // case this parse() API method doesn't come with a `finally { ... }` block any more!
    //
    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
    //       or else your `sharedState`, etc. references will be *wrong*!
    this.cleanupAfterParse = function parser_cleanupAfterParse(resultValue, invoke_post_methods, do_not_nuke_errorinfos) {
        var rv;

        if (invoke_post_methods) {
            var hash;

            if (sharedState_yy.post_parse || this.post_parse) {
                // create an error hash info instance: we re-use this API in a **non-error situation**
                // as this one delivers all parser internals ready for access by userland code.
                hash = this.constructParseErrorInfo(null /* no error! */, null /* no exception! */, null, false);
            }

            if (sharedState_yy.post_parse) {
                rv = sharedState_yy.post_parse.call(this, sharedState_yy, resultValue, hash);
                if (typeof rv !== 'undefined') resultValue = rv;
            }
            if (this.post_parse) {
                rv = this.post_parse.call(this, sharedState_yy, resultValue, hash);
                if (typeof rv !== 'undefined') resultValue = rv;
            }

            // cleanup:
            if (hash && hash.destroy) {
                hash.destroy();
            }
        }

        if (this.__reentrant_call_depth > 1) return resultValue;        // do not (yet) kill the sharedState when this is a reentrant run.

        // clean up the lingering lexer structures as well:
        if (lexer.cleanupAfterLex) {
            lexer.cleanupAfterLex(do_not_nuke_errorinfos);
        }

        // prevent lingering circular references from causing memory leaks:
        if (sharedState_yy) {
            sharedState_yy.lexer = undefined;
            sharedState_yy.parser = undefined;
            if (lexer.yy === sharedState_yy) {
                lexer.yy = undefined;
            }
        }
        sharedState_yy = undefined;
        this.parseError = this.originalParseError;
        this.quoteName = this.originalQuoteName;

        // nuke the vstack[] array at least as that one will still reference obsoleted user values.
        // To be safe, we nuke the other internal stack columns as well...
        stack.length = 0;               // fastest way to nuke an array without overly bothering the GC
        sstack.length = 0;

        vstack.length = 0;
        sp = 0;

        // nuke the error hash info instances created during this run.
        // Userland code must COPY any data/references
        // in the error hash instance(s) it is more permanently interested in.
        if (!do_not_nuke_errorinfos) {
            for (var i = this.__error_infos.length - 1; i >= 0; i--) {
                var el = this.__error_infos[i];
                if (el && typeof el.destroy === 'function') {
                    el.destroy();
                }
            }
            this.__error_infos.length = 0;


        }

        return resultValue;
    };






































































































































    // NOTE: as this API uses parse() as a closure, it MUST be set again on every parse() invocation,
    //       or else your `lexer`, `sharedState`, etc. references will be *wrong*!
    this.constructParseErrorInfo = function parser_constructParseErrorInfo(msg, ex, expected, recoverable) {
        var pei = {
            errStr: msg,
            exception: ex,
            text: lexer.match,
            value: lexer.yytext,
            token: this.describeSymbol(symbol) || symbol,
            token_id: symbol,
            line: lexer.yylineno,

            expected: expected,
            recoverable: recoverable,
            state: state,
            action: action,
            new_state: newState,
            symbol_stack: stack,
            state_stack: sstack,
            value_stack: vstack,

            stack_pointer: sp,
            yy: sharedState_yy,
            lexer: lexer,
            parser: this,

            // and make sure the error info doesn't stay due to potential
            // ref cycle via userland code manipulations.
            // These would otherwise all be memory leak opportunities!
            //
            // Note that only array and object references are nuked as those
            // constitute the set of elements which can produce a cyclic ref.
            // The rest of the members is kept intact as they are harmless.
            destroy: function destructParseErrorInfo() {
                // remove cyclic references added to error info:
                // info.yy = null;
                // info.lexer = null;
                // info.value = null;
                // info.value_stack = null;
                // ...
                var rec = !!this.recoverable;
                for (var key in this) {
                    if (this.hasOwnProperty(key) && typeof key === 'object') {
                        this[key] = undefined;
                    }
                }
                this.recoverable = rec;
            }
        };
        // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
        this.__error_infos.push(pei);
        return pei;
    };













    function getNonTerminalFromCode(symbol) {
        var tokenName = self.getSymbolName(symbol);
        if (!tokenName) {
            tokenName = symbol;
        }
        return tokenName;
    }


    // lex function that supports token stacks
    function lex() {
        var token;
        token = tstack.pop() || lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            if (token instanceof Array) {
                tstack = token;
                token = tstack.pop();
            }
            // if token isn't its numeric value, convert
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
        }

        return token || EOF;
    }


    var state, action, r, t;
    var yyval = {
        $: true,
        _$: undefined,
        yy: sharedState_yy
    };
    var p;
    var yyrulelen;
    var this_production;
    var newState;
    var retval = false;


    try {
        this.__reentrant_call_depth++;

        lexer.setInput(input, sharedState_yy);

        // NOTE: we *assume* no lexer pre/post handlers are set up *after* 
        // this initial `setInput()` call: hence we can now check and decide
        // whether we'll go with the standard, slower, lex() API or the
        // `fast_lex()` one:
        if (typeof lexer.canIUse === 'function') {
            var lexerInfo = lexer.canIUse();
            if (lexerInfo.fastLex && typeof fastLex === 'function') {
                lex = fastLex;
            }
        } 



        vstack[sp] = null;
        sstack[sp] = 0;
        stack[sp] = 0;
        ++sp;





        if (this.pre_parse) {
            this.pre_parse.call(this, sharedState_yy);
        }
        if (sharedState_yy.pre_parse) {
            sharedState_yy.pre_parse.call(this, sharedState_yy);
        }

        newState = sstack[sp - 1];
        for (;;) {
            // retrieve state number from top of stack
            state = newState;               // sstack[sp - 1];

            // use default actions if available
            if (this.defaultActions[state]) {
                action = 2;
                newState = this.defaultActions[state];
            } else {
                // The single `==` condition below covers both these `===` comparisons in a single
                // operation:
                //
                //     if (symbol === null || typeof symbol === 'undefined') ...
                if (!symbol) {
                    symbol = lex();
                }
                // read action for current state and first input
                t = (table[state] && table[state][symbol]) || NO_ACTION;
                newState = t[1];
                action = t[0];











                // handle parse error
                if (!action) {
                    var errStr;
                    var errSymbolDescr = (this.describeSymbol(symbol) || symbol);
                    var expected = this.collect_expected_token_set(state);

                    // Report error
                    if (typeof lexer.yylineno === 'number') {
                        errStr = 'Parse error on line ' + (lexer.yylineno + 1) + ': ';
                    } else {
                        errStr = 'Parse error: ';
                    }
                    if (typeof lexer.showPosition === 'function') {
                        errStr += '\n' + lexer.showPosition(79 - 10, 10) + '\n';
                    }
                    if (expected.length) {
                        errStr += 'Expecting ' + expected.join(', ') + ', got unexpected ' + errSymbolDescr;
                    } else {
                        errStr += 'Unexpected ' + errSymbolDescr;
                    }
                    // we cannot recover from the error!
                    p = this.constructParseErrorInfo(errStr, null, expected, false);
                    r = this.parseError(p.errStr, p, this.JisonParserError);
                    if (typeof r !== 'undefined') {
                        retval = r;
                    }
                    break;
                }


            }










            switch (action) {
            // catch misc. parse failures:
            default:
                // this shouldn't happen, unless resolve defaults are off
                if (action instanceof Array) {
                    p = this.constructParseErrorInfo('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol, null, null, false);
                    r = this.parseError(p.errStr, p, this.JisonParserError);
                    if (typeof r !== 'undefined') {
                        retval = r;
                    }
                    break;
                }
                // Another case of better safe than sorry: in case state transitions come out of another error recovery process
                // or a buggy LUT (LookUp Table):
                p = this.constructParseErrorInfo('Parsing halted. No viable error recovery approach available due to internal system failure.', null, null, false);
                r = this.parseError(p.errStr, p, this.JisonParserError);
                if (typeof r !== 'undefined') {
                    retval = r;
                }
                break;

            // shift:
            case 1:
                stack[sp] = symbol;
                vstack[sp] = lexer.yytext;

                sstack[sp] = newState; // push state

                ++sp;
                symbol = 0;




                // Pick up the lexer details for the current symbol as that one is not 'look-ahead' any more:




                continue;

            // reduce:
            case 2:



                this_production = this.productions_[newState - 1];  // `this.productions_[]` is zero-based indexed while states start from 1 upwards...
                yyrulelen = this_production[1];










                r = this.performAction.call(yyval, newState, sp - 1, vstack);

                if (typeof r !== 'undefined') {
                    retval = r;
                    break;
                }

                // pop off stack
                sp -= yyrulelen;

                // don't overwrite the `symbol` variable: use a local var to speed things up:
                var ntsymbol = this_production[0];    // push nonterminal (reduce)
                stack[sp] = ntsymbol;
                vstack[sp] = yyval.$;

                // goto new state = table[STATE][NONTERMINAL]
                newState = table[sstack[sp - 1]][ntsymbol];
                sstack[sp] = newState;
                ++sp;









                continue;

            // accept:
            case 3:
                if (sp !== -2) {
                    retval = true;
                    // Return the `$accept` rule's `$$` result, if available.
                    //
                    // Also note that JISON always adds this top-most `$accept` rule (with implicit,
                    // default, action):
                    //
                    //     $accept: <startSymbol> $end
                    //                  %{ $$ = $1; @$ = @1; %}
                    //
                    // which, combined with the parse kernel's `$accept` state behaviour coded below,
                    // will produce the `$$` value output of the <startSymbol> rule as the parse result,
                    // IFF that result is *not* `undefined`. (See also the parser kernel code.)
                    //
                    // In code:
                    //
                    //                  %{
                    //                      @$ = @1;            // if location tracking support is included
                    //                      if (typeof $1 !== 'undefined')
                    //                          return $1;
                    //                      else
                    //                          return true;           // the default parse result if the rule actions don't produce anything
                    //                  %}
                    sp--;
                    if (typeof vstack[sp] !== 'undefined') {
                        retval = vstack[sp];
                    }
                }
                break;
            }

            // break out of loop: we accept or fail with error
            break;
        }
    } catch (ex) {
        // report exceptions through the parseError callback too, but keep the exception intact
        // if it is a known parser or lexer error which has been thrown by parseError() already:
        if (ex instanceof this.JisonParserError) {
            throw ex;
        }
        else if (lexer && typeof lexer.JisonLexerError === 'function' && ex instanceof lexer.JisonLexerError) {
            throw ex;
        }

        p = this.constructParseErrorInfo('Parsing aborted due to exception.', ex, null, false);
        retval = false;
        r = this.parseError(p.errStr, p, this.JisonParserError);
        if (typeof r !== 'undefined') {
            retval = r;
        }
    } finally {
        retval = this.cleanupAfterParse(retval, true, true);
        this.__reentrant_call_depth--;
    }   // /finally

    return retval;
}
};
parser.originalParseError = parser.parseError;
parser.originalQuoteName = parser.quoteName;
/* lexer generated by jison-lex 0.6.1-216 */

/*
 * Returns a Lexer object of the following structure:
 *
 *  Lexer: {
 *    yy: {}     The so-called "shared state" or rather the *source* of it;
 *               the real "shared state" `yy` passed around to
 *               the rule actions, etc. is a direct reference!
 *
 *               This "shared context" object was passed to the lexer by way of 
 *               the `lexer.setInput(str, yy)` API before you may use it.
 *
 *               This "shared context" object is passed to the lexer action code in `performAction()`
 *               so userland code in the lexer actions may communicate with the outside world 
 *               and/or other lexer rules' actions in more or less complex ways.
 *
 *  }
 *
 *  Lexer.prototype: {
 *    EOF: 1,
 *    ERROR: 2,
 *
 *    yy:        The overall "shared context" object reference.
 *
 *    JisonLexerError: function(msg, hash),
 *
 *    performAction: function lexer__performAction(yy, yyrulenumber, YY_START),
 *
 *               The function parameters and `this` have the following value/meaning:
 *               - `this`    : reference to the `lexer` instance. 
 *                               `yy_` is an alias for `this` lexer instance reference used internally.
 *
 *               - `yy`      : a reference to the `yy` "shared state" object which was passed to the lexer
 *                             by way of the `lexer.setInput(str, yy)` API before.
 *
 *                             Note:
 *                             The extra arguments you specified in the `%parse-param` statement in your
 *                             **parser** grammar definition file are passed to the lexer via this object
 *                             reference as member variables.
 *
 *               - `yyrulenumber`   : index of the matched lexer rule (regex), used internally.
 *
 *               - `YY_START`: the current lexer "start condition" state.
 *
 *    parseError: function(str, hash, ExceptionClass),
 *
 *    constructLexErrorInfo: function(error_message, is_recoverable),
 *               Helper function.
 *               Produces a new errorInfo 'hash object' which can be passed into `parseError()`.
 *               See it's use in this lexer kernel in many places; example usage:
 *
 *                   var infoObj = lexer.constructParseErrorInfo('fail!', true);
 *                   var retVal = lexer.parseError(infoObj.errStr, infoObj, lexer.JisonLexerError);
 *
 *    options: { ... lexer %options ... },
 *
 *    lex: function(),
 *               Produce one token of lexed input, which was passed in earlier via the `lexer.setInput()` API.
 *               You MAY use the additional `args...` parameters as per `%parse-param` spec of the **lexer** grammar:
 *               these extra `args...` are added verbatim to the `yy` object reference as member variables.
 *
 *               WARNING:
 *               Lexer's additional `args...` parameters (via lexer's `%parse-param`) MAY conflict with
 *               any attributes already added to `yy` by the **parser** or the jison run-time; 
 *               when such a collision is detected an exception is thrown to prevent the generated run-time 
 *               from silently accepting this confusing and potentially hazardous situation! 
 *
 *    cleanupAfterLex: function(do_not_nuke_errorinfos),
 *               Helper function.
 *
 *               This helper API is invoked when the **parse process** has completed: it is the responsibility
 *               of the **parser** (or the calling userland code) to invoke this method once cleanup is desired. 
 *
 *               This helper may be invoked by user code to ensure the internal lexer gets properly garbage collected.
 *
 *    setInput: function(input, [yy]),
 *
 *
 *    input: function(),
 *
 *
 *    unput: function(str),
 *
 *
 *    more: function(),
 *
 *
 *    reject: function(),
 *
 *
 *    less: function(n),
 *
 *
 *    pastInput: function(n),
 *
 *
 *    upcomingInput: function(n),
 *
 *
 *    showPosition: function(),
 *
 *
 *    test_match: function(regex_match_array, rule_index),
 *
 *
 *    next: function(),
 *
 *
 *    begin: function(condition),
 *
 *
 *    pushState: function(condition),
 *
 *
 *    popState: function(),
 *
 *
 *    topState: function(),
 *
 *
 *    _currentRules: function(),
 *
 *
 *    stateStackSize: function(),
 *
 *
 *    performAction: function(yy, yy_, yyrulenumber, YY_START),
 *
 *
 *    rules: [...],
 *
 *
 *    conditions: {associative list: name ==> set},
 *  }
 *
 *
 *  token location info (`yylloc`): {
 *    first_line: n,
 *    last_line: n,
 *    first_column: n,
 *    last_column: n,
 *    range: [start_number, end_number]
 *               (where the numbers are indexes into the input string, zero-based)
 *  }
 *
 * ---
 *
 * The `parseError` function receives a 'hash' object with these members for lexer errors:
 *
 *  {
 *    text:        (matched text)
 *    token:       (the produced terminal token, if any)
 *    token_id:    (the produced terminal token numeric ID, if any)
 *    line:        (yylineno)
 *    loc:         (yylloc)
 *    recoverable: (boolean: TRUE when the parser MAY have an error recovery rule
 *                  available for this particular error)
 *    yy:          (object: the current parser internal "shared state" `yy`
 *                  as is also available in the rule actions; this can be used,
 *                  for instance, for advanced error analysis and reporting)
 *    lexer:       (reference to the current lexer instance used by the parser)
 *  }
 *
 * while `this` will reference the current lexer instance.
 *
 * When `parseError` is invoked by the lexer, the default implementation will
 * attempt to invoke `yy.parser.parseError()`; when this callback is not provided
 * it will try to invoke `yy.parseError()` instead. When that callback is also not
 * provided, a `JisonLexerError` exception will be thrown containing the error
 * message and `hash`, as constructed by the `constructLexErrorInfo()` API.
 *
 * Note that the lexer's `JisonLexerError` error class is passed via the
 * `ExceptionClass` argument, which is invoked to construct the exception
 * instance to be thrown, so technically `parseError` will throw the object
 * produced by the `new ExceptionClass(str, hash)` JavaScript expression.
 *
 * ---
 *
 * You can specify lexer options by setting / modifying the `.options` object of your Lexer instance.
 * These options are available:
 *
 * (Options are permanent.)
 *  
 *  yy: {
 *      parseError: function(str, hash, ExceptionClass)
 *                 optional: overrides the default `parseError` function.
 *  }
 *
 *  lexer.options: {
 *      pre_lex:  function()
 *                 optional: is invoked before the lexer is invoked to produce another token.
 *                 `this` refers to the Lexer object.
 *      post_lex: function(token) { return token; }
 *                 optional: is invoked when the lexer has produced a token `token`;
 *                 this function can override the returned token value by returning another.
 *                 When it does not return any (truthy) value, the lexer will return
 *                 the original `token`.
 *                 `this` refers to the Lexer object.
 *
 * WARNING: the next set of options are not meant to be changed. They echo the abilities of
 * the lexer as per when it was compiled!
 *
 *      ranges: boolean
 *                 optional: `true` ==> token location info will include a .range[] member.
 *      flex: boolean
 *                 optional: `true` ==> flex-like lexing behaviour where the rules are tested
 *                 exhaustively to find the longest match.
 *      backtrack_lexer: boolean
 *                 optional: `true` ==> lexer regexes are tested in order and for invoked;
 *                 the lexer terminates the scan when a token is returned by the action code.
 *      xregexp: boolean
 *                 optional: `true` ==> lexer rule regexes are "extended regex format" requiring the
 *                 `XRegExp` library. When this %option has not been specified at compile time, all lexer
 *                 rule regexes have been written as standard JavaScript RegExp expressions.
 *  }
 */


var lexer = function() {
  /**
   * See also:
   * http://stackoverflow.com/questions/1382107/whats-a-good-way-to-extend-error-in-javascript/#35881508
   * but we keep the prototype.constructor and prototype.name assignment lines too for compatibility
   * with userland code which might access the derived class in a 'classic' way.
   *
   * @public
   * @constructor
   * @nocollapse
   */
  function JisonLexerError(msg, hash) {
    Object.defineProperty(this, 'name', {
      enumerable: false,
      writable: false,
      value: 'JisonLexerError'
    });

    if (msg == null)
      msg = '???';

    Object.defineProperty(this, 'message', {
      enumerable: false,
      writable: true,
      value: msg
    });

    this.hash = hash;
    var stacktrace;

    if (hash && hash.exception instanceof Error) {
      var ex2 = hash.exception;
      this.message = ex2.message || msg;
      stacktrace = ex2.stack;
    }

    if (!stacktrace) {
      if (Error.hasOwnProperty('captureStackTrace')) {
        // V8
        Error.captureStackTrace(this, this.constructor);
      } else {
        stacktrace = new Error(msg).stack;
      }
    }

    if (stacktrace) {
      Object.defineProperty(this, 'stack', {
        enumerable: false,
        writable: false,
        value: stacktrace
      });
    }
  }

  if (typeof Object.setPrototypeOf === 'function') {
    Object.setPrototypeOf(JisonLexerError.prototype, Error.prototype);
  } else {
    JisonLexerError.prototype = Object.create(Error.prototype);
  }

  JisonLexerError.prototype.constructor = JisonLexerError;
  JisonLexerError.prototype.name = 'JisonLexerError';

  var lexer = {
    
// Code Generator Information Report
// ---------------------------------
//
// Options:
//
//   backtracking: .................... false
//   location.ranges: ................. false
//   location line+column tracking: ... true
//
//
// Forwarded Parser Analysis flags:
//
//   uses yyleng: ..................... false
//   uses yylineno: ................... false
//   uses yytext: ..................... false
//   uses yylloc: ..................... false
//   uses lexer values: ............... true / true
//   location tracking: ............... false
//   location assignment: ............. false
//
//
// Lexer Analysis flags:
//
//   uses yyleng: ..................... ???
//   uses yylineno: ................... ???
//   uses yytext: ..................... ???
//   uses yylloc: ..................... ???
//   uses ParseError API: ............. ???
//   uses yyerror: .................... ???
//   uses location tracking & editing:  ???
//   uses more() API: ................. ???
//   uses unput() API: ................ ???
//   uses reject() API: ............... ???
//   uses less() API: ................. ???
//   uses display APIs pastInput(), upcomingInput(), showPosition():
//        ............................. ???
//   uses describeYYLLOC() API: ....... ???
//
// --------- END OF REPORT -----------

EOF: 1,
    ERROR: 2,

    // JisonLexerError: JisonLexerError,        /// <-- injected by the code generator

    // options: {},                             /// <-- injected by the code generator

    // yy: ...,                                 /// <-- injected by setInput()

    /// INTERNAL USE ONLY: internal rule set cache for the current lexer state
    __currentRuleSet__: null,

    /// INTERNAL USE ONLY: the set of lexErrorInfo objects created since the last cleanup
    __error_infos: [],

    /// INTERNAL USE ONLY: mark whether the lexer instance has been 'unfolded' completely and is now ready for use
    __decompressed: false,

    /// INTERNAL USE ONLY
    done: false,

    /// INTERNAL USE ONLY
    _backtrack: false,

    /// INTERNAL USE ONLY
    _input: '',

    /// INTERNAL USE ONLY
    _more: false,

    /// INTERNAL USE ONLY
    _signaled_error_token: false,

    /// INTERNAL USE ONLY; managed via `pushState()`, `popState()`, `topState()` and `stateStackSize()`
    conditionStack: [],

    /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction. `match` is identical to `yytext` except that this one still contains the matched input string after `lexer.performAction()` has been invoked, where userland code MAY have changed/replaced the `yytext` value entirely!
    match: '',

    /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks entire input which has been matched so far
    matched: '',

    /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks RE match result for last (successful) match attempt
    matches: false,

    /// ADVANCED USE ONLY: tracks input which has been matched so far for the lexer token under construction; this value is transferred to the parser as the 'token value' when the parser consumes the lexer token produced through a call to the `lex()` API.
    yytext: '',

    /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks the 'cursor position' in the input string, i.e. the number of characters matched so far
    offset: 0,

    /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: length of matched input for the token under construction (`yytext`)
    yyleng: 0,

    /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: 'line number' at which the token under construction is located
    yylineno: 0,

    /// READ-ONLY EXTERNAL ACCESS - ADVANCED USE ONLY: tracks location info (lines + columns) for the token under construction
    yylloc: null,

    /**
     * INTERNAL USE: construct a suitable error info hash object instance for `parseError`.
     * 
     * @public
     * @this {RegExpLexer}
     */
    constructLexErrorInfo: function lexer_constructLexErrorInfo(msg, recoverable, show_input_position) {
      msg = '' + msg;

      // heuristic to determine if the error message already contains a (partial) source code dump
      // as produced by either `showPosition()` or `prettyPrintRange()`:
      if (show_input_position == undefined) {
        show_input_position = !(msg.indexOf('\n') > 0 && msg.indexOf('^') > 0);
      }

      if (this.yylloc && show_input_position) {
        if (typeof this.prettyPrintRange === 'function') {
          var pretty_src = this.prettyPrintRange(this.yylloc);

          if (!/\n\s*$/.test(msg)) {
            msg += '\n';
          }

          msg += '\n  Erroneous area:\n' + this.prettyPrintRange(this.yylloc);
        } else if (typeof this.showPosition === 'function') {
          var pos_str = this.showPosition();

          if (pos_str) {
            if (msg.length && msg[msg.length - 1] !== '\n' && pos_str[0] !== '\n') {
              msg += '\n' + pos_str;
            } else {
              msg += pos_str;
            }
          }
        }
      }

      /** @constructor */
      var pei = {
        errStr: msg,
        recoverable: !!recoverable,

        // This one MAY be empty; userland code should use the `upcomingInput` API to obtain more text which follows the 'lexer cursor position'...
        text: this.match,

        token: null,
        line: this.yylineno,
        loc: this.yylloc,
        yy: this.yy,
        lexer: this,

        /**
         * and make sure the error info doesn't stay due to potential
         * ref cycle via userland code manipulations.
         * These would otherwise all be memory leak opportunities!
         * 
         * Note that only array and object references are nuked as those
         * constitute the set of elements which can produce a cyclic ref.
         * The rest of the members is kept intact as they are harmless.
         * 
         * @public
         * @this {LexErrorInfo}
         */
        destroy: function destructLexErrorInfo() {
          // remove cyclic references added to error info:
          // info.yy = null;
          // info.lexer = null;
          // ...
          var rec = !!this.recoverable;

          for (var key in this) {
            if (this.hasOwnProperty(key) && typeof key === 'object') {
              this[key] = undefined;
            }
          }

          this.recoverable = rec;
        }
      };

      // track this instance so we can `destroy()` it once we deem it superfluous and ready for garbage collection!
      this.__error_infos.push(pei);

      return pei;
    },

    /**
     * handler which is invoked when a lexer error occurs.
     * 
     * @public
     * @this {RegExpLexer}
     */
    parseError: function lexer_parseError(str, hash, ExceptionClass) {
      if (!ExceptionClass) {
        ExceptionClass = this.JisonLexerError;
      }

      if (this.yy) {
        if (this.yy.parser && typeof this.yy.parser.parseError === 'function') {
          return this.yy.parser.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;
        } else if (typeof this.yy.parseError === 'function') {
          return this.yy.parseError.call(this, str, hash, ExceptionClass) || this.ERROR;
        }
      }

      throw new ExceptionClass(str, hash);
    },

    /**
     * method which implements `yyerror(str, ...args)` functionality for use inside lexer actions.
     * 
     * @public
     * @this {RegExpLexer}
     */
    yyerror: function yyError(str /*, ...args */) {
      var lineno_msg = '';

      if (this.yylloc) {
        lineno_msg = ' on line ' + (this.yylineno + 1);
      }

      var p = this.constructLexErrorInfo(
        'Lexical error' + lineno_msg + ': ' + str,
        this.options.lexerErrorsAreRecoverable
      );

      // Add any extra args to the hash under the name `extra_error_attributes`:
      var args = Array.prototype.slice.call(arguments, 1);

      if (args.length) {
        p.extra_error_attributes = args;
      }

      return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
    },

    /**
     * final cleanup function for when we have completed lexing the input;
     * make it an API so that external code can use this one once userland
     * code has decided it's time to destroy any lingering lexer error
     * hash object instances and the like: this function helps to clean
     * up these constructs, which *may* carry cyclic references which would
     * otherwise prevent the instances from being properly and timely
     * garbage-collected, i.e. this function helps prevent memory leaks!
     * 
     * @public
     * @this {RegExpLexer}
     */
    cleanupAfterLex: function lexer_cleanupAfterLex(do_not_nuke_errorinfos) {
      // prevent lingering circular references from causing memory leaks:
      this.setInput('', {});

      // nuke the error hash info instances created during this run.
      // Userland code must COPY any data/references
      // in the error hash instance(s) it is more permanently interested in.
      if (!do_not_nuke_errorinfos) {
        for (var i = this.__error_infos.length - 1; i >= 0; i--) {
          var el = this.__error_infos[i];

          if (el && typeof el.destroy === 'function') {
            el.destroy();
          }
        }

        this.__error_infos.length = 0;
      }

      return this;
    },

    /**
     * clear the lexer token context; intended for internal use only
     * 
     * @public
     * @this {RegExpLexer}
     */
    clear: function lexer_clear() {
      this.yytext = '';
      this.yyleng = 0;
      this.match = '';

      // - DO NOT reset `this.matched`
      this.matches = false;

      this._more = false;
      this._backtrack = false;
      var col = (this.yylloc ? this.yylloc.last_column : 0);

      this.yylloc = {
        first_line: this.yylineno + 1,
        first_column: col,
        last_line: this.yylineno + 1,
        last_column: col,
        range: [this.offset, this.offset]
      };
    },

    /**
     * resets the lexer, sets new input
     * 
     * @public
     * @this {RegExpLexer}
     */
    setInput: function lexer_setInput(input, yy) {
      this.yy = yy || this.yy || {};

      // also check if we've fully initialized the lexer instance,
      // including expansion work to be done to go from a loaded
      // lexer to a usable lexer:
      if (!this.__decompressed) {
        // step 1: decompress the regex list:
        var rules = this.rules;

        for (var i = 0, len = rules.length; i < len; i++) {
          var rule_re = rules[i];

          // compression: is the RE an xref to another RE slot in the rules[] table?
          if (typeof rule_re === 'number') {
            rules[i] = rules[rule_re];
          }
        }

        // step 2: unfold the conditions[] set to make these ready for use:
        var conditions = this.conditions;

        for (var k in conditions) {
          var spec = conditions[k];
          var rule_ids = spec.rules;
          var len = rule_ids.length;
          var rule_regexes = new Array(len + 1);            // slot 0 is unused; we use a 1-based index approach here to keep the hottest code in `lexer_next()` fast and simple!
          var rule_new_ids = new Array(len + 1);

          for (var i = 0; i < len; i++) {
            var idx = rule_ids[i];
            var rule_re = rules[idx];
            rule_regexes[i + 1] = rule_re;
            rule_new_ids[i + 1] = idx;
          }

          spec.rules = rule_new_ids;
          spec.__rule_regexes = rule_regexes;
          spec.__rule_count = len;
        }

        this.__decompressed = true;
      }

      this._input = input || '';
      this.clear();
      this._signaled_error_token = false;
      this.done = false;
      this.yylineno = 0;
      this.matched = '';
      this.conditionStack = ['INITIAL'];
      this.__currentRuleSet__ = null;

      this.yylloc = {
        first_line: 1,
        first_column: 0,
        last_line: 1,
        last_column: 0,
        range: [0, 0]
      };

      this.offset = 0;
      return this;
    },

    /**
     * edit the remaining input via user-specified callback.
     * This can be used to forward-adjust the input-to-parse, 
     * e.g. inserting macro expansions and alike in the
     * input which has yet to be lexed.
     * The behaviour of this API contrasts the `unput()` et al
     * APIs as those act on the *consumed* input, while this
     * one allows one to manipulate the future, without impacting
     * the current `yyloc` cursor location or any history. 
     * 
     * Use this API to help implement C-preprocessor-like
     * `#include` statements, etc.
     * 
     * The provided callback must be synchronous and is
     * expected to return the edited input (string).
     *
     * The `cpsArg` argument value is passed to the callback
     * as-is.
     *
     * `callback` interface: 
     * `function callback(input, cpsArg)`
     * 
     * - `input` will carry the remaining-input-to-lex string
     *   from the lexer.
     * - `cpsArg` is `cpsArg` passed into this API.
     * 
     * The `this` reference for the callback will be set to
     * reference this lexer instance so that userland code
     * in the callback can easily and quickly access any lexer
     * API. 
     *
     * When the callback returns a non-string-type falsey value,
     * we assume the callback did not edit the input and we
     * will using the input as-is.
     *
     * When the callback returns a non-string-type value, it
     * is converted to a string for lexing via the `"" + retval`
     * operation. (See also why: http://2ality.com/2012/03/converting-to-string.html 
     * -- that way any returned object's `toValue()` and `toString()`
     * methods will be invoked in a proper/desirable order.)
     * 
     * @public
     * @this {RegExpLexer}
     */
    editRemainingInput: function lexer_editRemainingInput(callback, cpsArg) {
      var rv = callback.call(this, this._input, cpsArg);

      if (typeof rv !== 'string') {
        if (rv) {
          this._input = '' + rv;
        }
        // else: keep `this._input` as is. 
      } else {
        this._input = rv;
      }

      return this;
    },

    /**
     * consumes and returns one char from the input
     * 
     * @public
     * @this {RegExpLexer}
     */
    input: function lexer_input() {
      if (!this._input) {
        //this.done = true;    -- don't set `done` as we want the lex()/next() API to be able to produce one custom EOF token match after this anyhow. (lexer can match special <<EOF>> tokens and perform user action code for a <<EOF>> match, but only does so *once*)
        return null;
      }

      var ch = this._input[0];
      this.yytext += ch;
      this.yyleng++;
      this.offset++;
      this.match += ch;
      this.matched += ch;

      // Count the linenumber up when we hit the LF (or a stand-alone CR).
      // On CRLF, the linenumber is incremented when you fetch the CR or the CRLF combo
      // and we advance immediately past the LF as well, returning both together as if
      // it was all a single 'character' only.
      var slice_len = 1;

      var lines = false;

      if (ch === '\n') {
        lines = true;
      } else if (ch === '\r') {
        lines = true;
        var ch2 = this._input[1];

        if (ch2 === '\n') {
          slice_len++;
          ch += ch2;
          this.yytext += ch2;
          this.yyleng++;
          this.offset++;
          this.match += ch2;
          this.matched += ch2;
          this.yylloc.range[1]++;
        }
      }

      if (lines) {
        this.yylineno++;
        this.yylloc.last_line++;
        this.yylloc.last_column = 0;
      } else {
        this.yylloc.last_column++;
      }

      this.yylloc.range[1]++;
      this._input = this._input.slice(slice_len);
      return ch;
    },

    /**
     * unshifts one char (or an entire string) into the input
     * 
     * @public
     * @this {RegExpLexer}
     */
    unput: function lexer_unput(ch) {
      var len = ch.length;
      var lines = ch.split(/(?:\r\n?|\n)/g);
      this._input = ch + this._input;
      this.yytext = this.yytext.substr(0, this.yytext.length - len);
      this.yyleng = this.yytext.length;
      this.offset -= len;
      this.match = this.match.substr(0, this.match.length - len);
      this.matched = this.matched.substr(0, this.matched.length - len);

      if (lines.length > 1) {
        this.yylineno -= lines.length - 1;
        this.yylloc.last_line = this.yylineno + 1;

        // Get last entirely matched line into the `pre_lines[]` array's
        // last index slot; we don't mind when other previously 
        // matched lines end up in the array too. 
        var pre = this.match;

        var pre_lines = pre.split(/(?:\r\n?|\n)/g);

        if (pre_lines.length === 1) {
          pre = this.matched;
          pre_lines = pre.split(/(?:\r\n?|\n)/g);
        }

        this.yylloc.last_column = pre_lines[pre_lines.length - 1].length;
      } else {
        this.yylloc.last_column -= len;
      }

      this.yylloc.range[1] = this.yylloc.range[0] + this.yyleng;
      this.done = false;
      return this;
    },

    /**
     * cache matched text and append it on next action
     * 
     * @public
     * @this {RegExpLexer}
     */
    more: function lexer_more() {
      this._more = true;
      return this;
    },

    /**
     * signal the lexer that this rule fails to match the input, so the
     * next matching rule (regex) should be tested instead.
     * 
     * @public
     * @this {RegExpLexer}
     */
    reject: function lexer_reject() {
      if (this.options.backtrack_lexer) {
        this._backtrack = true;
      } else {
        // when the `parseError()` call returns, we MUST ensure that the error is registered.
        // We accomplish this by signaling an 'error' token to be produced for the current
        // `.lex()` run.
        var lineno_msg = '';

        if (this.yylloc) {
          lineno_msg = ' on line ' + (this.yylineno + 1);
        }

        var p = this.constructLexErrorInfo(
          'Lexical error' + lineno_msg + ': You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).',
          false
        );

        this._signaled_error_token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
      }

      return this;
    },

    /**
     * retain first n characters of the match
     * 
     * @public
     * @this {RegExpLexer}
     */
    less: function lexer_less(n) {
      return this.unput(this.match.slice(n));
    },

    /**
     * return (part of the) already matched input, i.e. for error
     * messages.
     * 
     * Limit the returned string length to `maxSize` (default: 20).
     * 
     * Limit the returned string to the `maxLines` number of lines of
     * input (default: 1).
     * 
     * Negative limit values equal *unlimited*.
     * 
     * @public
     * @this {RegExpLexer}
     */
    pastInput: function lexer_pastInput(maxSize, maxLines) {
      var past = this.matched.substring(0, this.matched.length - this.match.length);

      if (maxSize < 0)
        maxSize = past.length;
      else if (!maxSize)
        maxSize = 20;

      if (maxLines < 0)
        maxLines = past.length;         // can't ever have more input lines than this!;
      else if (!maxLines)
        maxLines = 1;

      // `substr` anticipation: treat \r\n as a single character and take a little
      // more than necessary so that we can still properly check against maxSize
      // after we've transformed and limited the newLines in here:
      past = past.substr(-maxSize * 2 - 2);

      // now that we have a significantly reduced string to process, transform the newlines
      // and chop them, then limit them:
      var a = past.replace(/\r\n|\r/g, '\n').split('\n');

      a = a.slice(-maxLines);
      past = a.join('\n');

      // When, after limiting to maxLines, we still have too much to return,
      // do add an ellipsis prefix...
      if (past.length > maxSize) {
        past = '...' + past.substr(-maxSize);
      }

      return past;
    },

    /**
     * return (part of the) upcoming input, i.e. for error messages.
     * 
     * Limit the returned string length to `maxSize` (default: 20).
     * 
     * Limit the returned string to the `maxLines` number of lines of input (default: 1).
     * 
     * Negative limit values equal *unlimited*.
     *
     * > ### NOTE ###
     * >
     * > *"upcoming input"* is defined as the whole of the both
     * > the *currently lexed* input, together with any remaining input
     * > following that. *"currently lexed"* input is the input 
     * > already recognized by the lexer but not yet returned with
     * > the lexer token. This happens when you are invoking this API
     * > from inside any lexer rule action code block. 
     * >
     * 
     * @public
     * @this {RegExpLexer}
     */
    upcomingInput: function lexer_upcomingInput(maxSize, maxLines) {
      var next = this.match;

      if (maxSize < 0)
        maxSize = next.length + this._input.length;
      else if (!maxSize)
        maxSize = 20;

      if (maxLines < 0)
        maxLines = maxSize;         // can't ever have more input lines than this!;
      else if (!maxLines)
        maxLines = 1;

      // `substring` anticipation: treat \r\n as a single character and take a little
      // more than necessary so that we can still properly check against maxSize
      // after we've transformed and limited the newLines in here:
      if (next.length < maxSize * 2 + 2) {
        next += this._input.substring(0, maxSize * 2 + 2);  // substring is faster on Chrome/V8
      }

      // now that we have a significantly reduced string to process, transform the newlines
      // and chop them, then limit them:
      var a = next.replace(/\r\n|\r/g, '\n').split('\n');

      a = a.slice(0, maxLines);
      next = a.join('\n');

      // When, after limiting to maxLines, we still have too much to return,
      // do add an ellipsis postfix...
      if (next.length > maxSize) {
        next = next.substring(0, maxSize) + '...';
      }

      return next;
    },

    /**
     * return a string which displays the character position where the
     * lexing error occurred, i.e. for error messages
     * 
     * @public
     * @this {RegExpLexer}
     */
    showPosition: function lexer_showPosition(maxPrefix, maxPostfix) {
      var pre = this.pastInput(maxPrefix).replace(/\s/g, ' ');
      var c = new Array(pre.length + 1).join('-');
      return pre + this.upcomingInput(maxPostfix).replace(/\s/g, ' ') + '\n' + c + '^';
    },

    /**
     * return an YYLLOC info object derived off the given context (actual, preceding, following, current).
     * Use this method when the given `actual` location is not guaranteed to exist (i.e. when
     * it MAY be NULL) and you MUST have a valid location info object anyway:
     * then we take the given context of the `preceding` and `following` locations, IFF those are available,
     * and reconstruct the `actual` location info from those.
     * If this fails, the heuristic is to take the `current` location, IFF available.
     * If this fails as well, we assume the sought location is at/around the current lexer position
     * and then produce that one as a response. DO NOTE that these heuristic/derived location info
     * values MAY be inaccurate!
     *
     * NOTE: `deriveLocationInfo()` ALWAYS produces a location info object *copy* of `actual`, not just
     * a *reference* hence all input location objects can be assumed to be 'constant' (function has no side-effects).
     * 
     * @public
     * @this {RegExpLexer}
     */
    deriveLocationInfo: function lexer_deriveYYLLOC(actual, preceding, following, current) {
      var loc = {
        first_line: 1,
        first_column: 0,
        last_line: 1,
        last_column: 0,
        range: [0, 0]
      };

      if (actual) {
        loc.first_line = actual.first_line | 0;
        loc.last_line = actual.last_line | 0;
        loc.first_column = actual.first_column | 0;
        loc.last_column = actual.last_column | 0;

        if (actual.range) {
          loc.range[0] = actual.range[0] | 0;
          loc.range[1] = actual.range[1] | 0;
        }
      }

      if (loc.first_line <= 0 || loc.last_line < loc.first_line) {
        // plan B: heuristic using preceding and following:
        if (loc.first_line <= 0 && preceding) {
          loc.first_line = preceding.last_line | 0;
          loc.first_column = preceding.last_column | 0;

          if (preceding.range) {
            loc.range[0] = actual.range[1] | 0;
          }
        }

        if ((loc.last_line <= 0 || loc.last_line < loc.first_line) && following) {
          loc.last_line = following.first_line | 0;
          loc.last_column = following.first_column | 0;

          if (following.range) {
            loc.range[1] = actual.range[0] | 0;
          }
        }

        // plan C?: see if the 'current' location is useful/sane too:
        if (loc.first_line <= 0 && current && (loc.last_line <= 0 || current.last_line <= loc.last_line)) {
          loc.first_line = current.first_line | 0;
          loc.first_column = current.first_column | 0;

          if (current.range) {
            loc.range[0] = current.range[0] | 0;
          }
        }

        if (loc.last_line <= 0 && current && (loc.first_line <= 0 || current.first_line >= loc.first_line)) {
          loc.last_line = current.last_line | 0;
          loc.last_column = current.last_column | 0;

          if (current.range) {
            loc.range[1] = current.range[1] | 0;
          }
        }
      }

      // sanitize: fix last_line BEFORE we fix first_line as we use the 'raw' value of the latter
      // or plan D heuristics to produce a 'sensible' last_line value:
      if (loc.last_line <= 0) {
        if (loc.first_line <= 0) {
          loc.first_line = this.yylloc.first_line;
          loc.last_line = this.yylloc.last_line;
          loc.first_column = this.yylloc.first_column;
          loc.last_column = this.yylloc.last_column;
          loc.range[0] = this.yylloc.range[0];
          loc.range[1] = this.yylloc.range[1];
        } else {
          loc.last_line = this.yylloc.last_line;
          loc.last_column = this.yylloc.last_column;
          loc.range[1] = this.yylloc.range[1];
        }
      }

      if (loc.first_line <= 0) {
        loc.first_line = loc.last_line;
        loc.first_column = 0; // loc.last_column;
        loc.range[1] = loc.range[0];
      }

      if (loc.first_column < 0) {
        loc.first_column = 0;
      }

      if (loc.last_column < 0) {
        loc.last_column = (loc.first_column > 0 ? loc.first_column : 80);
      }

      return loc;
    },

    /**
     * return a string which displays the lines & columns of input which are referenced 
     * by the given location info range, plus a few lines of context.
     * 
     * This function pretty-prints the indicated section of the input, with line numbers 
     * and everything!
     * 
     * This function is very useful to provide highly readable error reports, while
     * the location range may be specified in various flexible ways:
     * 
     * - `loc` is the location info object which references the area which should be
     *   displayed and 'marked up': these lines & columns of text are marked up by `^`
     *   characters below each character in the entire input range.
     * 
     * - `context_loc` is the *optional* location info object which instructs this
     *   pretty-printer how much *leading* context should be displayed alongside
     *   the area referenced by `loc`. This can help provide context for the displayed
     *   error, etc.
     * 
     *   When this location info is not provided, a default context of 3 lines is
     *   used.
     * 
     * - `context_loc2` is another *optional* location info object, which serves
     *   a similar purpose to `context_loc`: it specifies the amount of *trailing*
     *   context lines to display in the pretty-print output.
     * 
     *   When this location info is not provided, a default context of 1 line only is
     *   used.
     * 
     * Special Notes:
     * 
     * - when the `loc`-indicated range is very large (about 5 lines or more), then
     *   only the first and last few lines of this block are printed while a
     *   `...continued...` message will be printed between them.
     * 
     *   This serves the purpose of not printing a huge amount of text when the `loc`
     *   range happens to be huge: this way a manageable & readable output results
     *   for arbitrary large ranges.
     * 
     * - this function can display lines of input which whave not yet been lexed.
     *   `prettyPrintRange()` can access the entire input!
     * 
     * @public
     * @this {RegExpLexer}
     */
    prettyPrintRange: function lexer_prettyPrintRange(loc, context_loc, context_loc2) {
      loc = this.deriveLocationInfo(loc, context_loc, context_loc2);
      const CONTEXT = 3;
      const CONTEXT_TAIL = 1;
      const MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT = 2;
      var input = this.matched + this._input;
      var lines = input.split('\n');
      var l0 = Math.max(1, (context_loc ? context_loc.first_line : loc.first_line - CONTEXT));
      var l1 = Math.max(1, (context_loc2 ? context_loc2.last_line : loc.last_line + CONTEXT_TAIL));
      var lineno_display_width = 1 + Math.log10(l1 | 1) | 0;
      var ws_prefix = new Array(lineno_display_width).join(' ');
      var nonempty_line_indexes = [[], [], []];

      var rv = lines.slice(l0 - 1, l1 + 1).map(function injectLineNumber(line, index) {
        var lno = index + l0;
        var lno_pfx = (ws_prefix + lno).substr(-lineno_display_width);
        var rv = lno_pfx + ': ' + line;
        var errpfx = new Array(lineno_display_width + 1).join('^');
        var offset = 2 + 1;
        var len = 0;

        if (lno === loc.first_line) {
          offset += loc.first_column;

          len = Math.max(
            2,
            ((lno === loc.last_line ? loc.last_column : line.length)) - loc.first_column + 1
          );
        } else if (lno === loc.last_line) {
          len = Math.max(2, loc.last_column + 1);
        } else if (lno > loc.first_line && lno < loc.last_line) {
          len = Math.max(2, line.length + 1);
        }

        var nli;

        if (len) {
          var lead = new Array(offset).join('.');
          var mark = new Array(len).join('^');
          rv += '\n' + errpfx + lead + mark;
          nli = 1;
        } else if (lno < loc.first_line) {
          nli = 0;
        } else if (lno > loc.last_line) {
          nli = 2;
        }

        if (line.trim().length > 0) {
          nonempty_line_indexes[nli].push(index);
        }

        rv = rv.replace(/\t/g, ' ');
        return rv;
      });

      // now make sure we don't print an overly large amount of lead/error/tail area: limit it 
      // to the top and bottom line count:
      for (var i = 0; i <= 2; i++) {
        var line_arr = nonempty_line_indexes[i];

        if (line_arr.length > 2 * MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT) {
          var clip_start = line_arr[MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT - 1] + 1;
          var clip_end = line_arr[line_arr.length - MINIMUM_VISIBLE_NONEMPTY_LINE_COUNT] - 1;
          var intermediate_line = new Array(lineno_display_width + 1).join(' ') + '  (...continued...)';

          if (i === 1) {
            intermediate_line += '\n' + new Array(lineno_display_width + 1).join('-') + '  (---------------)';
          }

          rv.splice(clip_start, clip_end - clip_start + 1, intermediate_line);
        }
      }

      return rv.join('\n');
    },

    /**
     * helper function, used to produce a human readable description as a string, given
     * the input `yylloc` location object.
     * 
     * Set `display_range_too` to TRUE to include the string character index position(s)
     * in the description if the `yylloc.range` is available.
     * 
     * @public
     * @this {RegExpLexer}
     */
    describeYYLLOC: function lexer_describe_yylloc(yylloc, display_range_too) {
      var l1 = yylloc.first_line;
      var l2 = yylloc.last_line;
      var c1 = yylloc.first_column;
      var c2 = yylloc.last_column;
      var dl = l2 - l1;
      var dc = c2 - c1;
      var rv;

      if (dl === 0) {
        rv = 'line ' + l1 + ', ';

        if (dc <= 1) {
          rv += 'column ' + c1;
        } else {
          rv += 'columns ' + c1 + ' .. ' + c2;
        }
      } else {
        rv = 'lines ' + l1 + '(column ' + c1 + ') .. ' + l2 + '(column ' + c2 + ')';
      }

      if (yylloc.range && display_range_too) {
        var r1 = yylloc.range[0];
        var r2 = yylloc.range[1] - 1;

        if (r2 <= r1) {
          rv += ' {String Offset: ' + r1 + '}';
        } else {
          rv += ' {String Offset range: ' + r1 + ' .. ' + r2 + '}';
        }
      }

      return rv;
    },

    /**
     * test the lexed token: return FALSE when not a match, otherwise return token.
     * 
     * `match` is supposed to be an array coming out of a regex match, i.e. `match[0]`
     * contains the actually matched text string.
     * 
     * Also move the input cursor forward and update the match collectors:
     * 
     * - `yytext`
     * - `yyleng`
     * - `match`
     * - `matches`
     * - `yylloc`
     * - `offset`
     * 
     * @public
     * @this {RegExpLexer}
     */
    test_match: function lexer_test_match(match, indexed_rule) {
      var token, lines, backup, match_str, match_str_len;

      if (this.options.backtrack_lexer) {
        // save context
        backup = {
          yylineno: this.yylineno,

          yylloc: {
            first_line: this.yylloc.first_line,
            last_line: this.yylloc.last_line,
            first_column: this.yylloc.first_column,
            last_column: this.yylloc.last_column,
            range: this.yylloc.range.slice(0)
          },

          yytext: this.yytext,
          match: this.match,
          matches: this.matches,
          matched: this.matched,
          yyleng: this.yyleng,
          offset: this.offset,
          _more: this._more,
          _input: this._input,

          //_signaled_error_token: this._signaled_error_token,
          yy: this.yy,

          conditionStack: this.conditionStack.slice(0),
          done: this.done
        };
      }

      match_str = match[0];
      match_str_len = match_str.length;

      // if (match_str.indexOf('\n') !== -1 || match_str.indexOf('\r') !== -1) {
      lines = match_str.split(/(?:\r\n?|\n)/g);

      if (lines.length > 1) {
        this.yylineno += lines.length - 1;
        this.yylloc.last_line = this.yylineno + 1;
        this.yylloc.last_column = lines[lines.length - 1].length;
      } else {
        this.yylloc.last_column += match_str_len;
      }

      // }
      this.yytext += match_str;

      this.match += match_str;
      this.matched += match_str;
      this.matches = match;
      this.yyleng = this.yytext.length;
      this.yylloc.range[1] += match_str_len;

      // previous lex rules MAY have invoked the `more()` API rather than producing a token:
      // those rules will already have moved this `offset` forward matching their match lengths,
      // hence we must only add our own match length now:
      this.offset += match_str_len;

      this._more = false;
      this._backtrack = false;
      this._input = this._input.slice(match_str_len);

      // calling this method:
      //
      //   function lexer__performAction(yy, yyrulenumber, YY_START) {...}
      token = this.performAction.call(
        this,
        this.yy,
        indexed_rule,
        this.conditionStack[this.conditionStack.length - 1] /* = YY_START */
      );

      // otherwise, when the action codes are all simple return token statements:
      //token = this.simpleCaseActionClusters[indexed_rule];

      if (this.done && this._input) {
        this.done = false;
      }

      if (token) {
        return token;
      } else if (this._backtrack) {
        // recover context
        for (var k in backup) {
          this[k] = backup[k];
        }

        this.__currentRuleSet__ = null;
        return false; // rule action called reject() implying the next rule should be tested instead.
      } else if (this._signaled_error_token) {
        // produce one 'error' token as `.parseError()` in `reject()`
        // did not guarantee a failure signal by throwing an exception!
        token = this._signaled_error_token;

        this._signaled_error_token = false;
        return token;
      }

      return false;
    },

    /**
     * return next match in input
     * 
     * @public
     * @this {RegExpLexer}
     */
    next: function lexer_next() {
      if (this.done) {
        this.clear();
        return this.EOF;
      }

      if (!this._input) {
        this.done = true;
      }

      var token, match, tempMatch, index;

      if (!this._more) {
        this.clear();
      }

      var spec = this.__currentRuleSet__;

      if (!spec) {
        // Update the ruleset cache as we apparently encountered a state change or just started lexing.
        // The cache is set up for fast lookup -- we assume a lexer will switch states much less often than it will
        // invoke the `lex()` token-producing API and related APIs, hence caching the set for direct access helps
        // speed up those activities a tiny bit.
        spec = this.__currentRuleSet__ = this._currentRules();

        // Check whether a *sane* condition has been pushed before: this makes the lexer robust against
        // user-programmer bugs such as https://github.com/zaach/jison-lex/issues/19
        if (!spec || !spec.rules) {
          var lineno_msg = '';

          if (this.options.trackPosition) {
            lineno_msg = ' on line ' + (this.yylineno + 1);
          }

          var p = this.constructLexErrorInfo(
            'Internal lexer engine error' + lineno_msg + ': The lex grammar programmer pushed a non-existing condition name "' + this.topState() + '"; this is a fatal error and should be reported to the application programmer team!',
            false
          );

          // produce one 'error' token until this situation has been resolved, most probably by parse termination!
          return this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;
        }
      }

      var rule_ids = spec.rules;
      var regexes = spec.__rule_regexes;
      var len = spec.__rule_count;

      // Note: the arrays are 1-based, while `len` itself is a valid index,
      // hence the non-standard less-or-equal check in the next loop condition!
      for (var i = 1; i <= len; i++) {
        tempMatch = this._input.match(regexes[i]);

        if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
          match = tempMatch;
          index = i;

          if (this.options.backtrack_lexer) {
            token = this.test_match(tempMatch, rule_ids[i]);

            if (token !== false) {
              return token;
            } else if (this._backtrack) {
              match = undefined;
              continue; // rule action called reject() implying a rule MISmatch.
            } else {
              // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
              return false;
            }
          } else if (!this.options.flex) {
            break;
          }
        }
      }

      if (match) {
        token = this.test_match(match, rule_ids[index]);

        if (token !== false) {
          return token;
        }

        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
        return false;
      }

      if (!this._input) {
        this.done = true;
        this.clear();
        return this.EOF;
      } else {
        var lineno_msg = '';

        if (this.options.trackPosition) {
          lineno_msg = ' on line ' + (this.yylineno + 1);
        }

        var p = this.constructLexErrorInfo(
          'Lexical error' + lineno_msg + ': Unrecognized text.',
          this.options.lexerErrorsAreRecoverable
        );

        var pendingInput = this._input;
        var activeCondition = this.topState();
        var conditionStackDepth = this.conditionStack.length;
        token = this.parseError(p.errStr, p, this.JisonLexerError) || this.ERROR;

        if (token === this.ERROR) {
          // we can try to recover from a lexer error that `parseError()` did not 'recover' for us
          // by moving forward at least one character at a time IFF the (user-specified?) `parseError()`
          // has not consumed/modified any pending input or changed state in the error handler:
          if (!this.matches && // and make sure the input has been modified/consumed ...
          pendingInput === this._input && // ...or the lexer state has been modified significantly enough
          // to merit a non-consuming error handling action right now.
          activeCondition === this.topState() && conditionStackDepth === this.conditionStack.length) {
            this.input();
          }
        }

        return token;
      }
    },

    /**
     * return next match that has a token
     * 
     * @public
     * @this {RegExpLexer}
     */
    lex: function lexer_lex() {
      var r;

      // allow the PRE/POST handlers set/modify the return token for maximum flexibility of the generated lexer:
      if (typeof this.pre_lex === 'function') {
        r = this.pre_lex.call(this, 0);
      }

      if (typeof this.options.pre_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.options.pre_lex.call(this, r) || r;
      }

      if (this.yy && typeof this.yy.pre_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.yy.pre_lex.call(this, r) || r;
      }

      while (!r) {
        r = this.next();
      }

      if (this.yy && typeof this.yy.post_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.yy.post_lex.call(this, r) || r;
      }

      if (typeof this.options.post_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.options.post_lex.call(this, r) || r;
      }

      if (typeof this.post_lex === 'function') {
        // (also account for a userdef function which does not return any value: keep the token as is)
        r = this.post_lex.call(this, r) || r;
      }

      return r;
    },

    /**
     * return next match that has a token. Identical to the `lex()` API but does not invoke any of the 
     * `pre_lex()` nor any of the `post_lex()` callbacks.
     * 
     * @public
     * @this {RegExpLexer}
     */
    fastLex: function lexer_fastLex() {
      var r;

      while (!r) {
        r = this.next();
      }

      return r;
    },

    /**
     * return info about the lexer state that can help a parser or other lexer API user to use the
     * most efficient means available. This API is provided to aid run-time performance for larger
     * systems which employ this lexer.
     * 
     * @public
     * @this {RegExpLexer}
     */
    canIUse: function lexer_canIUse() {
      var rv = {
        fastLex: !(typeof this.pre_lex === 'function' || typeof this.options.pre_lex === 'function' || this.yy && typeof this.yy.pre_lex === 'function' || this.yy && typeof this.yy.post_lex === 'function' || typeof this.options.post_lex === 'function' || typeof this.post_lex === 'function') && typeof this.fastLex === 'function'
      };

      return rv;
    },

    /**
     * backwards compatible alias for `pushState()`;
     * the latter is symmetrical with `popState()` and we advise to use
     * those APIs in any modern lexer code, rather than `begin()`.
     * 
     * @public
     * @this {RegExpLexer}
     */
    begin: function lexer_begin(condition) {
      return this.pushState(condition);
    },

    /**
     * activates a new lexer condition state (pushes the new lexer
     * condition state onto the condition stack)
     * 
     * @public
     * @this {RegExpLexer}
     */
    pushState: function lexer_pushState(condition) {
      this.conditionStack.push(condition);
      this.__currentRuleSet__ = null;
      return this;
    },

    /**
     * pop the previously active lexer condition state off the condition
     * stack
     * 
     * @public
     * @this {RegExpLexer}
     */
    popState: function lexer_popState() {
      var n = this.conditionStack.length - 1;

      if (n > 0) {
        this.__currentRuleSet__ = null;
        return this.conditionStack.pop();
      } else {
        return this.conditionStack[0];
      }
    },

    /**
     * return the currently active lexer condition state; when an index
     * argument is provided it produces the N-th previous condition state,
     * if available
     * 
     * @public
     * @this {RegExpLexer}
     */
    topState: function lexer_topState(n) {
      n = this.conditionStack.length - 1 - Math.abs(n || 0);

      if (n >= 0) {
        return this.conditionStack[n];
      } else {
        return 'INITIAL';
      }
    },

    /**
     * (internal) determine the lexer rule set which is active for the
     * currently active lexer condition state
     * 
     * @public
     * @this {RegExpLexer}
     */
    _currentRules: function lexer__currentRules() {
      if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
        return this.conditions[this.conditionStack[this.conditionStack.length - 1]];
      } else {
        return this.conditions['INITIAL'];
      }
    },

    /**
     * return the number of states currently on the stack
     * 
     * @public
     * @this {RegExpLexer}
     */
    stateStackSize: function lexer_stateStackSize() {
      return this.conditionStack.length;
    },

    options: {
      trackPosition: true,
      caseInsensitive: true
    },

    JisonLexerError: JisonLexerError,

    performAction: function lexer__performAction(yy, yyrulenumber, YY_START) {
      var yy_ = this;
      var YYSTATE = YY_START;

      switch (yyrulenumber) {
      case 0:
        /*! Conditions:: INITIAL */
        /*! Rule::       {keyword} */
        this.pushState('AFTER_KEYWORD');

        return 21;
        break;

      case 1:
        /*! Conditions:: INITIAL */
        /*! Rule::       {tag} */
        this.pushState('AFTER_TAG_NAME');

        return 15;
        break;

      case 2:
        /*! Conditions:: INITIAL */
        /*! Rule::       (script|style) */
        if (TEXT_TAGS_ALLOW_SUB_TAGS) {
          this.pushState('AFTER_TAG_NAME');
          return 15;
        } else {
          this.pushState('AFTER_TEXT_TAG_NAME');
          return 16;
        }

        break;

      case 3:
        /*! Conditions:: INITIAL */
        /*! Rule::       {tag_id} */
        this.pushState('AFTER_TAG_NAME');

        yy_.yytext = yy_.yytext.substring(1);
        return 17;
        break;

      case 4:
        /*! Conditions:: INITIAL */
        /*! Rule::       {mixin_call} */
        yy_.yytext = yy_.yytext.substring(1);

        this.pushState('MIXIN_CALL_START');
        return 20;
        break;

      case 5:
        /*! Conditions:: INITIAL */
        /*! Rule::       \} */
        this.pushState('AFTER_KEYWORD');

        return 23;
        break;

      case 6:
        /*! Conditions:: INITIAL */
        /*! Rule::       {conditional} */
        this.pushState('COND_START');

        if (yy_.yytext.startsWith('-')) {
          yy_.yytext = yy_.yytext.substring(1);
        }

        return 26;
        break;

      case 7:
        /*! Conditions:: COND_START */
        /*! Rule::       \( */
        this.pushState('COND_START');

        return 9;
        break;

      case 8:
        /*! Conditions:: COND_START */
        /*! Rule::       .+\) */
        this.popState();

        yy_.yytext = yy_.yytext.substring(0, yy_.yytext.length - 1);
        return ['RPAREN', 'CONDITION'];
        break;

      case 9:
        /*! Conditions:: MULTI_LINE_ATTRS_END */
        /*! Rule::       \) */
        debug('<MULTI_LINE_ATTRS_END>\')\'');

        this.popState();
        return 3;
        break;

      case 10:
        /*! Conditions:: INITIAL */
        /*! Rule::       - */
        this.pushState('CODE_START');

        return 19;
        break;

      case 11:
        /*! Conditions:: INITIAL */
        /*! Rule::       {classname} */
        // debug('<INITIAL>{classname}')
        this.pushState('AFTER_TAG_NAME');

        yy_.yytext = yy_.yytext.substring(1);
        return 11;
        break;

      case 12:
        /*! Conditions:: INITIAL */
        /*! Rule::       \/\/ */
        this.pushState('TEXT');

        return 18;
        break;

      case 13:
        /*! Conditions:: INITIAL */
        /*! Rule::       <[A-Z_]+> */
        this.pushState(yy_.yytext.substring(1, yy_.yytext.length - 1));

        break;

      case 14:
        /*! Conditions:: INITIAL TEXT */
        /*! Rule::       \|  */
        this.pushState('TEXT');

        return 22;
        break;

      case 15:
        /*! Conditions:: INITIAL */
        /*! Rule::       \|\. */
        this.pushState('TEXT');

        this.unput('.');
        break;

      case 16:
        /*! Conditions:: INITIAL */
        /*! Rule::       \|$ */
        this.pushState('TEXT');

        return 25; // only because it is an empty object 
        break;

      case 17:
        /*! Conditions:: INITIAL AFTER_TAG_NAME ATTRS_END */
        /*! Rule::       &attributes\([^\)]+\) */
        debug('\'&attributes(\'[^)]+\')\'');

        return 8;
        break;

      case 18:
        /*! Conditions:: INITIAL */
        /*! Rule::       {interpolation} */
        debug('{interpolation}');

        this.pushState('AFTER_TAG_NAME');
        return 27;
        break;

      case 19:
        /*! Conditions:: INITIAL */
        /*! Rule::       {interpolation_start} */
        debug('{interpolation_start}');

        this.pushState('INTERPOLATION_START');
        return 28;
        break;

      case 20:
        /*! Conditions:: AFTER_TAG_NAME */
        /*! Rule::       =  */
        this.popState();

        this.pushState('ASSIGNMENT_VALUE');
        return 32;
        break;

      case 21:
        /*! Conditions:: AFTER_TAG_NAME AFTER_ATTRS */
        /*! Rule::       :  */
        this.popState();

        return 6;
        break;

      case 22:
        /*! Conditions:: AFTER_KEYWORD */
        /*! Rule::       {filter} */
        yy_.yytext = yy_.yytext.substring(1);

        return 29;
        break;

      case 23:
        /*! Conditions:: AFTER_TAG_NAME AFTER_TEXT_TAG_NAME */
        /*! Rule::       \( */
        ')'; // hack for syntax

        debug(`<AFTER_TAG_NAME,AFTER_TEXT_TAG_NAME>'('`);
        this.pushState('ATTRS_STARTED');
        return 9;
        break;

      case 25:
        /*! Conditions:: MIXIN_PARAMS_END */
        /*! Rule::       \) */
        // this.popState() // for inline blocks after mixin calls
        return 14;

        break;

      case 26:
        /*! Conditions:: INITIAL ATTRS_END */
        /*! Rule::       {classname} */
        debug('<INITIAL>{classname}');

        this.pushState('AFTER_TAG_NAME');
        yy_.yytext = yy_.yytext.substring(1);
        return 11;
        break;

      case 27:
        /*! Conditions:: ATTRS_STARTED */
        /*! Rule::       (\(.+|.+\().+ */
        '))';

        debug('15 yy_.yytext=', yy_.yytext);
        debug('15 this.matches=', this.matches);
        const stack = [];
        let i = 0;

        for (; i < yy_.yytext.length; i++) {
          // debug('yy_.yytext[i]=', yy_.yytext[i])
          if (/[\)\]}]/.test(yy_.yytext[i])) {
            debug('match');
            debug('stack.peek()=', stack.peek());

            if (stack.length == 0 || stack.pop() != yy_.yytext[i]) {
              debug('stack.length=', stack.length);
              break;
            }
            // else if () {
            // }
          } else {
            switch (yy_.yytext[i]) {
            case '(':
              stack.push(')');
              break;

            case '[':
              stack.push(']');
              break;

            case '{':
              stack.push('}');
              break;
            }
            // else if () {
            // }
          }
        }

        this.unput(yy_.yytext.substring(i));
        yy_.yytext = yy_.yytext.substring(0, i);
        debug('15 yy_.yytext=', yy_.yytext);
        this.popState();
        this.pushState('ATTRS_END');
        return 12;
        break;

      case 28:
        /*! Conditions:: ATTRS_STARTED */
        /*! Rule::       ([^\)]+)(\))(?!\s*\..+\)) */
        this.popState();

        this.pushState('ATTRS_END');
        debug('20 this.matches=', this.matches);
        debug('20 this.matches.length=', this.matches.length);
        debug('20 yy_.yytext=', yy_.yytext);

        try {
          this.unput(')');

          if (this.matches.length > 1) {
            yy_.yytext = this.matches[1];
            // if (yy_.yytext.startsWith(')')) {
            //   yy_.yytext = yy_.yytext.substring(1)
            // }
          }
        } catch (e) {
          console.error(e);
        }

        lparenOpen = false;
        debug('20 yy_.yytext=', yy_.yytext);
        return 12;
        break;

      case 29:
        /*! Conditions:: ATTRS_STARTED */
        /*! Rule::       (.+)\)\s*$ */
        this.popState();

        debug('30 this.matches=', this.matches);
        debug('30 this.matches.length=', this.matches.length);
        debug('30 yy_.yytext=', yy_.yytext);

        try {
          if (this.matches.length > 1) {
            yy_.yytext = this.matches[1];
          }
        } catch (e) {
          console.error(e);
        }

        lparenOpen = false;
        debug('30 yy_.yytext=', yy_.yytext);
        return ['RPAREN', 'ATTR_TEXT'];
        break;

      case 30:
        /*! Conditions:: ATTRS_STARTED */
        /*! Rule::       (.+)\)\.?\s*(.+)$ */
        this.popState();

        this.pushState('ATTRS_END');
        debug('40 this.matches=', this.matches);
        this.unput(this.matches[2]);
        yy_.yytext = yy_.yytext.substring(0, yy_.yytext.indexOf(this.matches[1]) + this.matches[1].length);
        debug('40 yy_.yytext=', yy_.yytext);
        lparenOpen = false;
        return ['RPAREN', 'ATTR_TEXT'];
        break;

      case 31:
        /*! Conditions:: ATTRS_STARTED */
        /*! Rule::       (.+)\.?\s*$ */
        this.popState();

        debug('50 this.matches=', this.matches);
        debug('50 this.matches.length=', this.matches.length);
        debug('50 yy_.yytext=', yy_.yytext);

        try {
          if (this.matches.length > 1) {
            yy_.yytext = this.matches[1];
          }
        } catch (e) {
          console.error(e);
        }

        debug('50 yy_.yytext=', yy_.yytext);
        return 10;
        break;

      case 32:
        /*! Conditions:: AFTER_TAG_NAME */
        /*! Rule::       {tag_id} */
        this.pushState('AFTER_TAG_NAME');

        yy_.yytext = this.matches[1].substring(1);
        return 17;
        break;

      case 33:
        /*! Conditions:: AFTER_TAG_NAME */
        /*! Rule::       {classname} */
        yy_.yytext = this.matches[1].substring(1);

        debug('60 yy_.yytext=', yy_.yytext);
        return 11;
        break;

      case 34:
        /*! Conditions:: INITIAL */
        /*! Rule::       {space}{2,} */
        debug('{space}{2,}');

        return 25;
        break;

      case 35:
        /*! Conditions:: AFTER_TAG_NAME AFTER_KEYWORD AFTER_TEXT_TAG_NAME */
        /*! Rule::       {space}{space} */
        this.pushState('TEXT');

        debug('space space');
        this.unput(' ');
        return 25;
        break;

      case 36:
        /*! Conditions:: AFTER_TAG_NAME AFTER_KEYWORD AFTER_TEXT_TAG_NAME */
        /*! Rule::       {space}{classname} */
        this.pushState('ATTRS_END');

        yy_.yytext = yy_.yytext.substring(1);
        return 4;
        break;

      case 37:
        /*! Conditions:: AFTER_TAG_NAME AFTER_KEYWORD AFTER_TEXT_TAG_NAME */
        /*! Rule::       {space} */
        this.pushState('ATTRS_END');

        debug('<AFTER_TAG_NAME,AFTER_KEYWORD,AFTER_TEXT_TAG_NAME>{space}');
        return 25;
        break;

      case 38:
        /*! Conditions:: ATTRS_END MIXIN_PARAMS_END */
        /*! Rule::       {space} */
        this.pushState('TEXT');

        debug('<ATTRS_END>{space}');
        return 25;
        break;

      case 40:
        /*! Conditions:: AFTER_TAG_NAME AFTER_KEYWORD AFTER_TEXT_TAG_NAME NO_MORE_SPACE */
        /*! Rule::       .+ */
        // if (yy_.yytext.startsWith(' ') {
        //   yy_.yytext = yy_.yytext.substring(1);
        // }
        debug('70 yy_.yytext=', yy_.yytext);

        return 4;
        break;

      case 41:
        /*! Conditions:: ATTRS_END */
        /*! Rule::       ={space} */
        this.popState();

        this.pushState('ASSIGNMENT_VALUE');
        return 32;
        break;

      case 42:
        /*! Conditions:: INITIAL ATTRS_END */
        /*! Rule::       \.\s*$ */
        this.popState();

        return 24;
        break;

      case 43:
        /*! Conditions:: ASSIGNMENT_VALUE */
        /*! Rule::       .+ */
        this.popState();

        return 31;
        break;

      case 44:
        /*! Conditions:: ATTRS_END */
        /*! Rule::       .+ */
        // yy_.yytext = yy_.yytext.substring(1)
        debug('6 yy_.yytext=', yy_.yytext);

        return 4;
        break;

      case 45:
        /*! Conditions:: CODE_START UNBUF_CODE */
        /*! Rule::       {space} */
        debug('<CODE_START,UNBUF_CODE>{space}');

        return 25;
        break;

      case 47:
        /*! Conditions:: MIXIN_CALL_START */
        /*! Rule::       \( */
        ')';

        this.popState();
        this.pushState('MIXIN_PARAMS_STARTED');
        return 9;
        break;

      case 48:
        /*! Conditions:: MIXIN_CALL_START */
        /*! Rule::       {space}$ */
        this.popState();

        break;

      case 49:
        /*! Conditions:: TEXT */
        /*! Rule::       .+ */
        debug('80 yy_.yytext=', yy_.yytext);

        return 4;
        break;

      case 52:
        /*! Conditions:: MIXIN_PARAMS_STARTED */
        /*! Rule::       (.+)(\)) */
        this.popState();

        this.pushState('MIXIN_PARAMS_END');
        debug('120 this.matches=', this.matches);
        debug('120 this.matches.length=', this.matches.length);
        debug('120 yy_.yytext=', yy_.yytext);

        try {
          this.unput(')');

          if (this.matches.length > 1) {
            yy_.yytext = this.matches[1];
            // if (yy_.yytext.startsWith(')')) {
            //   yy_.yytext = yy_.yytext.substring(1)
            // }
          }
        } catch (e) {
          console.error(e);
        }

        lparenOpen = false;
        debug('120 yy_.yytext=', yy_.yytext);
        return 13;
        break;

      default:
        return this.simpleCaseActionClusters[yyrulenumber];
      }
    },

    simpleCaseActionClusters: {
      /*! Conditions:: ATTRS_END */
      /*! Rule::       \) */
      24: 14,

      /*! Conditions:: AFTER_TAG_NAME AFTER_TEXT_TAG_NAME ATTRS_END */
      /*! Rule::       \.\s*$ */
      39: 24,

      /*! Conditions:: CODE_START UNBUF_CODE */
      /*! Rule::       .+ */
      46: 5,

      /*! Conditions:: MULTI_LINE_ATTRS */
      /*! Rule::       \) */
      50: 7,

      /*! Conditions:: MULTI_LINE_ATTRS */
      /*! Rule::       .+ */
      51: 12
    },

    rules: [
      /*  0: */  /^(?:((append|block|case|default|doctype|each|else|extends|for|if|include|mixin|unless|when|while)\b))/i,
      /*  1: */  /^(?:((a|abbr|acronym|address|applet|area|article|aside|audio|b|base|basefont|bdi|bdo|bgsound|big|blink|blockquote|body|br|button|canvas|caption|center|cite|code|col|colgroup|content|data|datalist|dd|del|details|dfn|dialog|dir|div|dl|dt|em|embed|fieldset|figcaption|figure|font|foo|footer|form|frame|frameset|h1|h2|h3|h4|h5|h6|head|header|hgroup|hr|html|i|iframe|image|img|input|ins|kbd|keygen|label|legend|li|link|main|map|mark|marquee|math|menu|menuitem|meta|meter|nav|nobr|noembed|noframes|noscript|object|ol|optgroup|option|output|p|param|picture|plaintext|portal|pre|progress|q|rb|rp|rt|rtc|ruby|s|samp|section|select|shadow|slot|small|source|spacer|span|strike|strong|sub|summary|sup|svg|table|tbody|td|template|textarea|tfoot|th|thead|time|title|tr|track|tt|u|ul|var|video|wbr|xmp)\b))/i,
      /*  2: */  /^(?:(script|style))/i,
      /*  3: */  /^(?:(#[\d\-a-z]+))/i,
      /*  4: */  /^(?:(\+[a-z]+\b))/i,
      /*  5: */  /^(?:\})/i,
      /*  6: */  /^(?:(-?(if|elseif|else)))/i,
      /*  7: */  /^(?:\()/i,
      /*  8: */  /^(?:.+\))/i,
      /*  9: */  /^(?:\))/i,
      /* 10: */  /^(?:-)/i,
      /* 11: */  /^(?:(\.-?[^\W\d]+[\w\-]*))/i,
      /* 12: */  /^(?:\/\/)/i,
      /* 13: */  /^(?:<[A-Z_]+>)/i,
      /* 14: */  /^(?:\| )/i,
      /* 15: */  /^(?:\|\.)/i,
      /* 16: */  /^(?:\|$)/i,
      /* 17: */  /^(?:&attributes\([^)]+\))/i,
      /* 18: */  /^(?:(#\{.+\}))/i,
      /* 19: */  /^(?:(#\{))/i,
      /* 20: */  /^(?:= )/i,
      /* 21: */  /^(?:: )/i,
      /* 22: */  /^(?:(:[\d\-a-z]+\b))/i,
      /* 23: */  /^(?:\()/i,
      /* 24: */  /^(?:\))/i,
      /* 25: */  /^(?:\))/i,
      /* 26: */  /^(?:(\.-?[^\W\d]+[\w\-]*))/i,
      /* 27: */  /^(?:(\(.+|.+\().+)/i,
      /* 28: */  /^(?:([^)]+)(\))(?!\s*\..+\)))/i,
      /* 29: */  /^(?:(.+)\)\s*$)/i,
      /* 30: */  /^(?:(.+)\)\.?\s*(.+)$)/i,
      /* 31: */  /^(?:(.+)\.?\s*$)/i,
      /* 32: */  /^(?:(#[\d\-a-z]+))/i,
      /* 33: */  /^(?:(\.-?[^\W\d]+[\w\-]*))/i,
      /* 34: */  /^(?:([   -​\u2028\u2029　]){2,})/i,
      /* 35: */  /^(?:([   -​\u2028\u2029　])([   -​\u2028\u2029　]))/i,
      /* 36: */  /^(?:([   -​\u2028\u2029　])(\.-?[^\W\d]+[\w\-]*))/i,
      /* 37: */  /^(?:([   -​\u2028\u2029　]))/i,
      /* 38: */  /^(?:([   -​\u2028\u2029　]))/i,
      /* 39: */  /^(?:\.\s*$)/i,
      /* 40: */  /^(?:.+)/i,
      /* 41: */  /^(?:=([   -​\u2028\u2029　]))/i,
      /* 42: */  /^(?:\.\s*$)/i,
      /* 43: */  /^(?:.+)/i,
      /* 44: */  /^(?:.+)/i,
      /* 45: */  /^(?:([   -​\u2028\u2029　]))/i,
      /* 46: */  /^(?:.+)/i,
      /* 47: */  /^(?:\()/i,
      /* 48: */  /^(?:([   -​\u2028\u2029　])$)/i,
      /* 49: */  /^(?:.+)/i,
      /* 50: */  /^(?:\))/i,
      /* 51: */  /^(?:.+)/i,
      /* 52: */  /^(?:(.+)(\)))/i
    ],

    conditions: {
      'TEXT': {
        rules: [14, 49],
        inclusive: false
      },

      'TEXT_START': {
        rules: [],
        inclusive: false
      },

      'AFTER_TAG_NAME': {
        rules: [17, 20, 21, 23, 32, 33, 35, 36, 37, 39, 40],
        inclusive: false
      },

      'ATTRS_STARTED': {
        rules: [27, 28, 29, 30, 31],
        inclusive: false
      },

      'ATTR_TEXT': {
        rules: [],
        inclusive: false
      },

      'MIXIN_CALL_START': {
        rules: [47, 48],
        inclusive: false
      },

      'ATTRS_END': {
        rules: [17, 24, 26, 38, 39, 41, 42, 44],
        inclusive: true
      },

      'CODE_START': {
        rules: [45, 46],
        inclusive: false
      },

      'UNBUF_CODE': {
        rules: [45, 46],
        inclusive: false
      },

      'MULTI_LINE_ATTRS': {
        rules: [50, 51],
        inclusive: false
      },

      'COMMENT': {
        rules: [],
        inclusive: false
      },

      'AFTER_ATTRS': {
        rules: [21],
        inclusive: false
      },

      'AFTER_TEXT_TAG_NAME': {
        rules: [23, 35, 36, 37, 39, 40],
        inclusive: false
      },

      'AFTER_KEYWORD': {
        rules: [22, 35, 36, 37, 40],
        inclusive: false
      },

      'NO_MORE_SPACE': {
        rules: [40],
        inclusive: false
      },

      'ASSIGNMENT_VALUE': {
        rules: [43],
        inclusive: false
      },

      'COND_START': {
        rules: [7, 8],
        inclusive: false
      },

      'MULTI_LINE_ATTRS_END': {
        rules: [9],
        inclusive: false
      },

      'INTERPOLATION_START': {
        rules: [],
        inclusive: false
      },

      'MIXIN_PARAMS_STARTED': {
        rules: [52],
        inclusive: false
      },

      'INITIAL': {
        rules: [0, 1, 2, 3, 4, 5, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 26, 34, 42],
        inclusive: true
      },

      'MIXIN_PARAMS_END': {
        rules: [25, 38],
        inclusive: false
      }
    }
  };

  return lexer;
}();
parser.lexer = lexer;

import assert from "assert"
import util from "util"
import _ from "lodash"
import debugFunc from 'debug'
import dyp from 'dyp'
import parseAttrs from '../dist/attrs.mjs'

const TEXT_TAGS_ALLOW_SUB_TAGS = true

const debug = debugFunc('pug-line-lexer')

let tagAlreadyFound = false
let obj
var lparenOpen = false
const keysToMergeText = ['therest']

function rank(type1, type2) {
  if (type2 === 'text') {
    return type1
  }
  else if (type1 === type2) {
    return type1
  }
  else if (type1 == 'tag' && type2 == 'tag_with_multiline_attrs') {
    return type2
  }
  else if (type1 == 'tag_with_multiline_attrs' && type2 == 'tag') {
    return type1
  }
  else {
    return type1.concat(type2)
  }
} 

function merge(obj, src) {

  if (obj == undefined || _.isEmpty(obj)) {
    debug('empty/undefined obj, returning src')
    return src
  }
  else if (src == undefined || _.isEmpty(src)) {
    debug('empty/undefined src, returning obj')
    return obj
  }

  if (Array.isArray(src) && src.length > 0) {
    src = src.reduce(merge)
    debug('src reduced to=', src)
  }

  debug('merging', obj, src)

  // if (util.isDeepStrictEqual(src, [ { therest: '' } ]))
  //    return obj

  if (obj.type != 'text' && Object.keys(src).length == 1 && Object.keys(src)[0] == 'children' && src.children.length == 1 && src.children[0].hasOwnProperty('type') && src.children[0].type == 'text') {
    return Object.assign(obj, { val: src.children[0].val })
  }

  const ret = _.mergeWith(obj, src, function (objValue, srcValue, key, object, source, stack) {
    debug('merging', 'inside _mergeWith', key, objValue, srcValue)
    if (objValue == undefined && srcValue == undefined) {
       return {}
    }
    if (objValue == undefined) {
       return srcValue
    }
    if (srcValue == undefined) {
       return objValue
    }
    if (objValue != undefined && srcValue != undefined) {
      if (keysToMergeText.includes(key)) {
         return objValue + srcValue
      }
      else {
         return rank(objValue, srcValue)
      }
    }
  })
  debug('merging', ' returning', ret)
  return ret
  //  return Object.assign(obj, src);
}

parser.main = function () {
  
  tagAlreadyFound = false
  lparenOpen = false

  function test(input, expected, strict = true ) {
    tagAlreadyFound = false
    lparenOpen = false
    debug(`\nTesting '${input}'...`)
    var actual = parser.parse(input)
    debug(input + ' ==> ', util.inspect(actual))
    
    let compareFunc
    if (strict)
      compareFunc = assert.deepEqual
    else 
      compareFunc = dyp

    compareFunc.call({}, actual, expected)
  }



test(`div(id=id)&attributes({foo: 'bar', fred: 'bart'})`, {
  type: 'tag',
  name: 'div',
  attrs: [{
    name: 'id',
    val: 'id'
  }, {
    name: 'foo',
    val: 'bar'
  }, {
    name: 'fred',
    val: 'bart'
  }]
})

// commenting this all out for now while I test pug-attr {
test(`a(class=['foo', 'bar', 'baz'])`, { type: 'tag', name: 'a', attrs: [
    {
      name: 'class',
      val: "['foo', 'bar', 'baz']"
    }
  ] })

// TODO: revisit
test(`a.foo(class='bar').baz`, {
  attrs: [
    {
      name: 'class',
      val: "'bar'"
    }
  ],
  classes: [
    'foo',
    'baz'
  ],
  name: 'a',
  type: 'tag'
})
// How is that ^ different than this?: a(href='/save').button save

test(`a.foo-bar_baz`, {
  classes: [
    'foo-bar_baz'
  ],
  name: 'a',
  type: 'tag'
})
test(`a(class={foo: true, bar: false, baz: true})`, {
  attrs: [
    {
      name: 'class',
      val: '{foo: true, bar: false, baz: true}'
    }
  ],
  name: 'a',
  type: 'tag'
})

test('span(v-for="item in items" :key="item.id" :value="item.name")', {
  name: 'span',
  type: 'tag',
  attrs: [
    { name: 'v-for', val: '"item in items"' },
    { name: ':key', val: '"item.id"' },
    { name: ':value', val: '"item.name"' }
  ]
})
test('p A sentence with a #[strong strongly worded phrase] that cannot be #[em ignored].', {
  name: 'p',
  type: 'tag',
  children: [
    { type: 'text', val: 'A sentence with a ' },
    { type: 'tag', name: 'strong', val: 'strongly worded phrase' },
    { type: 'text', val: ' that cannot be ' },
    { type: 'tag', name: 'em', val: 'ignored' },
    { type: 'text', val: '.' }
  ]
})

test('p <strong>strongly worded phrase</strong> that cannot be <em>ignored</em>', {
  name: 'p',
  type: 'tag',
  val: '<strong>strongly worded phrase</strong> that cannot be <em>ignored</em>'
})


// Not sure about this...
test('span &boxv;', { type: 'tag', name: 'span', val: '&boxv;'})
//  {
//   name: 'span',
//   type: 'tag',
//   children: [ { type: 'text', val: '&boxv;' } ]
// })

test('include:markdown-it article.md', { type: 'include', val: 'article.md', filter: 'markdown-it' })
test('span.hljs-section )', { type: 'tag', name: 'span', classes: ['hljs-section'], val: ')'})
test("#{'foo'}(bar='baz') /", {
  attrs: [
    {
      name: 'bar',
      val: "'baz'"
    }
  ],
  name: "#{'foo'}",
  type: 'interpolation',
  val: '/'
})

test('li= item', {
  assignment: true,
  assignment_val: 'item',
  name: 'li',
  type: 'tag'
})
test('<MULTI_LINE_ATTRS_END>)', {
  state: 'MULTI_LINE_ATTRS_END'
})
// test('a(:link="goHere" value="static" :my-value="dynamic" @click="onClick()" :another="more") Click Me!', {})

test('-var ajax = true', {type: 'code', val: 'var ajax = true', state: 'CODE_START' })
test('-if( ajax )', {type: 'conditional', name: 'if', condition: ' ajax '})
test('span.font-monospace .htmlnanorc', {
  type: 'tag', name: 'span', classes: ['font-monospace'], val: '.htmlnanorc'})

test('.container.post#post-20210905', {
  type: 'tag',
  id: 'post-20210905',
  classes: ['container', 'post']
})

test('<UNBUF_CODE>var i', {
  type: 'code',
  val: 'var i'
})

test('} else {', {
  type: 'block_end',
  val: 'else {'
})

test("+project('Moddable Two (2) Case', 'Needing Documentation ', ['print'])", { type: 'mixin_call', name: 'project', params: 
    "'Moddable Two (2) Case', 'Needing Documentation ', ['print']"
  })

test('code(class="language-scss").', {
  name: 'code',
  type: 'tag',
  attrs: [ { name: 'class', val: '"language-scss"' } ],
  state: 'TEXT_START'
})

test('p: a(href="https://www.thingiverse.com/thing:4578862") Thingiverse', {
  name: 'p',
  type: 'tag',
  state: 'NESTED',
  children: [ { name: 'a', type: 'tag', attrs: [{
          name: 'href',
          val: '"https://www.thingiverse.com/thing:4578862"'
        }], val: 'Thingiverse' } ]
})

test('.project(class= (tags || []).map((tag) => tag.replaceAll(" ", "_")).join(" "))', {
  type: 'tag',
  classes: [ 'project' ],
  attrs: [
    {
      name: 'class',
      val: '(tags || []).map((tag) => tag.replaceAll(" ", "_")).join(" ")'
    }
  ]
})

test('.status-wrapper Status:', { classes: [ 'status-wrapper' ], type: 'tag', val: 'Status:' })

test('+sensitive ', {
  name: 'sensitive',
  type: 'mixin_call'
})

test('a(href=url)= url', {
  assignment: true,
  assignment_val: 'url',
  attrs: [
    { name: 'href', val: 'url' }
  ],
  name: 'a',
  type: 'tag'
})

// I'm not supporting this right now
// test('a(href=\'/user/\' + id, class=\'button\')', {
//   attrs: [
//     "href='/user/' + id, class='button'"
//   ],
//   name: 'a',
//   type: 'tag'
// })

test('- function answer() { return 42; }', {
  state: 'CODE_START',
  type: 'code',
  val: 'function answer() { return 42; }'
})

// I'm not supporting this right now
// test('a(href=\'/user/\' + id, class=\'button\')', {
//   attrs: [
//     "href='/user/' + id, class='button'"
//   ],
//   name: 'a',
//   type: 'tag'
// })
// test('a(href  =  \'/user/\' + id, class  =  \'button\')', {
//   attrs: [
//     "href  =  '/user/' + id, class  =  'button'"
//   ],
//   name: 'a',
//   type: 'tag'
// })

test('a(class = [\'class1\', \'class2\'])',  {
  name: 'a',
  type: 'tag',
  attrs: [ { name: 'class', val: "['class1', 'class2']" } ]
})
test('a.tag-class(class = [\'class1\', \'class2\'])', {
  attrs: [
    {
      name: 'class',
      val: "['class1', 'class2']"
    }
  ],
  classes: [
    'tag-class'
  ],
  name: 'a',
  type: 'tag'
})
test('a(href=\'/user/\' + id class=\'button\')',  {
  name: 'a',
  type: 'tag',
  attrs: [
    { name: 'href', val: "'/user/' + id" },
    { name: 'class', val: "'button'" }
  ]
})
test('a(href  =  \'/user/\' + id class  =  \'button\')', {
  name: 'a',
  type: 'tag',
  attrs: [
    { name: 'href', val: "'/user/' + id" },
    { name: 'class', val: "'button'" }
  ]
})
test('meta(key=\'answer\' value=answer())', {
  name: 'meta',
  type: 'tag',
  attrs: [
    { name: 'key', val: "'answer'" },
    { name: 'value', val: 'answer()' }
  ]
})

test('div(id=id)&attributes({foo: \'bar\'})', {
  name: 'div',
  type: 'tag',
  attrs: [ { name: 'id', val: 'id' }, { name: 'foo', val: 'bar' } ]
})
test('div(foo=null bar=bar)&attributes({baz: \'baz\'})', {
  name: 'div',
  type: 'tag',
  attrs: [
    { name: 'foo', val: 'null' },
    { name: 'bar', val: 'bar' },
    { name: 'baz', val: 'baz' }
  ]
})

test('foo(abc', {type: 'tag_with_multiline_attrs', name: 'foo', attrs: ['abc'], state: 'MULTI_LINE_ATTRS'})
test('<MULTI_LINE_ATTRS>,def)', { type: 'attrs_cont', attrs: [',def)'] })

test('span(', {type: 'tag_with_multiline_attrs', name: 'span', state: 'MULTI_LINE_ATTRS'})
test('<MULTI_LINE_ATTRS>v-for="item in items"', {
  type: 'attrs_cont',
  attrs: [
    'v-for="item in items"'
  ]
})
test('<MULTI_LINE_ATTRS>:key="item.id"', {
  type: 'attrs_cont',
  attrs: [
    ':key="item.id"'
  ]
})
test('<MULTI_LINE_ATTRS>:value="item.name"', {
  type: 'attrs_cont',
  attrs: [
    ':value="item.name"'
  ]
})
test('<MULTI_LINE_ATTRS>)', {type: 'multiline_attrs_end'})
test('a(:link="goHere" value="static" :my-value="dynamic" @click="onClick()" :another="more") Click Me!', {
  name: 'a',
  type: 'tag',
  attrs: [
    { name: ':link', val: '"goHere"' },
    { name: 'value', val: '"static"' },
    { name: ':my-value', val: '"dynamic"' },
    { name: '@click', val: '"onClick()"' },
    { name: ':another', val: '"more"' }
  ],
  val: 'Click Me!'
})

test('foo(data-user=user)', {
  name: 'foo',
  type: 'tag',
  attrs: [ { name: 'data-user', val: 'user' } ]
})
test('foo(data-items=[1,2,3])', {
  name: 'foo',
  type: 'tag',
  attrs: [ { name: 'data-items', val: '[1,2,3]' } ]
})
test('foo(data-username=\'tobi\')', {
  attrs: [ { name: 'data-username', val: "'tobi'" } ],
  name: 'foo',
  type: 'tag'
})
test('foo(data-escaped={message: "Let\'s rock!"})', {
  attrs: [
    { name: 'data-escaped', val: '{message: "Let\'s rock!"}' }
  ],
  name: 'foo',
  type: 'tag'
})
test('foo(data-ampersand={message: "a quote: &quot; this & that"})', {
  attrs: [
    { name: 'data-ampersand', val: '{message: "a quote: &quot; this & that"}' }
  ],
  name: 'foo',
  type: 'tag'
})
test('foo(data-epoc=new Date(0))', {
  attrs: [
    { name: 'data-epoc', val: 'new Date(0)' }
  ],
  name: 'foo',
  type: 'tag'
})


test('+sensitive', {
  name: 'sensitive',
  type: 'mixin_call'
})

test('html', { type: 'tag', name: 'html' })
test('html ', { type: 'tag', name: 'html' }, false)

// test("doctype html", { type: 'doctype', val: 'html' })
test('doctype html', { type: 'doctype', val: 'html' })

test("html(lang='en-US')", {"type":"tag","name":"html","attrs":[{name:"lang", val: "'en-US'"}]})

// test("include something", { type: 'include_directive', params: 'something' })
test('include something', { type: 'include', val: 'something' })

// test("block here", { type: 'directive', name: 'block', params: 'here' })
test("block here", { type: 'block', val: 'here' })

test("head", { type: 'tag', name: 'head' })
test("meta(charset='UTF-8')", {"type":"tag","name":"meta","attrs":[{name:"charset", val:"'UTF-8'"}]})
test("meta(name='viewport' content='width=device-width')", { type: 'tag', name: 'meta', attrs: [{name: 'name', val: "'viewport'"}, {name: 'content', val: "'width=device-width'"}]})
test("title", {"type":"tag","name":"title"})
test("| White-space and character 160 | Adam Koch ", {"type":"text","val":"White-space and character 160 | Adam Koch "})
if (!TEXT_TAGS_ALLOW_SUB_TAGS)
  test("script(async src=\"https://www.googletagmanager.com/gtag/js?id=UA-452464-5\")", {"type":"tag","name":"script","attrs":["async src=\"https://www.googletagmanager.com/gtag/js?id=UA-452464-5\""], state: 'TEXT_START'})
test("script.  ", {"type":"tag","name":"script","state":"TEXT_START"})
test("<TEXT>window.dataLayer = window.dataLayer || [];   ", { type: 'text', val: 'window.dataLayer = window.dataLayer || [];   ' })
test("<TEXT>gtag('config', 'UA-452464-5');", {"type":"text","val":"gtag('config', 'UA-452464-5');"})
test("", "")
if (!TEXT_TAGS_ALLOW_SUB_TAGS)
  test("script test", {"type":"tag","name":"script","state":"TEXT_START","val":"test"})
test(".classname", { type: 'tag', classes: ['classname'] })

//test("// some text", { type: 'comment', state: 'TEXT_START' })
test("// some text", { type: 'comment', state: 'TEXT_START', val: ' some text' })

// test("// ", { type: 'comment', state: 'TEXT_START' })
test("// ", { type: 'comment', val: ' ', state: 'TEXT_START' })

test("//", { type: 'comment', state: 'TEXT_START' })


test('a.url.fn.n(href=\'https://wordpress.adamkoch.com/author/admin/\' title=\'View all posts by Adam\' rel=\'author\') Adam',  {
  name: 'a',
  type: 'tag',
  classes: [ 'url', 'fn', 'n' ],
  attrs: [
    {
      name: 'href',
      val: "'https://wordpress.adamkoch.com/author/admin/'"
    },
    { name: 'title', val: "'View all posts by Adam'" },
    { name: 'rel', val: "'author'" }
  ],
  val: 'Adam'
})
test('style(id=\'wp-block-library-inline-css\' type=\'text/css\').', {
  name: 'style',
  type: 'tag',
  attrs: [
    { name: 'id', val: "'wp-block-library-inline-css'" },
    { name: 'type', val: "'text/css'" }
  ],
  state: 'TEXT_START'
})
test('| #start-resizable-editor-section{figcaption{color:hsla(0,0%,100%,.65)}', {"type":"text","val":"#start-resizable-editor-section{figcaption{color:hsla(0,0%,100%,.65)}"})
test('body.post-template-default.single.single-post.postid-1620.single-format-standard.wp-embed-responsive.single-author.singular.two-column.right-sidebar', {"type":"tag","name":"body","classes":["post-template-default","single","single-post","postid-1620","single-format-standard","wp-embed-responsive","single-author","singular","two-column","right-sidebar"]})
test('#page.hfeed', {"type":"tag","id":"page","classes":["hfeed"]})
test('header#branding(role=\'banner\')', {
  name: 'header',
  type: 'tag',
  id: 'branding',
  attrs: [ { name: 'role', val: "'banner'" } ]
})
test('h1#site-title', {type: 'tag', name: 'h1', id: 'site-title'})
test('a(href=\'https://www.adamkoch.com/\' rel=\'home\') Adam Koch', {
  name: 'a',
  type: 'tag',
  attrs: [
    { name: 'href', val: "'https://www.adamkoch.com/'" },
    { name: 'rel', val: "'home'" }
  ],
  val: 'Adam Koch'
})
test('h2#site-description Software Developer and Clean Code Advocate', {type: 'tag', name: 'h2', id: 'site-description', val: 'Software Developer and Clean Code Advocate' })
test('h3.assistive-text Main menu', {type: 'tag', name: 'h3', classes: ['assistive-text'], val: 'Main menu' })
test('ul#menu-header.menu', {type: 'tag', name: 'ul', id: 'menu-header', classes: ['menu']})
test('a(href=\'https://wordpress.adamkoch.com/posts/\') Posts', {
  name: 'a',
  type: 'tag',
  attrs: [ { name: 'href', val: "'https://wordpress.adamkoch.com/posts/'" } ],
  val: 'Posts'
})
test('span.sep  by', {type:'tag', name: 'span', classes: ['sep'], val: ' by' })
test('style.', {"type":"tag","name":"style","state":"TEXT_START"})
test('p I came across a problem in Internet Explorer (it wasn\'t a problem with Firefox) when I was trying to compare two strings. To me, one string looked to have an extra space in the front. No problem, I\'ll just call the', {
  type: 'tag',
  name: 'p',
  val: "I came across a problem in Internet Explorer (it wasn't a problem with Firefox) when I was trying to compare two strings. To me, one string looked to have an extra space in the front. No problem, I'll just call the"
})
test('.sd-content', { type: 'tag', classes: [ 'sd-content' ] })
test('th  Browser', { type: 'tag', name: 'th', val: ' Browser' })
test('.sharedaddy.sd-sharing-enabled', {"type":"tag","classes":['sharedaddy', 'sd-sharing-enabled']})
test('time(datetime=\'2009-07-28T01:24:04-06:00\') 2009-07-28 at 1:24 AM', {
  name: 'time',
  type: 'tag',
  attrs: [ { name: 'datetime', val: "'2009-07-28T01:24:04-06:00'" } ],
  val: '2009-07-28 at 1:24 AM'
} )
test('- var title = \'Fade Out On MouseOver Demo\'', { type: 'code', val: 'var title = \'Fade Out On MouseOver Demo\'', state: 'CODE_START' })
test('<TEXT>}).join(\' \')', { type: 'text', val: "}).join(' ')" })
test('  ', {
  type: 'empty'
})
test('#content(role=\'main\')', {
  type: 'tag',
  id: 'content',
  attrs: [ { name: 'role', val: "'main'" } ]
})
test('pre: code(class="language-scss").', {
  name: 'pre',
  type: 'tag',
  state: 'NESTED',
  children: [
    { name: 'code', type: 'tag', attrs: [
        {
          name: 'class',
          val: '"language-scss"'
        }], state: 'TEXT_START' }
  ]
})

test('mixin sensitive()', { type: 'mixin', val: 'sensitive()' })
test('extends ../templates/blogpost', {
  type: 'extends',
  val: '../templates/blogpost'
})
test('append head', {
  type: 'append',
  val: 'head'
})
test('p Maecenas sed lorem accumsan, luctus eros eu, tempor dolor. Vestibulum lorem est, bibendum vel vulputate eget, vehicula eu elit. Donec interdum cursus felis, vitae posuere libero. Cras et lobortis velit. Pellentesque in imperdiet justo. Suspendisse dolor mi, aliquet at luctus a, suscipit quis lectus. Etiam dapibus venenatis sem, quis aliquam nisl volutpat vel. Aenean scelerisque dapibus sodales. Vestibulum in pretium diam. Quisque et urna orci.', {type: 'tag', name: 'p', val: 'Maecenas sed lorem accumsan, luctus eros eu, tempor dolor. Vestibulum lorem est, bibendum vel vulputate eget, vehicula eu elit. Donec interdum cursus felis, vitae posuere libero. Cras et lobortis velit. Pellentesque in imperdiet justo. Suspendisse dolor mi, aliquet at luctus a, suscipit quis lectus. Etiam dapibus venenatis sem, quis aliquam nisl volutpat vel. Aenean scelerisque dapibus sodales. Vestibulum in pretium diam. Quisque et urna orci.' })

test('+project(\'Images\', \'On going\')', { type: 'mixin_call', name: 'project', params: "'Images', 'On going'" })
test("+project('Moddable Two (2) Case', 'Needing Documentation ', ['print'])", {
  type: 'mixin_call',
  name: 'project',
  params: "'Moddable Two (2) Case', 'Needing Documentation ', ['print']"
})
test('| . The only "gotcha" was I originally had "www.adamkoch.com" as the A record instead of "adamkoch.com". Not a big deal and easy to rectify.', { type: 'text', val: '. The only "gotcha" was I originally had "www.adamkoch.com" as the A record instead of "adamkoch.com". Not a big deal and easy to rectify.' })
test('<TEXT>| #start-resizable-editor-section{display:none}.wp-block-audio figcaption{color:#555;font-size:13px;', {"type":"text","val":"#start-resizable-editor-section{display:none}.wp-block-audio figcaption{color:#555;font-size:13px;" })

// test('- ', { type: 'code', val: ' ', state: 'UNBUF_CODE_START' })
test('- ', { type: 'code', state: 'CODE_START' })

test('mixin project(title)', {
  type: 'mixin',
  val: 'project(title)'
})
test('// comment', {
  state: 'TEXT_START',
  type: 'comment',
  val: ' comment'
})
test('meta(property=\'og:description\' content=\'I came across a problem in Internet Explorer (it wasn\\\'t a problem with Firefox) when I...\')',  {
  name: 'meta',
  type: 'tag',
  attrs: [
    { name: 'property', val: "'og:description'" },
    {
      name: 'content',
      val: "'I came across a problem in Internet Explorer (it wasn\\'t a problem with Firefox) when I...'"
    }
  ]
})

test('-', {
  type: 'code',
  state: 'CODE_START'
})

// test(' -', {
//   state: 'UNBUF_CODE_START',
//   type: 'code',
//   val: ''
// })

test('<UNBUF_CODE>var i', {
  type: 'code',
  val: 'var i'
})

test("link(rel='alternate' type='application/rss+xml' title='Adam Koch &raquo; White-space and character 160 Comments Feed' href='https://wordpress.adamkoch.com/2009/07/25/white-space-and-character-160/feed/')",  {
  name: 'link',
  type: 'tag',
  attrs: [
    { name: 'rel', val: "'alternate'" },
    { name: 'type', val: "'application/rss+xml'" },
    {
      name: 'title',
      val: "'Adam Koch &raquo; White-space and character 160 Comments Feed'"
    },
    {
      name: 'href',
      val: "'https://wordpress.adamkoch.com/2009/07/25/white-space-and-character-160/feed/'"
    }
  ]
})

test('pre.', {
  name: 'pre',
  state: 'TEXT_START',
  type: 'tag'
})

test('pre: code.', {
  children: [
    {
      name: 'code',
      state: 'TEXT_START',
      type: 'tag'
    }
  ],
  name: 'pre',
  state: 'NESTED',
  type: 'tag'
})

test('|. The only "gotcha" was I originally had "www.adamkoch.com" as the A record instead of "adamkoch.com". Not a big deal and easy to rectify.', { type: 'text', val: '. The only "gotcha" was I originally had "www.adamkoch.com" as the A record instead of "adamkoch.com". Not a big deal and easy to rectify.' })

test('.rule: p.', {
  children: [
    {
      name: 'p',
      type: 'tag',
      state: 'TEXT_START'
    }
  ],
  classes: ['rule'],
  state: 'NESTED',
  type: 'tag'
})
test('.rule.unratified: p.', {
  children: [
    {
      name: 'p',
      type: 'tag',
      state: 'TEXT_START'
    }
  ],
  classes: ['rule', 'unratified'],
  state: 'NESTED',
  type: 'tag'
})

test("style(id='wp-block-library-inline-css' type='text/css'). ", {
  name: 'style',
  type: 'tag',
  attrs: [
    { name: 'id', val: "'wp-block-library-inline-css'" },
    { name: 'type', val: "'text/css'" }
  ],
  state: 'TEXT_START'
})

test('|', {
  type: 'empty'
})
test('.', { state: 'TEXT_START' })

try {
  test("tag", { type: 'unknown', name: 'tag' })
throw AssertionError('Expected exception')
} catch (e) {}
// }


test('+code(\'Pretty-print any JSON file\') jq \'.\' package.json',
{
  type: 'mixin_call',
  name: 'code',
  params: "'Pretty-print any JSON file'",
  val: "jq '.' package.json"
} )

test("a(href='/save').button save", {
  name: 'a',
  type: 'tag',
  attrs: [ { name: 'href', val: "'/save'" } ],
  classes: 'button',
  val: 'save'
})

test("meta( charset='utf8' )", {
  name: 'meta',
  type: 'tag',
  attrs: [ { name: 'charset', val: "'utf8'" } ]
})

// test("input(pattern='\\\\S+')", {})
test("a(href='/contact') contact", {
  name: 'a',
  type: 'tag',
  attrs: [ { name: 'href', val: "'/contact'" } ],
  val: 'contact'
})
test("a(foo bar baz)", {
  name: 'a',
  type: 'tag',
  attrs: [ { name: 'foo' }, { name: 'bar' }, { name: 'baz' } ]
})
test("a(foo='foo, bar, baz' bar=1)", {
  name: 'a',
  type: 'tag',
  attrs: [
    { name: 'foo', val: "'foo, bar, baz'" },
    { name: 'bar', val: '1' }
  ] 
})
test("a(foo='((foo))' bar= (1) ? 1 : 0 )", {
  name: 'a',
  type: 'tag',
  attrs: [
    { name: 'foo', val: "'((foo))'" },
    { name: 'bar', val: '(1) ? 1 : 0' }
  ]
})
test("select", { name: 'select', type: 'tag' })
test("option(value='foo' selected) Foo",{
  name: 'option',
  type: 'tag',
  attrs: [ { name: 'value', val: "'foo'" }, { name: 'selected' } ],
  val: 'Foo'
})
test("option(selected value='bar') Bar", {
  name: 'option',
  type: 'tag',
  attrs: [ { name: 'selected' }, { name: 'value', val: "'bar'" } ],
  val: 'Bar'
})
test('a(foo="class:")', { name: 'a', type: 'tag', attrs: [ { name: 'foo', val: '"class:"' } ] })
// test("input(pattern='\\S+')", {})
test('foo(terse="true")', {
  name: 'foo',
  type: 'tag',
  attrs: [ { name: 'terse', val: '"true"' } ]
})
test("foo(date=new Date(0))", {
  name: 'foo',
  type: 'tag',
  attrs: [ { name: 'date', val: 'new Date(0)' } ]
})
test("- var attrs = {foo: 'bar', bar: '<baz>'}",  {
  type: 'code',
  state: 'CODE_START',
  val: "var attrs = {foo: 'bar', bar: '<baz>'}"
})
// test("a(foo='foo' \"bar\"=\"bar\")", {})

try {
  test("a(foo='foo' 'bar'='bar'))", {})
  fail('expected exception')
} catch (expected) {}

// TODO:
test("div&attributes(attrs)", { type: 'tag', name: 'div', attrs: [{val: 'attrs'}] })

};




import fs from 'fs'
import path from 'path';


var yymain = function (args) {
    // When the parser comes with its own `main` function, then use that one:
    if (typeof exports.parser.main === 'function') {
      return exports.parser.main(args);
    }

    if (!args[1]) {
        console.log('Usage:', path.basename(args[0]) + ' FILE');
        process.exit(1);
    }
    var source = fs.readFileSync(path.normalize(args[1]), 'utf8');
    var dst = exports.parser.parse(source);
    console.log('parser output:\n\n', {
        type: typeof dst,
        value: dst
    });
    try {
        console.log("\n\nor as JSON:\n", JSON.stringify(dst, null, 2));
    } catch (e) { /* ignore crashes; output MAY not be serializable! We are a generic bit of code, after all... */ }
    var rv = 0;
    if (typeof dst === 'number' || typeof dst === 'boolean') {
        rv = dst;
    }
    return dst;
};

function yyExecMain() {
  yymain(process.argv.slice(1));
}


function Parser() {
    this.yy = {};
}
Parser.prototype = parser;
parser.Parser = Parser;

function yyparse() {
    return parser.parse.apply(parser, arguments);
}


// IFF this is the main module executed by NodeJS,
// then run 'main()' immediately:
if (typeof module !== 'undefined' && require.main === module) {
  yyExecMain();
}


export default {
    parser,
    Parser,
    parse: yyparse,
    main: yyExecMain,
};

